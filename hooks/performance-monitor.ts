// hooks/performance-monitor.ts
export class PerformanceMonitor {
  private frameCount = 0;
  private lastTime = performance.now();
  private fps = 60;
  private isMonitoring = false;
  private animationId: number | null = null;
  private fpsHistory: number[] = [];
  private memoryCheckInterval: number | null = null;
  
  private callbacks: {
    onLowFPS: (fps: number) => void;
    onHighMemory: (usage: number) => void;
    onSlowFrame: (frameTime: number) => void;
  } = {
    onLowFPS: () => {},
    onHighMemory: () => {},
    onSlowFrame: () => {},
  };

  constructor() {
    this.measureFrame = this.measureFrame.bind(this);
  }

  startMonitoring(callbacks?: Partial<typeof this.callbacks>) {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    Object.assign(this.callbacks, callbacks);
    
    this.measureFrame();
    this.monitorMemory();
  }

  stopMonitoring() {
    this.isMonitoring = false;
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
    if (this.memoryCheckInterval) {
      clearInterval(this.memoryCheckInterval);
      this.memoryCheckInterval = null;
    }
  }

  private measureFrame() {
    if (!this.isMonitoring) return;

    const currentTime = performance.now();
    const frameTime = currentTime - this.lastTime;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º callback
    if (frameTime > 100) { // –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã
      this.callbacks.onSlowFrame(frameTime);
    }
    
    this.frameCount++;
    
    // –ò–∑–º–µ—Ä—è–µ–º FPS –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    if (currentTime - this.lastTime >= 1000) {
      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.fpsHistory.push(this.fps);
      if (this.fpsHistory.length > 10) {
        this.fpsHistory.shift(); // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º callback —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–æ–º FPS
      // –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
      if (this.fps < 10 && document.visibilityState === 'visible') {
        console.warn(`üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–∏–π FPS: ${this.fps}`);
        this.callbacks.onLowFPS(this.fps);
      } else {
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º callback
        if (this.fps < 30) {
          console.log(`üìä –ù–∏–∑–∫–∏–π FPS: ${this.fps} (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)`);
        }
      }
      
      this.frameCount = 0;
      this.lastTime = currentTime;
    }

    this.animationId = requestAnimationFrame(this.measureFrame);
  }

  private monitorMemory() {
    if (!(performance as any).memory) return;

    const checkMemory = () => {
      if (!this.isMonitoring) return;
      
      const memory = (performance as any).memory;
      const usedMB = memory.usedJSHeapSize / 1048576;
      const limitMB = memory.jsHeapSizeLimit / 1048576;
      
      const usagePercent = (usedMB / limitMB) * 100;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º callback —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
      // –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
      if (usagePercent > 98 && document.visibilityState === 'visible') {
        console.warn(`üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${usagePercent.toFixed(1)}%`);
        this.callbacks.onHighMemory(usagePercent);
      } else if (usagePercent > 85) {
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º callback
        console.log(`üìä –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${usagePercent.toFixed(1)}% (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)`);
      }
    };
    
    this.memoryCheckInterval = window.setInterval(checkMemory, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ
  }

  getCurrentFPS(): number {
    return this.fps;
  }

  getAverageFPS(): number {
    if (this.fpsHistory.length === 0) return this.fps;
    return Math.round(this.fpsHistory.reduce((a, b) => a + b, 0) / this.fpsHistory.length);
  }

  getMemoryUsage(): { used: number; limit: number; percentage: number } | null {
    if (!(performance as any).memory) return null;
    
    const memory = (performance as any).memory;
    const used = memory.usedJSHeapSize / 1048576;
    const limit = memory.jsHeapSizeLimit / 1048576;
    
    return {
      used,
      limit,
      percentage: (used / limit) * 100,
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  getStats(): { currentFPS: number; averageFPS: number; memoryUsage: number | null } {
    const memory = this.getMemoryUsage();
    return {
      currentFPS: this.getCurrentFPS(),
      averageFPS: this.getAverageFPS(),
      memoryUsage: memory ? memory.percentage : null
    };
  }

  // –ù–û–í–´–ô: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  updateStats(onUpdate: (stats: { fps: number; memory: number }) => void) {
    const memory = this.getMemoryUsage();
    onUpdate({
      fps: this.fps,
      memory: memory ? memory.percentage : 0
    });
  }
}