FROM node:18-alpine

# FORCE CACHE BUST
RUN echo "Build time: $(date)" > /build_info

WORKDIR /app

# Install curl
RUN apk add --no-cache curl

# Copy package files
COPY package*.json ./

# Install all dependencies (–≤–∫–ª—é—á–∞—è devDependencies –¥–ª—è tsx)
RUN npm ci || npm install

# Copy source code
COPY . .

# Build ONLY frontend (–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä!)
RUN echo 'üßπ Cleaning dist...' && \
    rm -rf dist && \
    echo 'üî® Building frontend...' && \
    npx vite build && \
    echo '‚úÖ Frontend build complete!' && \
    echo '‚è≠Ô∏è  Skipping server build - will use tsx directly'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏
RUN echo "=== BUILD VERIFICATION ===" && \
    echo "Contents of dist/public:" && \
    ls -la dist/public/ && \
    echo "Contents of dist/public/assets:" && \
    ls -la dist/public/assets/ && \
    echo "Checking for CSS files:" && \
    find dist -name "*.css" -type f

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodeuser -u 1001
RUN chown -R nodeuser:nodejs /app
USER nodeuser

# Expose port
EXPOSE 5000

# Environment variables
ENV PORT=5000
ENV NODE_ENV=production
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ CapRover!

# Install PostgreSQL client for migrations
RUN apk add --no-cache postgresql-client

# Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
RUN echo "=== RUNTIME DEBUG ===" && \
    echo "Node version:" && node --version && \
    echo "NPM version:" && npm --version && \
    echo "TSX version:" && npx tsx --version && \
    echo "TypeScript files:" && find . -name "*.ts" -type f | head -10

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
RUN mkdir -p /app/uploads /app/files

# Start with database initialization and then the server
CMD ["sh", "-c", "echo '=== STARTING APPLICATION ===' && \
     echo 'Environment variables:' && \
     echo \"NODE_ENV=$NODE_ENV\" && \
     echo \"PORT=$PORT\" && \
     echo \"DATABASE_URL=${DATABASE_URL:0:50}...\" && \
     echo 'Initializing database tables...' && \
     PGPASSWORD=Vfnfwbrfk1996 psql -h srv-captain--lunaria-db -U lunaria -d lunaria_db -c 'CREATE TABLE IF NOT EXISTS session (sid varchar NOT NULL, sess json NOT NULL, expire timestamp(6) NOT NULL, PRIMARY KEY (sid));' || echo 'Session table creation failed or already exists' && \
     echo 'Starting server with tsx...' && \
     npx tsx server/index.ts"]