import React from "react";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
const NatalChartText = ({ text }: { text: string }) => {
  const formatText = (rawText: string) => {
    if (!rawText) return [];

    const sections = [];
    let currentSection = "";
    const lines = rawText.split('\n');
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞
      if (line.startsWith('### ') || 
          line.startsWith('#### ') ||
          line.match(/^### \d+\. [–ê-–Ø–Å]/i) ||
          line.match(/^#### \d+\. [–ê-–Ø–Å]/i)) {
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        if (currentSection.trim()) {
          sections.push(currentSection.trim());
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        currentSection = line;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É
        currentSection += '\n' + line;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª
    if (currentSection.trim()) {
      sections.push(currentSection.trim());
    }
    
    return sections.map((section, index) => {
      const lines = section.split('\n').filter(line => line.trim());
      if (!lines.length) return null;
      
      const firstLine = lines[0].trim();
      let title = "";
      let content = lines.slice(1).join('\n');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      if (firstLine.startsWith('### ')) {
        title = firstLine.replace('### ', '');
      } else if (firstLine.startsWith('#### ')) {
        title = firstLine.replace('#### ', '');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        content = section;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
      const getIconForSection = (title: string) => {
        if (title.includes('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏') || title.includes('–∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞')) return '‚ôà';
        if (title.includes('–ø–ª–∞–Ω–µ—Ç') || title.includes('—Ö–∞—Ä–∞–∫—Ç–µ—Ä')) return 'ü™ê';
        if (title.includes('–°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ')) return '‚öñÔ∏è';
        if (title.includes('–¢–∞–ª–∞–Ω—Ç—ã') || title.includes('—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏')) return '‚ú®';
        if (title.includes('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') || title.includes('–∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏')) return 'üéØ';
        if (title.includes('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')) return 'üí´';
        if (title.includes('–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ') || title.includes('—á–∏—Å–ª–∞')) return 'üîÆ';
        return 'üåü';
      };
      
      return (
        <div key={index} className="mb-8">
          {index > 0 && <div className="border-t border-gradient-to-r from-purple-500/30 via-blue-500/30 to-purple-500/30 my-8"></div>}
          
          {title && (
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 rounded-full bg-gradient-to-br from-purple-500 to-blue-600 flex items-center justify-center text-2xl shadow-lg">
                {getIconForSection(title)}
              </div>
              <h4 className="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-blue-400 to-purple-400">
                {title}
              </h4>
            </div>
          )}
          
          <div className="text-white text-base leading-relaxed space-y-4 font-cormorant pl-4">
            {formatContent(content)}
          </div>
        </div>
      );
    }).filter(Boolean);
  };

  const formatContent = (content: string) => {
    if (!content) return null;

    const paragraphs = content.split('\n').filter(line => line.trim());
    
    return paragraphs.map((paragraph, idx) => {
      const trimmed = paragraph.trim();
      if (!trimmed) return null;
      
      // –ñ–∏—Ä–Ω—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å **—Ç–µ–∫—Å—Ç**
      if (trimmed.match(/^\*\*[^*]+\*\*:?/)) {
        const boldText = trimmed.replace(/^\*\*([^*]+)\*\*:?\s*/, '$1');
        const restText = trimmed.replace(/^\*\*[^*]+\*\*:?\s*/, '');
        
        return (
          <div key={idx} className="mt-6 mb-4">
            <div className="flex items-center gap-2 mb-3">
              <div className="w-2 h-2 rounded-full bg-gradient-to-r from-purple-400 to-blue-400"></div>
              <h5 className="font-bold text-purple-300 text-lg">
                {boldText}
              </h5>
            </div>
            {restText && (
              <p className="text-white/90 leading-relaxed ml-4">
                {restText}
              </p>
            )}
          </div>
        );
      }
      
      // –°–ø–∏—Å–æ–∫ —Å –¥–µ—Ñ–∏—Å–∞–º–∏
      if (trimmed.startsWith('- ')) {
        return (
          <div key={idx} className="flex items-start mb-3 ml-4">
            <span className="text-purple-400 mr-3 flex-shrink-0 mt-1">‚ú¶</span>
            <span className="text-white/90">
              {trimmed.replace(/^-\s*/, '')}
            </span>
          </div>
        );
      }
      
      // –û—Å–æ–±—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      if (trimmed.includes('–Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º') || trimmed.includes('–ú–µ–Ω—å—à–µ –≤—Å–µ–≥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')) {
        return (
          <div key={idx} className="mb-4 p-4 bg-gradient-to-r from-purple-900/30 to-blue-900/30 rounded-lg border border-purple-500/30">
            <p className="text-white/90 leading-relaxed font-medium">
              {trimmed}
            </p>
          </div>
        );
      }
      
      // –í—ã–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
      if (trimmed.includes('–ë–ª–∏–∑–Ω–µ—Ü–∞–º–∏') || trimmed.includes('–í–æ–¥–æ–ª–µ–µ–º') || trimmed.includes('–û–≤–Ω–æ–º') || 
          trimmed.includes('–ö–æ–∑–µ—Ä–æ–≥–æ–º') || trimmed.includes('–°–∫–æ—Ä–ø–∏–æ–Ω–æ–º')) {
        return (
          <div key={idx} className="mb-3 ml-4">
            <p className="text-white/90 leading-relaxed">
              <span className="text-purple-300 font-medium">
                {trimmed.split(':')[0]}:
              </span>
              <span className="ml-2">
                {trimmed.split(':').slice(1).join(':')}
              </span>
            </p>
          </div>
        );
      }
      
      // –û–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü
      return (
        <p key={idx} className="text-white/90 leading-relaxed mb-4 text-justify">
          {trimmed}
        </p>
      );
    }).filter(Boolean);
  };

  const formattedSections = formatText(text);

  if (!formattedSections.length) {
    return (
      <div className="text-center py-12">
        <div className="w-16 h-16 rounded-full bg-gradient-to-br from-purple-500 to-blue-600 flex items-center justify-center text-3xl mx-auto mb-4 animate-pulse">
          üîÆ
        </div>
        <p className="text-white/60 text-lg">–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
      </div>
    );
  }

  return (
    <div className="space-y-8 max-w-none">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º */}
      <div className="text-center mb-12">
        <div className="relative">
          <h3 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-blue-400 to-purple-400 mb-2">
            ‚ú® –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ‚ú®
          </h3>
          <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-32 h-1 bg-gradient-to-r from-purple-500 via-blue-500 to-purple-500 rounded-full"></div>
        </div>
      </div>
      
      {/* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ */}
      <div className="space-y-8">
        {formattedSections}
      </div>
      
      {/* –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç */}
      <div className="text-center mt-12 pt-8 border-t border-gradient-to-r from-purple-500/30 via-blue-500/30 to-purple-500/30">
        <div className="flex justify-center gap-2 mb-4">
          {['üåü', '‚ú®', 'üîÆ', '‚ú®', 'üåü'].map((star, i) => (
            <span key={i} className="text-2xl animate-pulse" style={{ animationDelay: `${i * 0.2}s` }}>
              {star}
            </span>
          ))}
        </div>
        <p className="text-purple-300 font-medium italic">
          –ü–æ–º–Ω–∏—Ç–µ: –∑–≤—ë–∑–¥—ã —Å–∫–ª–æ–Ω—è—é—Ç, –Ω–æ –Ω–µ –ø—Ä–∏–Ω—É–∂–¥–∞—é—Ç
        </p>
      </div>
    </div>
  );
};

export default NatalChartText;