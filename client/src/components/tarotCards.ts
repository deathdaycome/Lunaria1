// –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function getTarotCardImage(cardName: string): string {
  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –ò–ò (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã) –Ω–∞ —Ñ–∞–π–ª—ã (—Å—Ç—Ä–æ—á–Ω—ã–º–∏)
  const cardMapping: Record<string, string> = {
    "–î—É—Ä–∞–∫": "–¥—É—Ä–∞–∫",
    "–ú–∞–≥": "–º–∞–≥", 
    "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞": "–≤–µ—Ä—Ö–æ–≤–Ω–∞—è_–∂—Ä–∏—Ü–∞",
    "–ñ—Ä–∏—Ü–∞": "–≤–µ—Ä—Ö–æ–≤–Ω–∞—è_–∂—Ä–∏—Ü–∞", // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": "–∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": "–∏–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç": "–∏–µ—Ä–æ—Ñ–∞–Ω—Ç",
    "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ": "–≤–ª—é–±–ª–µ–Ω–Ω—ã–µ",
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞": "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞",
    "–°–∏–ª–∞": "—Å–∏–ª–∞",
    "–û—Ç—à–µ–ª—å–Ω–∏–∫": "–æ—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": "–∫–æ–ª–µ—Å–æ_—Ñ–æ—Ä—Ç—É–Ω—ã",
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å": "—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": "–ø–æ–≤–µ—à–µ–Ω–Ω—ã–π",
    "–°–º–µ—Ä—Ç—å": "—Å–º–µ—Ä—Ç—å",
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "—É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª": "–¥—å—è–≤–æ–ª",
    "–ë–∞—à–Ω—è": "–±–∞—à–Ω—è",
    "–ó–≤–µ–∑–¥–∞": "–∑–≤–µ–∑–¥–∞",
    "–õ—É–Ω–∞": "–ª—É–Ω–∞",
    "–°–æ–ª–Ω—Ü–µ": "—Å–æ–ª–Ω—Ü–µ",
    "–°—É–¥": "—Å—É–¥",
    "–ú–∏—Ä": "–º–∏—Ä"
  };
  
  const fileName = cardMapping[cardName] || cardName.toLowerCase().replace(/\s+/g, '_');
  const imagePath = `/images/tarot/${fileName}.png`;
  
  console.log(`üé¥ Card mapping: "${cardName}" -> "${fileName}" -> ${imagePath}`);
  
  return imagePath;
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤
const MAJOR_ARCANA = [
  "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
  "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
  "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", 
  "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ò–ò
export function extractCardNamesFromText(text: string, expectedCount: number = 3): string[] {
  console.log(`üîç Extracting ${expectedCount} cards from text`);
  console.log(`üîç Text sample:`, text.substring(0, 300));
  
  const foundCards: string[] = [];
  
  // –ò—â–µ–º –ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
  MAJOR_ARCANA.forEach(cardName => {
    // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    const patterns = [
      new RegExp(`\\b${cardName}\\b`, 'gi'),
      new RegExp(`–∫–∞—Ä—Ç–∞\\s+[‚Äî-]?\\s*${cardName}`, 'gi'),
      new RegExp(`${cardName}\\s*[‚Äî-:]`, 'gi'),
      new RegExp(`-\\s*${cardName}`, 'gi'),
      new RegExp(`\\(${cardName}\\)`, 'gi')
    ];
    
    for (const pattern of patterns) {
      if (pattern.test(text) && !foundCards.includes(cardName)) {
        foundCards.push(cardName);
        console.log(`‚úÖ Found card: ${cardName}`);
        break;
      }
    }
  });
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞
  while (foundCards.length < expectedCount) {
    const randomCard = MAJOR_ARCANA[Math.floor(Math.random() * MAJOR_ARCANA.length)];
    if (!foundCards.includes(randomCard)) {
      foundCards.push(randomCard);
      console.log(`üé≤ Added random card: ${randomCard}`);
    }
  }
  
  console.log(`üîç Final cards list:`, foundCards.slice(0, expectedCount));
  return foundCards.slice(0, expectedCount);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
export function getRandomTarotCard(): string {
  return MAJOR_ARCANA[Math.floor(Math.random() * MAJOR_ARCANA.length)];
}