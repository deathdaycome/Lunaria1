import React from 'react';

interface TarotCardProps {
  cardName: string;
  width?: number;
  height?: number;
  showName?: boolean;
}

export default function TarotCard({ 
  cardName, 
  width = 80, 
  height = 128, 
  showName = true 
}: TarotCardProps) {
  const imagePath = getTarotCardImage(cardName);
  
  console.log(`üé¥ Rendering TarotCard: ${cardName} -> ${imagePath}`);
  
  return (
    <div className="flex flex-col items-center space-y-2">
      <div 
        className="relative overflow-hidden rounded-lg border-2 border-amber-400/60 shadow-lg"
        style={{ width: `${width}px`, height: `${height}px` }}
      >
        <img 
          src={imagePath}
          alt={cardName}
          className="w-full h-full object-cover"
          onLoad={() => {
            console.log(`‚úÖ Image loaded successfully: ${imagePath}`);
          }}
          onError={(e) => {
            console.error(`‚ùå Failed to load image: ${imagePath}`);
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∑–∞–≥–ª—É—à–∫—É
            const target = e.target as HTMLImageElement;
            target.style.display = 'none';
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const parent = target.parentElement;
            if (parent && !parent.querySelector('.card-fallback')) {
              const fallback = document.createElement('div');
              fallback.className = 'card-fallback w-full h-full bg-gradient-to-b from-purple-600 to-blue-600 flex flex-col items-center justify-center text-white rounded-lg';
              fallback.innerHTML = `
                <span class="text-2xl mb-1">üîÆ</span>
                <span class="text-xs text-center px-1 leading-tight">${cardName}</span>
              `;
              parent.appendChild(fallback);
            }
          }}
        />
        
        {/* –ú–∞–≥–∏—á–µ—Å–∫–∏–π –±–ª–µ—Å–∫ –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç—ã */}
        <div className="absolute inset-0 bg-gradient-to-tr from-transparent via-white/10 to-transparent opacity-50"></div>
      </div>
      
      {showName && (
        <p className="text-sm font-connie text-amber-300 text-center max-w-20 leading-tight">
          {cardName}
        </p>
      )}
    </div>
  );
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–ê–ü–ü–ò–ù–ì–ê –ù–ê–ó–í–ê–ù–ò–ô –ö–ê–†–¢ –ù–ê –§–ê–ô–õ–´
export function getTarotCardImage(cardName: string): string {
  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –ò–ò –Ω–∞ —Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–≤–æ–µ–π –ø–∞–ø–∫–µ
  const cardMapping: Record<string, string> = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ç–≤–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö
    "–î—É—Ä–∞–∫": "–¥—É—Ä–∞–∫",
    "–ú–∞–≥": "–º–∞–≥", 
    "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞": "–∂—Ä–∏—Ü–∞",
    "–ñ—Ä–∏—Ü–∞": "–∂—Ä–∏—Ü–∞", // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    "–í—ã—Å—à–∞—è –ñ—Ä–∏—Ü–∞": "–∂—Ä–∏—Ü–∞", // –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": "–∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": "–∏–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç": "¬¶–¢¬¶¬¶T–êT–ï¬¶-¬¶-¬¶-¬¶-T–ü ¬¶¬¶T–ê¬¶¬¨T–ñ¬¶-", // —ç—Ç–æ —Ñ–∞–π–ª —Å –∫—Ä–∞–∫–æ–∑—è–±—Ä–∞–º–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –ò–µ—Ä–æ—Ñ–∞–Ω—Ç
    "–ü–µ—Ä–≤–æ—Å–≤—è—â–µ–Ω–Ω–∏–∫": "¬¶–¢¬¶¬¶T–êT–ï¬¶-¬¶-¬¶-¬¶-T–ü ¬¶¬¶T–ê¬¶¬¨T–ñ¬¶-", // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ": "–≤–ª—é–±–ª–µ–Ω–Ω—ã–µ",
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞": "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞",
    "–°–∏–ª–∞": "—Å–∏–ª–∞",
    "–û—Ç—à–µ–ª—å–Ω–∏–∫": "–æ—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": "–∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã",
    "–ö–æ–ª–µ—Å–æ –°—É–¥—å–±—ã": "–∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã", // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å": "—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": "–ø–æ–≤–µ—à–µ–Ω–Ω—ã–π",
    "–°–º–µ—Ä—Ç—å": "—Å–º–µ—Ä—Ç—å",
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "—É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª": "–¥—å—è–≤–æ–ª",
    "–ë–∞—à–Ω—è": "–±–∞—à–Ω—è",
    "–ó–≤–µ–∑–¥–∞": "–∑–≤–µ–∑–¥–∞",
    "–õ—É–Ω–∞": "–ª—É–Ω–∞",
    "–°–æ–ª–Ω—Ü–µ": "—Å–æ–ª–Ω—Ü–µ",
    "–°—É–¥": "—Å—É–¥",
    "–°—Ç—Ä–∞—à–Ω—ã–π –°—É–¥": "—Å—É–¥", // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    "–ú–∏—Ä": "–º–∏—Ä",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è": "–º–∏—Ä" // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  };
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
  const normalizedCardName = cardName.trim();
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
  let fileName = cardMapping[normalizedCardName];
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
  if (!fileName) {
    const cardKeys = Object.keys(cardMapping);
    const partialMatch = cardKeys.find(key => 
      key.toLowerCase().includes(normalizedCardName.toLowerCase()) ||
      normalizedCardName.toLowerCase().includes(key.toLowerCase())
    );
    
    if (partialMatch) {
      fileName = cardMapping[partialMatch];
      console.log(`üîç Partial match found: "${normalizedCardName}" -> "${partialMatch}" -> "${fileName}"`);
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  if (!fileName) {
    fileName = normalizedCardName.toLowerCase()
      .replace(/\s+/g, ' ') // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s/g, '_') // –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
      .replace(/[^\w\u0400-\u04FF_]/g, ''); // —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
    
    console.log(`‚ö†Ô∏è No mapping found, using transformed: "${normalizedCardName}" -> "${fileName}"`);
  }
  
  const imagePath = `/images/tarot/${fileName}.png`;
  
  console.log(`üé¥ Card mapping: "${normalizedCardName}" -> "${fileName}" -> ${imagePath}`);
  
  return imagePath;
}

// ‚úÖ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–ê–†–¢ –°–¢–ê–†–®–ò–• –ê–†–ö–ê–ù–û–í –° –í–ê–†–ò–ê–ù–¢–ê–ú–ò –ù–ê–ó–í–ê–ù–ò–ô
const MAJOR_ARCANA = [
  "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ñ—Ä–∏—Ü–∞", "–í—ã—Å—à–∞—è –ñ—Ä–∏—Ü–∞",
  "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–ü–µ—Ä–≤–æ—Å–≤—è—â–µ–Ω–Ω–∏–∫",
  "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", 
  "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–ö–æ–ª–µ—Å–æ –°—É–¥—å–±—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
  "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", 
  "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–°—Ç—Ä–∞—à–Ω—ã–π –°—É–¥", "–ú–∏—Ä", "–í—Å–µ–ª–µ–Ω–Ω–∞—è"
];

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –ö–ê–†–¢ –ò–ó –¢–ï–ö–°–¢–ê –ò–ò
export function extractCardNamesFromText(text: string, expectedCount: number = 3): string[] {
  console.log(`üîç Extracting ${expectedCount} cards from text`);
  console.log(`üîç Text sample:`, text.substring(0, 300));
  
  const foundCards: string[] = [];
  
  // –ò—â–µ–º –ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
  MAJOR_ARCANA.forEach(cardName => {
    // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    const patterns = [
      new RegExp(`\\b${cardName}\\b`, 'gi'),
      new RegExp(`–∫–∞—Ä—Ç–∞\\s+[‚Äî\\-]?\\s*${cardName}`, 'gi'),
      new RegExp(`${cardName}\\s*[‚Äî\\-:]`, 'gi'),  // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –¥–µ—Ñ–∏—Å
      new RegExp(`-\\s*${cardName}`, 'gi'),
      new RegExp(`\\(${cardName}\\)`, 'gi')
    ];
    
    for (const pattern of patterns) {
      if (pattern.test(text) && !foundCards.includes(cardName)) {
        foundCards.push(cardName);
        console.log(`‚úÖ Found card: ${cardName}`);
        break;
      }
    }
  });
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç
  const mainCards = [
    "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", 
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", 
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", 
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
  ];
  
  while (foundCards.length < expectedCount) {
    const randomCard = mainCards[Math.floor(Math.random() * mainCards.length)];
    if (!foundCards.includes(randomCard)) {
      foundCards.push(randomCard);
      console.log(`üé≤ Added random card: ${randomCard}`);
    }
  }
  
  console.log(`üîç Final cards list:`, foundCards.slice(0, expectedCount));
  return foundCards.slice(0, expectedCount);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–õ–£–ß–ê–ô–ù–û–ô –ö–ê–†–¢–´
export function getRandomTarotCard(): string {
  const mainCards = [
    "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", 
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", 
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", 
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
  ];
  return mainCards[Math.floor(Math.random() * mainCards.length)];
}