import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import MainLayout from "@/components/layout/main-layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { Sparkles, RotateCcw, Eye } from "lucide-react";

const TarotText = ({ text }: { text: string | any }) => {
  console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TarotText ===");
  console.log("üîç –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:", text);
  console.log("üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", typeof text);
  
  if (!text) {
    return (
      <div className="text-center py-8 text-white/60">
        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
      </div>
    );
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  let textString: string;
  if (typeof text === 'string') {
    textString = text;
  } else if (Array.isArray(text)) {
    textString = text.map(item => {
      if (typeof item === 'object' && item?.text) {
        return item.text;
      } else if (typeof item === 'object' && item?.content) {
        return item.content;
      } else if (typeof item === 'string') {
        return item;
      }
      return String(item);
    }).join('\n\n');
  } else if (typeof text === 'object' && text?.analysis) {
    textString = text.analysis;
  } else if (typeof text === 'object' && text?.reading) {
    textString = text.reading;
  } else {
    textString = JSON.stringify(text, null, 2);
  }
  
  console.log("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç:", textString.substring(0, 200));
  
  // –û—á–∏—â–∞–µ–º –æ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤
  const cleanText = textString
    .replace(/\*\*/g, '')
    .replace(/\*/g, '')
    .replace(/###/g, '')
    .replace(/#/g, '')
    .trim();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç
  const extractCardNames = (text: string): string[] => {
    const cardPatterns = [
      /(?:–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞|–≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞|—Ç—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞|—á–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–∞—Ä—Ç–∞|–ø—è—Ç–∞—è –∫–∞—Ä—Ç–∞)\s*[‚Äî-]\s*([–ê-–Ø–∞-—è\s]+)\./gi,
      /(?:–∫–∞—Ä—Ç–∞\s+\d+|–∫–∞—Ä—Ç–∞)\s*[‚Äî\-:]\s*([–ê-–Ø–∞-—è\s]+)\./gi,
      /(–û—Ç—à–µ–ª—å–Ω–∏–∫|–î—É—Ä–∞–∫|–î—å—è–≤–æ–ª|–ú–∞–≥|–ñ—Ä–∏—Ü–∞|–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞|–ò–º–ø–µ—Ä–∞—Ç–æ—Ä|–ò–µ—Ä–æ—Ñ–∞–Ω—Ç|–í–ª—é–±–ª–µ–Ω–Ω—ã–µ|–ö–æ–ª–µ—Å–Ω–∏—Ü–∞|–°–∏–ª–∞|–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π|–°–º–µ—Ä—Ç—å|–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å|–ë–∞—à–Ω—è|–ó–≤–µ–∑–¥–∞|–õ—É–Ω–∞|–°–æ–ª–Ω—Ü–µ|–°—É–¥|–ú–∏—Ä)/gi
    ];
    
    const foundCards: string[] = [];
    
    cardPatterns.forEach(pattern => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± match –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(match => {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
          const cardMatch = match.match(/([–ê-–Ø–∞-—è\s]+)/);
          if (cardMatch && cardMatch[1]) {
            const cardName = cardMatch[1].trim();
            if (!foundCards.includes(cardName)) {
              foundCards.push(cardName);
            }
          }
        });
      }
    });
    
    return foundCards;
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–∞—Ä—Ç–∞–º
  const parseCardReadings = (text: string) => {
    const cardNames = extractCardNames(text);
    const cards: Array<{name: string, description: string, position: string}> = [];
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
    const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim().length > 20);
    
    if (cardNames.length > 0) {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∏–º
      cardNames.forEach((cardName, index) => {
        const position = index === 0 ? "–ü—Ä–æ—à–ª–æ–µ" : 
                        index === 1 ? "–ù–∞—Å—Ç–æ—è—â–µ–µ" : 
                        index === 2 ? "–ë—É–¥—É—â–µ–µ" :
                        `–ö–∞—Ä—Ç–∞ ${index + 1}`;
        
        // –ò—â–µ–º –∞–±–∑–∞—Ü, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç—Ç—É –∫–∞—Ä—Ç—É
        const cardParagraph = paragraphs.find(p => 
          p.toLowerCase().includes(cardName.toLowerCase()) ||
          p.includes(`${index + 1}`) ||
          p.includes(position.toLowerCase())
        );
        
        if (cardParagraph) {
          cards.push({
            name: cardName,
            position: position,
            description: cardParagraph.trim()
          });
        }
      });
    } else {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã, –¥–µ–ª–∏–º –ø–æ –∞–±–∑–∞—Ü–∞–º
      paragraphs.forEach((paragraph, index) => {
        if (index < 5) { // –ú–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç
          const position = index === 0 ? "–ü—Ä–æ—à–ª–æ–µ" : 
                          index === 1 ? "–ù–∞—Å—Ç–æ—è—â–µ–µ" : 
                          index === 2 ? "–ë—É–¥—É—â–µ–µ" :
                          index === 3 ? "–í–ª–∏—è–Ω–∏–µ" :
                          "–ò—Ç–æ–≥";
          
          cards.push({
            name: `–ö–∞—Ä—Ç–∞ ${index + 1}`,
            position: position,
            description: paragraph.trim()
          });
        }
      });
    }
    
    // –ò—â–µ–º –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const adviceSection = paragraphs.find(p => 
      p.toLowerCase().includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') ||
      p.toLowerCase().includes('—Å–æ–≤–µ—Ç—ã') ||
      p.toLowerCase().includes('—á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è')
    );
    
    return { cards, advice: adviceSection };
  };
  
  const { cards, advice } = parseCardReadings(cleanText);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const cleanCardDescription = (description: string, cardName: string): string => {
    return description
      .replace(new RegExp(`–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞\\s*[‚Äî-]\\s*${cardName}\\.?`, 'gi'), '')
      .replace(new RegExp(`–≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞\\s*[‚Äî-]\\s*${cardName}\\.?`, 'gi'), '')
      .replace(new RegExp(`—Ç—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞\\s*[‚Äî-]\\s*${cardName}\\.?`, 'gi'), '')
      .replace(new RegExp(`—á–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–∞—Ä—Ç–∞\\s*[‚Äî-]\\s*${cardName}\\.?`, 'gi'), '')
      .replace(new RegExp(`–ø—è—Ç–∞—è –∫–∞—Ä—Ç–∞\\s*[‚Äî-]\\s*${cardName}\\.?`, 'gi'), '')
      .replace(/^[–ê-–Ø–∞-—è\s,]+\.\s*/, '') // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –Ω–∞—á–∞–ª–µ
      .trim();
  };
  
  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç
  const getPositionIcon = (position: string): string => {
    const iconMap: Record<string, string> = {
      '–ü—Ä–æ—à–ª–æ–µ': '‚èÆÔ∏è',
      '–ù–∞—Å—Ç–æ—è—â–µ–µ': '‚èØÔ∏è', 
      '–ë—É–¥—É—â–µ–µ': '‚è≠Ô∏è',
      '–í–ª–∏—è–Ω–∏–µ': 'üåü',
      '–ò—Ç–æ–≥': 'üéØ',
      '–ö–∞—Ä—Ç–∞ 1': '1Ô∏è‚É£',
      '–ö–∞—Ä—Ç–∞ 2': '2Ô∏è‚É£',
      '–ö–∞—Ä—Ç–∞ 3': '3Ô∏è‚É£',
      '–ö–∞—Ä—Ç–∞ 4': '4Ô∏è‚É£',
      '–ö–∞—Ä—Ç–∞ 5': '5Ô∏è‚É£'
    };
    return iconMap[position] || 'üîÆ';
  };
  
  return (
    <div className="space-y-8 max-w-none">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h3 className="text-2xl font-connie text-amber-400 mb-2 flex items-center justify-center">
          <span className="mr-3">üîÆ</span>
          –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
          <span className="ml-3">üîÆ</span>
        </h3>
        <div className="w-32 h-px bg-gradient-to-r from-transparent via-amber-400 to-transparent mx-auto"></div>
      </div>

      {/* –ö–∞—Ä—Ç—ã */}
      {cards.length > 0 && (
        <div className="space-y-6">
          {cards.map((card, index) => (
            <div key={index} className="relative">
              {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ */}
              {index > 0 && (
                <div className="flex items-center my-6">
                  <div className="flex-1 h-px bg-gradient-to-r from-transparent via-purple-400/30 to-transparent"></div>
                  <div className="mx-4 text-purple-400/60">‚ú®</div>
                  <div className="flex-1 h-px bg-gradient-to-r from-transparent via-purple-400/30 to-transparent"></div>
                </div>
              )}
              
              {/* –ö–∞—Ä—Ç–æ—á–∫–∞ */}
              <div className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 rounded-2xl p-6 border border-purple-400/20 backdrop-blur-sm">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç—ã */}
                <div className="flex items-center mb-4">
                  <div className="text-2xl mr-3">
                    {getPositionIcon(card.position)}
                  </div>
                  <div className="flex-1">
                    <h4 className="text-xl font-connie text-amber-300 mb-1">
                      {card.name}
                    </h4>
                    <p className="text-purple-300 text-sm font-medium">
                      {card.position}
                    </p>
                  </div>
                  <div className="text-4xl opacity-20">
                    üÉè
                  </div>
                </div>
                
                {/* –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã */}
                <div className="text-white leading-relaxed font-cormorant text-base pl-4 border-l-2 border-amber-400/40">
                  <p className="mb-0">
                    {cleanCardDescription(card.description, card.name)}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
      
      {/* –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {advice && (
        <div className="mt-8">
          <div className="flex items-center my-6">
            <div className="flex-1 h-px bg-gradient-to-r from-transparent via-amber-400/50 to-transparent"></div>
            <div className="mx-4 text-amber-400">‚≠ê</div>
            <div className="flex-1 h-px bg-gradient-to-r from-transparent via-amber-400/50 to-transparent"></div>
          </div>
          
          <div className="bg-gradient-to-br from-amber-900/20 to-orange-900/20 rounded-2xl p-6 border border-amber-400/20 backdrop-blur-sm">
            <h4 className="text-xl font-connie text-amber-300 mb-4 flex items-center">
              <span className="mr-3 text-2xl">üí°</span>
              –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </h4>
            
            <div className="text-white leading-relaxed font-cormorant text-base pl-4 border-l-2 border-amber-400/40">
              <p>{advice.trim()}</p>
            </div>
          </div>
        </div>
      )}
      
      {/* –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç */}
      {cards.length === 0 && (
        <div className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 rounded-2xl p-6 border border-purple-400/20 backdrop-blur-sm">
          <h4 className="text-xl font-connie text-amber-300 mb-4 flex items-center">
            <span className="mr-3 text-2xl">üîÆ</span>
            –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
          </h4>
          
          <div className="text-white leading-relaxed font-cormorant text-base space-y-4">
            {cleanText.split('\n\n').map((paragraph, index) => (
              <p key={index} className="mb-4">
                {paragraph.trim()}
              </p>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// ‚ú® –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ï–°–ï–¢–´ –ò–ó OPENAI.TS
const TAROT_PRESETS: Record<string, Array<{
  id: string;
  name: string;
  cards3: string[];
  cards5: string[];
}>> = {
  "love": [
    {
      id: "love-1",
      name: "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
      cards3: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
      cards5: ["–ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", "–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ –ø–æ–ª—É—á–∞—é", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "love-2", 
      name: "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      cards3: ["–ú–æ–∏ —á—É–≤—Å—Ç–≤–∞", "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–°–æ–≤–µ—Ç"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–í–∑–≥–ª—è–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–í–∑–≥–ª—è–¥ –º–µ–Ω—è", "–°–æ–≤–µ—Ç", "–ë—É–¥—É—â–µ–µ"]
    },
    {
      id: "love-3",
      name: "–û–∂–∏–¥–∞–Ω–∏—è vs –†–µ–∞–ª—å–Ω–æ—Å—Ç—å",
      cards3: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ò—Ç–æ–≥"],
      cards5: ["–ú–æ–∏ —ç–º–æ—Ü–∏–∏", "–≠–º–æ—Ü–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–ß—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ò—Ç–æ–≥"]
    },
    {
      id: "love-4",
      name: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–°–æ–≤–µ—Ç"],
      cards5: ["–õ—é–±–æ–≤—å —Å–µ–π—á–∞—Å", "–ß—Ç–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ß—Ç–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß–µ–≥–æ –±–æ—é—Å—å", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"]
    },
    {
      id: "love-5",
      name: "–í–∑–∞–∏–º–Ω—ã–π –æ–±–º–µ–Ω",
      cards3: ["–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ —è –ø–æ–ª—É—á–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ù–∞—á–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π", "–ò—Ö —Ä–∞–∑–≤–∏—Ç–∏–µ", "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ß—Ç–æ —Å–∫—Ä—ã—Ç–æ", "–°–æ–≤–µ—Ç"]
    }
  ],
  "career": [
    {
      id: "career-1",
      name: "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
      cards3: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ –∫–∞—Ä—å–µ—Ä—ã"],
      cards5: ["–¶–µ–ª—å", "–†–µ—Å—É—Ä—Å—ã", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–î–µ–π—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "career-2",
      name: "–°–∏–ª—ã –∏ —Å–ª–∞–±–Ω–æ—Å—Ç–∏",
      cards3: ["–ú–æ–∏ —Å–∏–ª—ã", "–ú–æ–∏ —Å–ª–∞–±–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞"],
      cards5: ["–ú–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "career-3",
      name: "–¶–µ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
      cards3: ["–ú–æ–∏ —Ü–µ–ª–∏", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
      cards5: ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ß—Ç–æ —è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å", "–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"]
    },
    {
      id: "career-4",
      name: "–í–∑–≥–ª—è–¥ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      cards3: ["–°–∏—Ç—É–∞—Ü–∏—è —Å–µ–π—á–∞—Å", "–ö–∞–∫ –º–µ–Ω—è –≤–∏–¥—è—Ç –∫–æ–ª–ª–µ–≥–∏/—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–í–ª–∏—è–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã"],
      cards5: ["–ú–æ–∏ —Ü–µ–ª–∏", "–ü–ª–∞–Ω—ã", "–í—ã–∑–æ–≤—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ò—Ç–æ–≥"]
    },
    {
      id: "career-5",
      name: "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥",
      cards3: ["–ß—Ç–æ —è –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç –º–µ–Ω—è", "–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥"],
      cards5: ["–ö–ª—é—á–µ–≤–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è", "–õ–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–í–Ω–µ—à–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–†–∏—Å–∫–∏", "–°–æ–≤–µ—Ç –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"]
    }
  ],
  "spirituality": [
    {
      id: "spirituality-1",
      name: "–î—É—Ö–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ –¥—É—Ö–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í—ã–∑–æ–≤", "–°–æ–≤–µ—Ç"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ò—Å—Ç–æ–∫–∏", "–í—ã–∑–æ–≤—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—É—Ç—å"]
    },
    {
      id: "spirituality-2",
      name: "–û—Å–æ–∑–Ω–∞–Ω–∏–µ",
      cards3: ["–ß—Ç–æ —è –æ—Å–æ–∑–Ω–∞—é", "–ß—Ç–æ —Å–∫—Ä—ã—Ç–æ", "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å"],
      cards5: ["–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—á–∏—Ç–µ–ª—å", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "spirituality-3",
      name: "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä",
      cards3: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä", "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è", "–ü—É—Ç—å –≤–ø–µ—Ä–µ–¥"],
      cards5: ["–ú–æ–∏ —Å–æ–º–Ω–µ–Ω–∏—è", "–ú–æ—è –≤–µ—Ä–∞", "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç –º–µ–Ω—è", "–ß—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç", "–ò—Ç–æ–≥ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏"]
    },
    {
      id: "spirituality-4",
      name: "–ë–∞–ª–∞–Ω—Å",
      cards3: ["–ß—Ç–æ –º–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ü—É—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É"],
      cards5: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç", "–ü—Ä–∏—á–∏–Ω–∞", "–ü—É—Ç—å –∏—Å—Ü–µ–ª–µ–Ω–∏—è", "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏"]
    },
    {
      id: "spirituality-5",
      name: "–î—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å",
      cards3: ["–ß—Ç–æ —è –º–æ–≥—É –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß—Ç–æ –º–Ω–µ –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è"],
      cards5: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ", "–£—Ä–æ–∫", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"]
    }
  ],
  "money": [
    {
      id: "finances-1",
      name: "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–°–æ–≤–µ—Ç"],
      cards5: ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", "–û–±–ª–∞—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "finances-2",
      name: "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã",
      cards3: ["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"],
      cards5: ["–ú–æ–∏ —Ä–µ—Å—É—Ä—Å—ã", "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–†–∏—Å–∫–∏", "–ù–æ–≤—ã–π –ø—É—Ç—å", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]
    },
    {
      id: "finances-3",
      name: "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
      cards3: ["–ß—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–¶–µ–ª–∏", "–ü–ª–∞–Ω—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "finances-4",
      name: "–†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
      cards3: ["–†–∏—Å–∫–∏", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–î–µ–π—Å—Ç–≤–∏—è"],
      cards5: ["–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ë—É–¥—É—â–µ–µ", "–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "finances-5",
      name: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
      cards3: ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç"],
      cards5: ["–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–£–≥—Ä–æ–∑—ã", "–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"]
    }
  ],
  "health": [
    {
      id: "health-1",
      name: "–ó–¥–æ—Ä–æ–≤—å–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "–°–æ–≤–µ—Ç"],
      cards5: ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã", "–°–æ–≤–µ—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"]
    },
    {
      id: "health-2",
      name: "–¢–µ–ª–æ-–≠–º–æ—Ü–∏–∏-–î—É—Ö",
      cards3: ["–¢–µ–ª–æ", "–≠–º–æ—Ü–∏–∏", "–î—É—Ö"],
      cards5: ["–°–∏–º–ø—Ç–æ–º", "–ü—Ä–∏—á–∏–Ω–∞", "–ß—Ç–æ —è –¥–µ–ª–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "–ò—Ç–æ–≥"]
    },
    {
      id: "health-3",
      name: "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç",
      cards3: ["–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ú–æ–π —Ä–µ—Å—É—Ä—Å", "–ß—Ç–æ –∏—Å—Ç–æ—â–∞–µ—Ç", "–ü–æ–º–æ—â—å –∏–∑–≤–Ω–µ", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∞—Ä—å–µ—Ä—ã", "–ü—É—Ç—å –∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—é"]
    },
    {
      id: "health-4",
      name: "–ü—Ä–∏—á–∏–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤", "–¢–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–ß—Ç–æ –≤–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ò—Ç–æ–≥ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è"]
    },
    {
      id: "health-5",
      name: "–≠–Ω–µ—Ä–≥–∏—è –∏ —Å—Ç—Ä–µ—Å—Å",
      cards3: ["–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞", "–°–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"],
      cards5: ["–¢–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è", "–≠–º–æ—Ü–∏–∏", "–ú—ã—à–ª–µ–Ω–∏–µ", "–í–Ω–µ—à–Ω–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ", "–°–æ–≤–µ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É"]
    }
  ],
  "friendship": [
    {
      id: "friendship-1",
      name: "–Ø –∏ –¥—Ä—É–≥",
      cards3: ["–Ø", "–î—Ä—É–≥", "–°—É—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π"],
      cards5: ["–Ø", "–î—Ä—É–≥", "–ù–∞—à–∏ –æ–±—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "–í—ã–∑–æ–≤—ã", "–ò—Ç–æ–≥"]
    },
    {
      id: "friendship-2",
      name: "–í–∑–∞–∏–º–Ω—ã–π –æ–±–º–µ–Ω",
      cards3: ["–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ –ø–æ–ª—É—á–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–æ–≤–µ—Ç—ã", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"]
    },
    {
      id: "friendship-3",
      name: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –¥—Ä—É–∂–±–µ",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–°–æ–≤–µ—Ç"],
      cards5: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–û–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–∞", "–ß—Ç–æ –Ω–∞—Å —Å–æ–µ–¥–∏–Ω—è–µ—Ç", "–ß—Ç–æ –Ω–∞—Å —Ä–∞–∑–¥–µ–ª—è–µ—Ç", "–ò—Ç–æ–≥"]
    },
    {
      id: "friendship-4",
      name: "–û–∂–∏–¥–∞–Ω–∏—è",
      cards3: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ò—Ç–æ–≥"],
      cards5: ["–ò—Å—Ç–æ–∫–∏ –¥—Ä—É–∂–±—ã", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "friendship-5",
      name: "–ë—É–¥—É—â–µ–µ –¥—Ä—É–∂–±—ã",
      cards3: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–ë—É–¥—É—â–µ–µ –¥—Ä—É–∂–±—ã"],
      cards5: ["–Ø", "–î—Ä—É–≥", "–ù–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–∞", "–ë–∞—Ä—å–µ—Ä—ã", "–ö–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥"]
    }
  ]
};

// ‚ú® –ö–ê–¢–ï–ì–û–†–ò–ò –î–õ–Ø –í–´–ë–û–†–ê –¢–ï–ú–´
const categories = [
  { id: "love", name: "–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", icon: "üíù" },
  { id: "career", name: "–ö–∞—Ä—å–µ—Ä–∞", icon: "üíº" },
  { id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "üåø" },
  { id: "money", name: "–§–∏–Ω–∞–Ω—Å—ã", icon: "üí∞" },
  { id: "spirituality", name: "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å", icon: "‚ú®" },
  { id: "friendship", name: "–î—Ä—É–∂–±–∞", icon: "ü§ù" },
];

// ‚ú® –ú–û–ö–û–í–´–ï –ö–ê–†–¢–´ –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
const mockCards = Array.from({ length: 78 }, (_, i) => ({
  id: i + 1,
  name: `–ö–∞—Ä—Ç–∞ ${i + 1}`,
  isReversed: false,
}));

type Step = "layout" | "category" | "preset" | "question" | "cards" | "reading";

export default function TarotPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  
  const [currentStep, setCurrentStep] = useState<Step>("layout");
  const [cardCount, setCardCount] = useState<3 | 5>(3);
  const [selectedCategory, setSelectedCategory] = useState<string>("");
  const [selectedPreset, setSelectedPreset] = useState<string>("");
  const [question, setQuestion] = useState<string>("");
  const [selectedCards, setSelectedCards] = useState<number[]>([]);
  const [revealedCards, setRevealedCards] = useState<number[]>([]);
  const [reading, setReading] = useState<string>("");

  // ‚ú® –ü–û–õ–£–ß–ê–ï–ú –ü–†–ï–°–ï–¢–´ –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò
  const getPresetsForCategory = () => {
    return TAROT_PRESETS[selectedCategory] || TAROT_PRESETS["love"];
  };

  // ‚ú® –ú–£–¢–ê–¶–ò–Ø –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –†–ê–°–ö–õ–ê–î–ê
  const generateReading = useMutation({
    mutationFn: async () => {
      const response = await fetch("/api/tarot", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          question,
          cardCount,
          category: selectedCategory,
          preset: selectedPreset,
          selectedCards: selectedCards.map(cardId => mockCards[cardId - 1]),
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞");
      }

      const data = await response.json();
      return data.reading;
    },
    onSuccess: (data) => {
      setReading(data);
      setCurrentStep("reading");
      toast({
        title: "–†–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤",
        description: "–ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ —Å–≤–æ–∏ —Ç–∞–π–Ω—ã",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const nextStep = () => {
    switch (currentStep) {
      case "layout":
        setCurrentStep("category");
        break;
      case "category":
        if (!selectedCategory) {
          toast({
            title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É",
            description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞",
            variant: "destructive",
          });
          return;
        }
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–ù–ö–¢–ê 21: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setSelectedCards([]);
        setRevealedCards([]);
        setCurrentStep("preset");
        break;
      case "preset":
        if (!selectedPreset) {
          toast({
            title: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç",
            description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∞",
            variant: "destructive",
          });
          return;
        }
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–ù–ö–¢–ê 21: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–µ—Å–µ—Ç–∞
        setSelectedCards([]);
        setRevealedCards([]);
        setCurrentStep("question");
        break;
      case "question":
        if (!question.trim()) {
          toast({
            title: "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é",
            description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é",
            variant: "destructive",
          });
          return;
        }
        const randomCards = Array.from({ length: cardCount }, () => 
          Math.floor(Math.random() * 78) + 1
        );
        setSelectedCards(randomCards);
        setCurrentStep("cards");
        break;
      case "cards":
        generateReading.mutate();
        break;
    }
  };

  const revealCard = (index: number) => {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–ù–ö–¢–ê 23: –†–∞–∑–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è 3 –∏ 5 –∫–∞—Ä—Ç
    let expectedOrder: number[];
    
    if (cardCount === 3) {
      expectedOrder = [0, 1, 2]; // –î–ª—è 3 –∫–∞—Ä—Ç: 1 ‚Üí 2 ‚Üí 3
    } else {
      expectedOrder = [2, 0, 4, 1, 3]; // –î–ª—è 5 –∫–∞—Ä—Ç: 3 ‚Üí 1 ‚Üí 5 ‚Üí 2 ‚Üí 4
    }
    
    const expectedNextCardIndex = expectedOrder[revealedCards.length];
    
    if (index === expectedNextCardIndex && !revealedCards.includes(index)) {
      setRevealedCards([...revealedCards, index]);
    } else if (index !== expectedNextCardIndex) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const expectedCardNumber = expectedNextCardIndex + 1;
      toast({
        title: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫",
        description: `–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É ${expectedCardNumber}`,
        variant: "destructive",
      });
    }
  };

  const resetReading = () => {
    setCurrentStep("layout");
    setSelectedCategory("");
    setSelectedPreset("");
    setQuestion("");
    setSelectedCards([]);
    setRevealedCards([]);
    setReading("");
  };

  const renderStep = () => {
    switch (currentStep) {
      case "layout":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
              </p>
            </div>
            
            <div className="grid gap-4">
              <Card 
                className={`cursor-pointer transition-all ${
                  cardCount === 3 
                    ? "border-accent bg-accent/10" 
                    : "border-border bg-card/50"
                }`}
                onClick={() => setCardCount(3)}
              >
                <CardContent className="p-6 text-center">
                  <h3 className="text-xl font-connie text-white mb-2">–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã</h3>
                  <p className="text-sm text-[var(--foreground-secondary)]">
                    –ü—Ä–æ—à–ª–æ–µ ‚Ä¢ –ù–∞—Å—Ç–æ—è—â–µ–µ ‚Ä¢ –ë—É–¥—É—â–µ–µ
                  </p>
                </CardContent>
              </Card>

              <Card 
                className={`cursor-pointer transition-all ${
                  cardCount === 5 
                    ? "border-accent bg-accent/10" 
                    : "border-border bg-card/50"
                }`}
                onClick={() => setCardCount(5)}
              >
                <CardContent className="p-6 text-center">
                  <h3 className="text-xl font-connie text-white mb-2">–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 5 –∫–∞—Ä—Ç</h3>
                  <p className="text-sm text-[var(--foreground-secondary)]">
                    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
                  </p>
                </CardContent>
              </Card>
            </div>

            <div className="flex justify-center gap-2 mt-8">
              {Array.from({ length: cardCount }).map((_, i) => (
                <div
                  key={i}
                  className="w-16 h-24 bg-gradient-to-b from-purple-600 to-blue-600 rounded-lg border-2 border-accent/30 flex items-center justify-center"
                >
                  <Sparkles className="text-white/80 h-6 w-6" />
                </div>
              ))}
            </div>
          </div>
        );

      case "category":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?
              </p>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              {categories.map((category) => (
                <Card
                  key={category.id}
                  className={`cursor-pointer transition-all ${
                    selectedCategory === category.id
                      ? "border-accent bg-accent/10"
                      : "border-border bg-card/50"
                  }`}
                  onClick={() => setSelectedCategory(category.id)}
                >
                  <CardContent className="p-4 text-center">
                    <div className="text-2xl mb-2">{category.icon}</div>
                    <p className="text-white font-medium">{category.name}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "preset":
        const presets = getPresetsForCategory();
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –≤–∞–º –Ω—É–∂–µ–Ω?
              </p>
            </div>
            
            <div className="space-y-3">
              {presets.map((preset) => (
                <Card
                  key={preset.id}
                  className={`cursor-pointer transition-all ${
                    selectedPreset === preset.id
                      ? "border-accent bg-accent/20 shadow-[0_0_20px_rgba(168,85,247,0.4)] border-2"
                      : "border-border bg-card/50 hover:border-accent/50 hover:shadow-[0_0_10px_rgba(168,85,247,0.2)]"
                  }`}
                  onClick={() => setSelectedPreset(preset.id)}
                  style={selectedPreset === preset.id ? {
                    boxShadow: '0 0 25px rgba(168, 85, 247, 0.5), inset 0 0 15px rgba(168, 85, 247, 0.1)'
                  } : {}}
                >
                  <CardContent className="p-4">
                   <h3 className="font-medium mb-2 text-white">
                     {preset.name}
                   </h3>
                   <div className="text-sm text-white/80">
                     <p className="mb-1">
                       {cardCount === 3 ? "3 –∫–∞—Ä—Ç—ã:" : "5 –∫–∞—Ä—Ç:"}
                     </p>
                     <p className="italic">
                       {cardCount === 3 
                         ? preset.cards3.join(" ‚Ä¢ ") 
                         : preset.cards5.join(" ‚Ä¢ ")
                       }
                     </p>
                   </div>
                 </CardContent>
               </Card>
             ))}
           </div>
         </div>
       );

     case "question":
       return (
         <div className="space-y-6">
           <div className="text-center space-y-4">
             <h2 className="text-2xl font-connie text-white">–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é</h2>
             <p className="text-[var(--foreground-secondary)] font-cormorant">
               –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–∞—Å–∫–ª–∞–¥
             </p>
           </div>
           
           <Textarea
             placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
             value={question}
             onChange={(e) => setQuestion(e.target.value)}
             className="min-h-32 bg-card/50 border-border resize-none"
           />
         </div>
       );

     case "cards":
       return (
         <div className="space-y-6">
           <div className="text-center space-y-4">
             <h2 className="text-2xl font-connie text-white">–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –∫–∞—Ä—Ç—ã</h2>
             <p className="text-[var(--foreground-secondary)] font-cormorant">
               {cardCount === 3 
                 ? "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: 1 ‚Üí 2 ‚Üí 3"
                 : "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: 3 ‚Üí 1 ‚Üí 5 ‚Üí 2 ‚Üí 4"
               }
             </p>
           </div>
           <div className="flex justify-center items-center">
             {cardCount === 3 ? (
               // –†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ 1-2-3
               <div className="flex gap-4">
                 {selectedCards.map((cardId, index) => (
                   <div key={index} className="text-center">
                     <div
                       className={`w-20 h-32 rounded-lg border-2 cursor-pointer transition-all ${
                         revealedCards.includes(index)
                           ? "bg-white border-accent"
                           : revealedCards.length === index
                           ? "bg-gradient-to-b from-amber-500 to-orange-600 border-amber-400 animate-pulse shadow-lg"
                           : "bg-gradient-to-b from-purple-600 to-blue-600 border-accent/30 hover:border-accent opacity-60"
                       }`}
                       onClick={() => revealCard(index)}
                     >
                       {revealedCards.includes(index) ? (
                         <div className="h-full flex flex-col items-center justify-center p-2">
                           <Eye className="h-6 w-6 text-purple-600 mb-1" />
                           <span className="text-xs text-purple-600 font-medium">
                             –ö–∞—Ä—Ç–∞ {index + 1}
                           </span>
                         </div>
                       ) : (
                         <div className="h-full flex flex-col items-center justify-center">
                           <Sparkles className="text-white/80 h-6 w-6" />
                           <span className="text-white/60 text-xs mt-1">{index + 1}</span>
                         </div>
                       )}
                     </div>
                     <p className="text-xs text-[var(--foreground-secondary)] mt-2">
                       {index + 1}
                     </p>
                   </div>
                 ))}
               </div>
             ) : (
               // –†–∞—Å–∫–ª–∞–¥ –Ω–∞ 5 –∫–∞—Ä—Ç: –∫—Ä–µ—Å—Ç–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
               <div className="relative w-80 h-80 flex items-center justify-center">
                 {selectedCards.map((cardId, index) => {
                   // –ü–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó: 3 —Å–≤–µ—Ä—Ö—É, 1-5-2 –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, 4 —Å–Ω–∏–∑—É
                   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–ù–ö–¢–ê 23: –ù–æ–≤–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç
                   const positions = [
                     { top: '35%', left: '5%' },   // –ö–∞—Ä—Ç–∞ 1 (—Å–ª–µ–≤–∞)
                     { top: '35%', right: '5%' },  // –ö–∞—Ä—Ç–∞ 2 (—Å–ø—Ä–∞–≤–∞)
                     { top: '0%', left: '50%', transform: 'translateX(-50%)' }, // –ö–∞—Ä—Ç–∞ 3 (—Å–≤–µ—Ä—Ö—É)
                     { bottom: '0%', left: '50%', transform: 'translateX(-50%)' }, // –ö–∞—Ä—Ç–∞ 4 (—Å–Ω–∏–∑—É)
                     { top: '35%', left: '50%', transform: 'translateX(-50%)' }, // –ö–∞—Ä—Ç–∞ 5 (—Ü–µ–Ω—Ç—Ä)
                   ];
                   
                   return (
                     <div 
                       key={index} 
                       className="absolute text-center"
                       style={positions[index]}
                     >
                       <div
                         className={`w-16 h-24 rounded-lg border-2 cursor-pointer transition-all ${
                           revealedCards.includes(index)
                             ? "bg-white border-accent"
                             : (() => {
                                 // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–ù–ö–¢–ê 23: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è 5 –∫–∞—Ä—Ç  
                                 const expectedOrder = Number(cardCount) === 3 ? [0, 1, 2] : [2, 0, 4, 1, 3];
                                 const nextCardIndex = expectedOrder[revealedCards.length];
                                 return index === nextCardIndex
                                   ? "bg-gradient-to-b from-amber-500 to-orange-600 border-amber-400 animate-pulse shadow-lg"
                                   : "bg-gradient-to-b from-purple-600 to-blue-600 border-accent/30 hover:border-accent opacity-60";
                               })()
                         }`}
                         onClick={() => revealCard(index)}
                       >
                         {revealedCards.includes(index) ? (
                           <div className="h-full flex flex-col items-center justify-center p-1">
                             <Eye className="h-4 w-4 text-purple-600 mb-1" />
                             <span className="text-xs text-purple-600 font-medium">
                               {index + 1}
                             </span>
                           </div>
                         ) : (
                           <div className="h-full flex flex-col items-center justify-center">
                             <Sparkles className="text-white/80 h-5 w-5" />
                             <span className="text-white/60 text-xs mt-1">{index + 1}</span>
                           </div>
                         )}
                       </div>
                     </div>
                   );
                 })}
               </div>
             )}
           </div>
          
          {revealedCards.length === cardCount && (
            <div className="text-center">
              <p className="text-accent font-medium mb-4">
                ‚ú® –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã! –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ?
              </p>
            </div>
          )}
        </div>
      );

    case "reading":
      return (
        <div className="space-y-6">
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-connie text-white">–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤</h2>
            <div className="flex justify-center gap-4">
              {selectedCards.map((cardId, index) => (
                <div key={index} className="w-20 h-32 bg-white rounded-lg border-2 border-accent flex items-center justify-center shadow-lg">
                  <span className="text-sm text-purple-600 font-medium">–ö–∞—Ä—Ç–∞ {index + 1}</span>
                </div>
              ))}
            </div>
          </div>
          
          <Card className="bg-card/50 border-border">
            <CardContent className="p-6">
              <TarotText text={reading} />
            </CardContent>
          </Card>
        </div>
      );

    default:
      return null;
  }
};

return (
  <MainLayout title="–ö–∞—Ä—Ç—ã" activeTab="tarot">
    <div className="space-y-6 mb-20 px-4">
      {currentStep !== "reading" && (
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-2">
            {["layout", "category", "preset", "question", "cards"].map((step, index) => (
              <div
                key={step}
                className={`w-3 h-3 rounded-full transition-all ${
                  ["layout", "category", "preset", "question", "cards"].indexOf(currentStep) >= index
                    ? "bg-accent"
                    : "bg-border"
                }`}
              />
            ))}
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={resetReading}
            className="text-[var(--foreground-secondary)] hover:text-white"
          >
            <RotateCcw className="h-4 w-4 mr-1" />
            –°–Ω–∞—á–∞–ª–∞
          </Button>
        </div>
      )}

      {renderStep()}

      <div className="flex gap-4 pt-6">
        {currentStep !== "layout" && currentStep !== "reading" && (
          <Button
            variant="outline"
            onClick={() => {
              const steps: Step[] = ["layout", "category", "preset", "question", "cards"];
              const currentIndex = steps.indexOf(currentStep);
              if (currentIndex > 0) {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–ù–ö–¢–ê 21: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
                if (currentStep === "cards") {
                  setSelectedCards([]);
                  setRevealedCards([]);
                }
                setCurrentStep(steps[currentIndex - 1]);
              }
            }}
            className="flex-1"
          >
            –ù–∞–∑–∞–¥
          </Button>
        )}
        
        {currentStep !== "reading" && (
          <Button
            onClick={nextStep}
            disabled={
              (currentStep === "cards" && revealedCards.length < cardCount) ||
              generateReading.isPending
            }
            className="flex-1 bg-gradient-to-r from-purple-600 via-blue-600 to-purple-700 hover:from-purple-700 hover:via-blue-700 hover:to-purple-800 text-white font-connie text-lg py-6 rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] hover:shadow-[0_0_30px_rgba(168,85,247,0.6)] transition-all duration-300 transform hover:scale-[1.02] border border-purple-400/30"
          >
            <div className="flex items-center justify-center gap-2">
              <Sparkles className="h-5 w-5" />
              <span>
                {currentStep === "cards" 
                  ? generateReading.isPending 
                    ? "–°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥..." 
                    : "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"
                  : currentStep === "layout"
                  ? "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                  : "–î–∞–ª–µ–µ"
                }
              </span>
              <Sparkles className="h-5 w-5" />
            </div>
          </Button>
        )}
        
        {currentStep === "reading" && (
          <Button
            onClick={resetReading}
            className="flex-1 bg-gradient-to-r from-purple-600 via-blue-600 to-purple-700 hover:from-purple-700 hover:via-blue-700 hover:to-purple-800 text-white font-connie text-lg py-6 rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] hover:shadow-[0_0_30px_rgba(168,85,247,0.6)] transition-all duration-300 transform hover:scale-[1.02] border border-purple-400/30"
          >
            <div className="flex items-center justify-center gap-2">
              <RotateCcw className="h-5 w-5" />
              <span>–ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥</span>
              <Sparkles className="h-5 w-5" />
            </div>
          </Button>
        )}
      </div>
    </div>
  </MainLayout>
);
}