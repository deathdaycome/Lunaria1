import { useState, useEffect } from "react";
import { useMutation } from "@tanstack/react-query";
import MainLayout from "@/components/layout/main-layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { Sparkles, RotateCcw } from "lucide-react";
import TarotCard, { getRandomTarotCard, extractCardNamesFromText } from "../components/TarotCard";


// ‚úÖ –ö–û–ú–ü–û–ù–ï–ù–¢ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ê–°–ö–õ–ê–î–ê –° –ö–†–ê–°–ò–í–´–ú–ò –ü–û–î–ó–ê–ì–û–õ–û–í–ö–ê–ú–ò
const TarotReading = ({ reading }: { reading: Array<{title: string, content: string}> }) => {
  console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TarotReading ===");
  console.log("üîç –ü–æ–ª—É—á–µ–Ω reading:", reading);
  
  if (!reading || !Array.isArray(reading) || reading.length === 0) {
    return (
      <div className="text-center py-8 text-white/60">
        <p>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h3 className="text-2xl font-connie text-amber-400 mb-2 flex items-center justify-center">
          <span className="mr-3">üîÆ</span>
          –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
          <span className="ml-3">üîÆ</span>
        </h3>
        <div className="w-32 h-px bg-gradient-to-r from-transparent via-amber-400 to-transparent mx-auto"></div>
      </div>

      {/* –†–∞–∑–¥–µ–ª—ã —Ä–∞—Å–∫–ª–∞–¥–∞ */}
      <div className="space-y-6">
        {reading.map((section, index) => (
          <div key={index} className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 rounded-2xl p-6 border border-purple-400/20 backdrop-blur-sm">
            {/* –Ø—Ä–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <h4 className="text-xl font-connie text-amber-300 mb-4 flex items-center">
              <span className="mr-2">‚ú®</span>
              {section.title}
              <span className="ml-2">‚ú®</span>
            </h4>
            
            {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏ */}
            <div className="text-white leading-relaxed font-cormorant text-base">
              {section.content.split('\n\n').map((paragraph, pIndex) => (
                <p key={pIndex} className="mb-3 last:mb-0">
                  {paragraph}
                </p>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// ‚ú® –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ï–°–ï–¢–´ –ò–ó OPENAI.TS
const TAROT_PRESETS: Record<string, Array<{
  id: string;
  name: string;
  cards3: string[];
  cards5: string[];
}>> = {
  "love": [
    {
      id: "love-1",
      name: "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
      cards3: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
      cards5: ["–ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", "–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ –ø–æ–ª—É—á–∞—é", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "love-2", 
      name: "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      cards3: ["–ú–æ–∏ —á—É–≤—Å—Ç–≤–∞", "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–°–æ–≤–µ—Ç"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–í–∑–≥–ª—è–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–í–∑–≥–ª—è–¥ –º–µ–Ω—è", "–°–æ–≤–µ—Ç", "–ë—É–¥—É—â–µ–µ"]
    },
    {
      id: "love-3",
      name: "–û–∂–∏–¥–∞–Ω–∏—è vs –†–µ–∞–ª—å–Ω–æ—Å—Ç—å",
      cards3: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ò—Ç–æ–≥"],
      cards5: ["–ú–æ–∏ —ç–º–æ—Ü–∏–∏", "–≠–º–æ—Ü–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–ß—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ò—Ç–æ–≥"]
    },
    {
      id: "love-4",
      name: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–°–æ–≤–µ—Ç"],
      cards5: ["–õ—é–±–æ–≤—å —Å–µ–π—á–∞—Å", "–ß—Ç–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ß—Ç–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß–µ–≥–æ –±–æ—é—Å—å", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"]
    },
    {
      id: "love-5",
      name: "–í–∑–∞–∏–º–Ω—ã–π –æ–±–º–µ–Ω",
      cards3: ["–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ —è –ø–æ–ª—É—á–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ù–∞—á–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π", "–ò—Ö —Ä–∞–∑–≤–∏—Ç–∏–µ", "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ß—Ç–æ —Å–∫—Ä—ã—Ç–æ", "–°–æ–≤–µ—Ç"]
    }
  ],
  "career": [
    {
      id: "career-1",
      name: "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
      cards3: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ –∫–∞—Ä—å–µ—Ä—ã"],
      cards5: ["–¶–µ–ª—å", "–†–µ—Å—É—Ä—Å—ã", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–î–µ–π—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "career-2",
      name: "–°–∏–ª—ã –∏ —Å–ª–∞–±–Ω–æ—Å—Ç–∏",
      cards3: ["–ú–æ–∏ —Å–∏–ª—ã", "–ú–æ–∏ —Å–ª–∞–±–Ω–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞"],
      cards5: ["–ú–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "career-3",
      name: "–¶–µ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
      cards3: ["–ú–æ–∏ —Ü–µ–ª–∏", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
      cards5: ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ß—Ç–æ —è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å", "–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"]
    },
    {
      id: "career-4",
      name: "–í–∑–≥–ª—è–¥ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      cards3: ["–°–∏—Ç—É–∞—Ü–∏—è —Å–µ–π—á–∞—Å", "–ö–∞–∫ –º–µ–Ω—è –≤–∏–¥—è—Ç –∫–æ–ª–ª–µ–≥–∏/—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–í–ª–∏—è–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã"],
      cards5: ["–ú–æ–∏ —Ü–µ–ª–∏", "–ü–ª–∞–Ω—ã", "–í—ã–∑–æ–≤—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ò—Ç–æ–≥"]
    },
    {
      id: "career-5",
      name: "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥",
      cards3: ["–ß—Ç–æ —è –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç –º–µ–Ω—è", "–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥"],
      cards5: ["–ö–ª—é—á–µ–≤–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è", "–õ–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–í–Ω–µ—à–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–†–∏—Å–∫–∏", "–°–æ–≤–µ—Ç –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"]
    }
  ],
  "spirituality": [
    {
      id: "spirituality-1",
      name: "–î—É—Ö–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ –¥—É—Ö–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í—ã–∑–æ–≤", "–°–æ–≤–µ—Ç"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ò—Å—Ç–æ–∫–∏", "–í—ã–∑–æ–≤—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—É—Ç—å"]
    },
    {
      id: "spirituality-2",
      name: "–û—Å–æ–∑–Ω–∞–Ω–∏–µ",
      cards3: ["–ß—Ç–æ —è –æ—Å–æ–∑–Ω–∞—é", "–ß—Ç–æ —Å–∫—Ä—ã—Ç–æ", "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å"],
      cards5: ["–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—á–∏—Ç–µ–ª—å", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "spirituality-3",
      name: "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä",
      cards3: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä", "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è", "–ü—É—Ç—å –≤–ø–µ—Ä–µ–¥"],
      cards5: ["–ú–æ–∏ —Å–æ–º–Ω–µ–Ω–∏—è", "–ú–æ—è –≤–µ—Ä–∞", "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç –º–µ–Ω—è", "–ß—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç", "–ò—Ç–æ–≥ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏"]
    },
    {
      id: "spirituality-4",
      name: "–ë–∞–ª–∞–Ω—Å",
      cards3: ["–ß—Ç–æ –º–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ü—É—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É"],
      cards5: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç", "–ü—Ä–∏—á–∏–Ω–∞", "–ü—É—Ç—å –∏—Å—Ü–µ–ª–µ–Ω–∏—è", "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏"]
    },
    {
      id: "spirituality-5",
      name: "–î—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å",
      cards3: ["–ß—Ç–æ —è –º–æ–≥—É –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß—Ç–æ –º–Ω–µ –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è"],
      cards5: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ", "–£—Ä–æ–∫", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"]
    }
  ],
  "money": [
    {
      id: "finances-1",
      name: "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–°–æ–≤–µ—Ç"],
      cards5: ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", "–û–±–ª–∞—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "finances-2",
      name: "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã",
      cards3: ["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"],
      cards5: ["–ú–æ–∏ —Ä–µ—Å—É—Ä—Å—ã", "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–†–∏—Å–∫–∏", "–ù–æ–≤—ã–π –ø—É—Ç—å", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]
    },
    {
      id: "finances-3",
      name: "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
      cards3: ["–ß—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–¶–µ–ª–∏", "–ü–ª–∞–Ω—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "finances-4",
      name: "–†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
      cards3: ["–†–∏—Å–∫–∏", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–î–µ–π—Å—Ç–≤–∏—è"],
      cards5: ["–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ë—É–¥—É—â–µ–µ", "–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "finances-5",
      name: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
      cards3: ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç"],
      cards5: ["–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–£–≥—Ä–æ–∑—ã", "–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"]
    }
  ],
  "health": [
    {
      id: "health-1",
      name: "–ó–¥–æ—Ä–æ–≤—å–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "–°–æ–≤–µ—Ç"],
      cards5: ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã", "–°–æ–≤–µ—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"]
    },
    {
      id: "health-2",
      name: "–¢–µ–ª–æ-–≠–º–æ—Ü–∏–∏-–î—É—Ö",
      cards3: ["–¢–µ–ª–æ", "–≠–º–æ—Ü–∏–∏", "–î—É—Ö"],
      cards5: ["–°–∏–º–ø—Ç–æ–º", "–ü—Ä–∏—á–∏–Ω–∞", "–ß—Ç–æ —è –¥–µ–ª–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "–ò—Ç–æ–≥"]
    },
    {
      id: "health-3",
      name: "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç",
      cards3: ["–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ú–æ–π —Ä–µ—Å—É—Ä—Å", "–ß—Ç–æ –∏—Å—Ç–æ—â–∞–µ—Ç", "–ü–æ–º–æ—â—å –∏–∑–≤–Ω–µ", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∞—Ä—å–µ—Ä—ã", "–ü—É—Ç—å –∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—é"]
    },
    {
      id: "health-4",
      name: "–ü—Ä–∏—á–∏–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤", "–¢–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–ß—Ç–æ –≤–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ò—Ç–æ–≥ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è"]
    },
    {
      id: "health-5",
      name: "–≠–Ω–µ—Ä–≥–∏—è –∏ —Å—Ç—Ä–µ—Å—Å",
      cards3: ["–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞", "–°–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"],
      cards5: ["–¢–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è", "–≠–º–æ—Ü–∏–∏", "–ú—ã—à–ª–µ–Ω–∏–µ", "–í–Ω–µ—à–Ω–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ", "–°–æ–≤–µ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É"]
    }
  ],
  "friendship": [
    {
      id: "friendship-1",
      name: "–Ø –∏ –¥—Ä—É–≥",
      cards3: ["–Ø", "–î—Ä—É–≥", "–°—É—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π"],
      cards5: ["–Ø", "–î—Ä—É–≥", "–ù–∞—à–∏ –æ–±—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "–í—ã–∑–æ–≤—ã", "–ò—Ç–æ–≥"]
    },
    {
      id: "friendship-2",
      name: "–í–∑–∞–∏–º–Ω—ã–π –æ–±–º–µ–Ω",
      cards3: ["–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ –ø–æ–ª—É—á–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–æ–≤–µ—Ç—ã", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"]
    },
    {
      id: "friendship-3",
      name: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –¥—Ä—É–∂–±–µ",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–°–æ–≤–µ—Ç"],
      cards5: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–û–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–∞", "–ß—Ç–æ –Ω–∞—Å —Å–æ–µ–¥–∏–Ω—è–µ—Ç", "–ß—Ç–æ –Ω–∞—Å —Ä–∞–∑–¥–µ–ª—è–µ—Ç", "–ò—Ç–æ–≥"]
    },
    {
      id: "friendship-4",
      name: "–û–∂–∏–¥–∞–Ω–∏—è",
      cards3: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ò—Ç–æ–≥"],
      cards5: ["–ò—Å—Ç–æ–∫–∏ –¥—Ä—É–∂–±—ã", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "friendship-5",
      name: "–ë—É–¥—É—â–µ–µ –¥—Ä—É–∂–±—ã",
      cards3: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–ë—É–¥—É—â–µ–µ –¥—Ä—É–∂–±—ã"],
      cards5: ["–Ø", "–î—Ä—É–≥", "–ù–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–∞", "–ë–∞—Ä—å–µ—Ä—ã", "–ö–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥"]
    }
  ]
};

// ‚ú® –ö–ê–¢–ï–ì–û–†–ò–ò –î–õ–Ø –í–´–ë–û–†–ê –¢–ï–ú–´
const categories = [
  { id: "love", name: "–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", icon: "üíù" },
  { id: "career", name: "–ö–∞—Ä—å–µ—Ä–∞", icon: "üíº" },
  { id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "üåø" },
  { id: "money", name: "–§–∏–Ω–∞–Ω—Å—ã", icon: "üí∞" },
  { id: "spirituality", name: "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å", icon: "‚ú®" },
  { id: "friendship", name: "–î—Ä—É–∂–±–∞", icon: "ü§ù" },
];

type Step = "layout" | "category" | "preset" | "question" | "cards" | "reading";

export default function TarotPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  useEffect(() => {
    const detectPerformanceMode = () => {
      // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const isLowPerformance = 
        (navigator.hardwareConcurrency && navigator.hardwareConcurrency < 6) ||
        ((navigator as any).deviceMemory && (navigator as any).deviceMemory < 6) ||
        window.innerWidth < 768 ||
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        ('ontouchstart' in window) ||
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ FPS
        performance.now() < 16.67; // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ
      
      console.log('üîç Performance detection:', {
        hardwareConcurrency: navigator.hardwareConcurrency,
        deviceMemory: (navigator as any).deviceMemory,
        windowWidth: window.innerWidth,
        isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
        isTouchDevice: 'ontouchstart' in window,
        isLowPerformance
      });
      
      if (isLowPerformance) {
        document.body.classList.add('low-performance-mode');
        console.log('‚úÖ Low performance mode activated');
      } else {
        console.log('‚ÑπÔ∏è Normal performance mode');
      }
    };
    
    detectPerformanceMode();
  }, []);
  
  const [currentStep, setCurrentStep] = useState<Step>("layout");
  const [cardCount, setCardCount] = useState<3 | 5>(3);
  const [selectedCategory, setSelectedCategory] = useState<string>("");
  const [selectedPreset, setSelectedPreset] = useState<string>("");
  const [question, setQuestion] = useState<string>("");
  const [selectedCards, setSelectedCards] = useState<number[]>([]);
  const [revealedCards, setRevealedCards] = useState<number[]>([]);
  
  // ‚úÖ –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û–¢ API
  const [readingData, setReadingData] = useState<Array<{title: string, content: string}>>([]);
  const [cardNames, setCardNames] = useState<string[]>([]);

  // ‚ú® –ü–û–õ–£–ß–ê–ï–ú –ü–†–ï–°–ï–¢–´ –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò
  const getPresetsForCategory = () => {
    return TAROT_PRESETS[selectedCategory] || TAROT_PRESETS["love"];
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ú–£–¢–ê–¶–ò–Ø –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –†–ê–°–ö–õ–ê–î–ê
  const generateReading = useMutation({
    mutationFn: async () => {
      console.log("üîç Sending tarot request:", {
        question,
        cardCount,
        category: selectedCategory,
        preset: selectedPreset,
        selectedCardNames: cardNames,
      });

      const response = await fetch("/api/tarot", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          question: question.trim(),
          cardCount: cardCount,
          category: selectedCategory,
          preset: selectedPreset,
          selectedCardNames: cardNames, // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –í–´–ë–†–ê–ù–ù–´–ï –ö–ê–†–¢–´
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        console.error("‚ùå Tarot API error:", error);
        throw new Error(error.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞");
      }

      const data = await response.json();
      console.log("‚úÖ –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç API:", JSON.stringify(data, null, 2));
      
      // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê API
      if (data.reading && Array.isArray(data.reading)) {
        console.log("‚úÖ Reading is array with", data.reading.length, "sections");
        setReadingData(data.reading);
        
        // ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–Ø –ö–ê–†–¢ –ò–ó –ó–ê–ì–û–õ–û–í–ö–û–í –†–ê–ó–î–ï–õ–û–í –ò –ö–û–ù–¢–ï–ù–¢–ê
        let extractedCardNames: string[] = [];
        
        // –ú–µ—Ç–æ–¥ 1: –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π (—Ñ–æ—Ä–º–∞—Ç "–ü—Ä–æ—à–ª–æ–µ - –î—É—Ä–∞–∫")
        const cardNamesFromTitles = data.reading
          .slice(0, cardCount)
          .map((section: any) => {
            const match = section.title.match(/- (.+)$/);
            return match ? match[1] : null;
          })
          .filter(Boolean);
        
        // –ú–µ—Ç–æ–¥ 2: –ò–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        const fullText = data.reading.map((section: any) => section.content).join('\n');
        const cardNamesFromContent = extractCardNamesFromText(fullText, cardCount);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        extractedCardNames = cardNamesFromTitles.length >= cardCount 
          ? cardNamesFromTitles.slice(0, cardCount)
          : cardNamesFromContent.slice(0, cardCount);
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
        while (extractedCardNames.length < cardCount) {
          extractedCardNames.push(getRandomTarotCard());
        }
        
        setCardNames(extractedCardNames);
        console.log("‚úÖ Extracted card names:", extractedCardNames);
      } else {
        console.error("‚ùå Invalid reading structure:", data);
        throw new Error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–∫–ª–∞–¥–∞");
      }
      
      return data;
    },
    onSuccess: (data) => {
      console.log("‚úÖ Tarot reading received and processed");
      setCurrentStep("reading");
      toast({
        title: "–†–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤",
        description: "–ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ —Å–≤–æ–∏ —Ç–∞–π–Ω—ã",
      });
    },
    onError: (error: Error) => {
      console.error("‚ùå Tarot generation error:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const nextStep = () => {
    switch (currentStep) {
      case "layout":
        setCurrentStep("category");
        break;
      case "category":
        if (!selectedCategory) {
          toast({
            title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É",
            description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞",
            variant: "destructive",
          });
          return;
        }
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setSelectedCards([]);
        setRevealedCards([]);
        setCardNames([]);
        setReadingData([]);
        setCurrentStep("preset");
        break;
      case "preset":
        if (!selectedPreset) {
          toast({
            title: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç",
            description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∞",
            variant: "destructive",
          });
          return;
        }
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–µ—Å–µ—Ç–∞
        setSelectedCards([]);
        setRevealedCards([]);
        setCardNames([]);
        setReadingData([]);
        setCurrentStep("question");
        break;
      case "question":
        if (!question.trim()) {
          toast({
            title: "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é",
            description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é",
            variant: "destructive",
          });
          return;
        }
        // ‚úÖ –ì–ï–ù–ï–†–ò–†–£–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø –ö–ê–†–¢ –ù–ê –§–†–û–ù–¢–ï–ù–î–ï
        const randomCards = Array.from({ length: cardCount }, () => 
          Math.floor(Math.random() * 78) + 1
        );
        const finalCardNames = Array.from({ length: cardCount }, () => getRandomTarotCard());
        setSelectedCards(randomCards);
        setCardNames(finalCardNames); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        setCurrentStep("cards");
        break;
      case "cards":
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
        if (revealedCards.length !== cardCount) {
          console.log(`‚ùå Cards validation failed: revealed ${revealedCards.length}, expected ${cardCount}`);
          toast({
            title: "–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã",
            description: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ ${cardCount} –∫–∞—Ä—Ç –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è`,
            variant: "destructive",
          });
          return;
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        if (selectedCards.length !== cardCount) {
          console.log(`‚ùå Selected cards validation failed: selected ${selectedCards.length}, expected ${cardCount}`);
          toast({
            title: "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç",
            description: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç (${selectedCards.length}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–º—É (${cardCount})`,
            variant: "destructive",
          });
          return;
        }
        
        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –í–°–ï –ù–ï–û–ë–•–û–î–ò–ú–´–ï –î–ê–ù–ù–´–ï –ó–ê–ü–û–õ–ù–ï–ù–´
        if (!selectedCategory || !selectedPreset || !question.trim()) {
          toast({
            title: "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            description: "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä–µ—Å–µ—Ç –∏ –æ–ø–∏—Å–∞–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è",
            variant: "destructive",
          });
          return;
        }
        
        console.log(`‚úÖ Validation passed: ${cardCount} cards selected and revealed`);
        console.log(`‚úÖ Request data: category=${selectedCategory}, preset=${selectedPreset}, question length=${question.length}`);
        
        generateReading.mutate();
        break;
      default:
        break;
    }
  };

  const revealCard = (index: number) => {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
    let expectedOrder: number[];
    
    if (cardCount === 3) {
      // –î–ª—è 3 –∫–∞—Ä—Ç: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Ä—É–±–∞—à–∫–µ: 1 ‚Üí 2 ‚Üí 3
      expectedOrder = [0, 1, 2]; // –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ä—Ç: –ø–µ—Ä–≤–∞—è (0) ‚Üí –≤—Ç–æ—Ä–∞—è (1) ‚Üí —Ç—Ä–µ—Ç—å—è (2)
    } else {
      // –î–ª—è 5 –∫–∞—Ä—Ç: –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è 3 ‚Üí 1 ‚Üí 5 ‚Üí 2 ‚Üí 4
      // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –∫–∞—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º 3 (–∏–Ω–¥–µ–∫—Å 2) ‚Üí –∫–∞—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º 1 (–∏–Ω–¥–µ–∫—Å 0) ‚Üí –∏ —Ç.–¥.
      expectedOrder = [2, 0, 4, 1, 3]; // –∏–Ω–¥–µ–∫—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    const expectedNextCardIndex = expectedOrder[revealedCards.length];
    
    console.log(`üé¥ Card click: index ${index}, expected ${expectedNextCardIndex}, revealed count: ${revealedCards.length}`);
    
    if (index === expectedNextCardIndex && !revealedCards.includes(index)) {
      setRevealedCards([...revealedCards, index]);
      console.log(`‚úÖ Card ${index + 1} revealed correctly`);
    } else if (index !== expectedNextCardIndex) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–Ω–æ–º–µ—Ä –Ω–∞ —Ä—É–±–∞—à–∫–µ = –∏–Ω–¥–µ–∫—Å + 1)
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      let expectedCardNumber: number;
      if (cardCount === 3) {
        expectedCardNumber = expectedNextCardIndex + 1;
      } else {
        // –î–ª—è 5 –∫–∞—Ä—Ç: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ –Ω–æ–º–µ—Ä –Ω–∞ —Ä—É–±–∞—à–∫–µ
        expectedCardNumber = [2, 4, 1, 5, 3][expectedNextCardIndex];
      }
      toast({
        title: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫",
        description: `–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º ${expectedCardNumber}`,
        variant: "destructive",
      });
      console.log(`‚ùå Wrong card clicked. Expected card number: ${expectedCardNumber}`);
    } else if (revealedCards.includes(index)) {
      console.log(`‚ö†Ô∏è Card ${index + 1} already revealed`);
    }
  };

  const resetReading = () => {
    setCurrentStep("layout");
    setSelectedCategory("");
    setSelectedPreset("");
    setQuestion("");
    setSelectedCards([]);
    setRevealedCards([]);
    setReadingData([]);
    setCardNames([]);
  };

  const renderStep = () => {
    switch (currentStep) {
      case "layout":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
              </p>
            </div>
            
            <div className="grid gap-4">
              <Card 
                className={`cursor-pointer transition-all ${
                  cardCount === 3 
                    ? "border-accent bg-accent/10" 
                    : "border-border bg-card/50"
                }`}
                onClick={() => setCardCount(3)}
              >
                <CardContent className="p-6 text-center">
                  <h3 className="text-xl font-connie text-white mb-2">–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã</h3>
                  <p className="text-sm text-[var(--foreground-secondary)]">
                    –ü—Ä–æ—à–ª–æ–µ ‚Ä¢ –ù–∞—Å—Ç–æ—è—â–µ–µ ‚Ä¢ –ë—É–¥—É—â–µ–µ
                  </p>
                </CardContent>
              </Card>

              <Card 
                className={`cursor-pointer transition-all ${
                  cardCount === 5 
                    ? "border-accent bg-accent/10" 
                    : "border-border bg-card/50"
                }`}
                onClick={() => setCardCount(5)}
              >
                <CardContent className="p-6 text-center">
                  <h3 className="text-xl font-connie text-white mb-2">–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 5 –∫–∞—Ä—Ç</h3>
                  <p className="text-sm text-[var(--foreground-secondary)]">
                    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
                  </p>
                </CardContent>
              </Card>
            </div>

            <div className="flex justify-center gap-2 mt-8">
              {Array.from({ length: cardCount }).map((_, i) => (
                <div
                  key={i}
                  className="w-16 h-24 bg-gradient-to-b from-purple-600 to-blue-600 rounded-lg border-2 border-accent/30 flex items-center justify-center"
                >
                  <Sparkles className="text-white/80 h-6 w-6" />
                </div>
              ))}
            </div>
          </div>
        );

      case "category":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?
              </p>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              {categories.map((category) => (
                <Card
                  key={category.id}
                  className={`cursor-pointer transition-all ${
                    selectedCategory === category.id
                      ? "border-accent bg-accent/10"
                      : "border-border bg-card/50"
                  }`}
                  onClick={() => setSelectedCategory(category.id)}
                >
                  <CardContent className="p-4 text-center">
                    <div className="text-2xl mb-2">{category.icon}</div>
                    <p className="text-white font-medium">{category.name}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "preset":
        const presets = getPresetsForCategory();
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –≤–∞–º –Ω—É–∂–µ–Ω?
              </p>
            </div>
            
            <div className="space-y-3">
              {presets.map((preset) => (
                <Card
                  key={preset.id}
                  className={`cursor-pointer transition-all ${
                    selectedPreset === preset.id
                      ? "border-accent bg-accent/20 shadow-[0_0_20px_rgba(168,85,247,0.4)] border-2"
                      : "border-border bg-card/50 hover:border-accent/50 hover:shadow-[0_0_10px_rgba(168,85,247,0.2)]"
                  }`}
                  onClick={() => setSelectedPreset(preset.id)}
                  style={selectedPreset === preset.id ? {
                    boxShadow: '0 0 25px rgba(168, 85, 247, 0.5), inset 0 0 15px rgba(168, 85, 247, 0.1)'
                  } : {}}
                >
                  <CardContent className="p-4">
                    <h3 className="font-medium mb-2 text-white">
                      {preset.name}
                    </h3>
                    <div className="text-sm text-white/80">
                      <p className="mb-1">
                        {cardCount === 3 ? "3 –∫–∞—Ä—Ç—ã:" : "5 –∫–∞—Ä—Ç:"}
                      </p>
                      <p className="italic">
                        {cardCount === 3 
                          ? preset.cards3.join(" ‚Ä¢ ") 
                          : preset.cards5.join(" ‚Ä¢ ")
                        }
                      </p>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "question":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç
              </p>
            </div>
            
            <Textarea
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ..."
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="min-h-32 bg-background/50 border-border text-white placeholder:text-white/50 resize-none"
            />
          </div>
        );

      case "cards":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –∫–∞—Ä—Ç—ã</h2>
              <p className="text-[var(--foreground-secondary)] font-cormorant">
                {cardCount === 3 
                  ? "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: 1 ‚Üí 2 ‚Üí 3"
                  : "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: 1 ‚Üí 2 ‚Üí 3 ‚Üí 4 ‚Üí 5"
                }
              </p>
            </div>
            <div className="flex justify-center items-center min-h-[200px] w-full px-4">
              {cardCount === 3 ? (
                // –†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ 1-2-3
                <div className="tarot-cards-container flex gap-3 justify-center items-center w-full max-w-sm" data-card-count="3">
                  {selectedCards.map((cardId, index) => (
                    <div key={index} className="text-center flex-shrink-0">
                      <div
                        className={`w-16 h-24 rounded-lg border-2 cursor-pointer transition-all overflow-hidden ${
                          revealedCards.includes(index)
                            ? "border-accent"
                            : revealedCards.length === index
                            ? "bg-gradient-to-b from-amber-500 to-orange-600 border-amber-400 animate-pulse shadow-lg"
                            : "bg-gradient-to-b from-purple-600 to-blue-600 border-accent/30 hover:border-accent opacity-60"
                        }`}
                        onClick={() => revealCard(index)}
                      >
                        {revealedCards.includes(index) ? (
                          // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ö–ê–†–¢–£ –¢–ê–†–û
                          <TarotCard 
                            cardName={cardNames[index] || getRandomTarotCard()} 
                            width={64}
                            height={96}
                            showName={false}
                          />
                        ) : (
                          <div className="h-full flex flex-col items-center justify-center">
                            <Sparkles className="text-white/80 h-6 w-6" />
                            <span className="text-white/60 text-xs mt-1">{index + 1}</span>
                          </div>
                        )}
                      </div>
                      <p className="text-xs text-[var(--foreground-secondary)] mt-2">
                        {index + 1}
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                // –†–∞—Å–∫–ª–∞–¥ –Ω–∞ 5 –∫–∞—Ä—Ç: –∫—Ä–µ—Å—Ç–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
                <div 
                  className="tarot-cards-container relative w-80 h-80 flex items-center justify-center mx-auto"
                  data-card-count="5"
                >
                  {selectedCards.map((cardId, index) => {
                    // –ü–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó: 3 —Å–≤–µ—Ä—Ö—É, 1-5-2 –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, 4 —Å–Ω–∏–∑—É
                    const positions = [
                      { top: '50%', left: '5px', transform: 'translateY(-50%)' },   // –ö–∞—Ä—Ç–∞ 1 (—Å–ª–µ–≤–∞)
                      { top: '50%', right: '5px', transform: 'translateY(-50%)' },  // –ö–∞—Ä—Ç–∞ 2 (—Å–ø—Ä–∞–≤–∞)  
                      { top: '5px', left: '50%', transform: 'translateX(-50%)' },   // –ö–∞—Ä—Ç–∞ 3 (—Å–≤–µ—Ä—Ö—É)
                      { bottom: '5px', left: '50%', transform: 'translateX(-50%)' }, // –ö–∞—Ä—Ç–∞ 4 (—Å–Ω–∏–∑—É)
                      { top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }, // –ö–∞—Ä—Ç–∞ 5 (—Ü–µ–Ω—Ç—Ä)
                    ];
                    
                    return (
                      <div 
                        key={index} 
                        className="absolute text-center"
                        style={positions[index]}
                      >
                        <div
                          className={`w-14 h-20 rounded-lg border-2 cursor-pointer transition-all overflow-hidden ${
                            revealedCards.includes(index)
                              ? "border-accent"
                              : (() => {
                                  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è 5 –∫–∞—Ä—Ç  
                                  const expectedOrder = cardCount === 3 ? [0, 1, 2] : [2, 0, 4, 1, 3];
                                  const nextCardIndex = expectedOrder[revealedCards.length];
                                  return index === nextCardIndex
                                    ? "bg-gradient-to-b from-amber-500 to-orange-600 border-amber-400 animate-pulse shadow-lg"
                                    : "bg-gradient-to-b from-purple-600 to-blue-600 border-accent/30 hover:border-accent opacity-60";
                                })()
                          }`}
                          onClick={() => revealCard(index)}
                        >
                          {revealedCards.includes(index) ? (
                            // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ö–ê–†–¢–£ –¢–ê–†–û
                            <TarotCard 
                              cardName={cardNames[index] || getRandomTarotCard()} 
                              width={56}
                              height={80}
                              showName={false}
                            />
                          ) : (
                            <div className="h-full flex flex-col items-center justify-center">
                              <Sparkles className="text-white/80 h-4 w-4" />
                              <span className="text-white/60 text-xs mt-1">
                                {[2, 4, 1, 5, 3][index]}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
           
            {revealedCards.length === cardCount && (
              <div className="text-center">
                <p className="text-accent font-medium mb-4">
                  ‚ú® –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã! –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ?
                </p>
              </div>
            )}
          </div>
        );

      case "reading":
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <h2 className="text-2xl font-connie text-white">–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤</h2>
              {/* ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –ö–ê–†–¢–´ –û–¢ API */}
              {cardNames.length > 0 && (
                <div className="flex justify-center gap-4 items-end">
                  {cardNames.map((cardName, index) => (
                    <div key={index} className="flex-shrink-0">
                      <TarotCard 
                        cardName={cardName}
                        width={80}
                        height={128}
                        showName={true}
                      />
                    </div>
                  ))}
                </div>
              )}
              {/* ‚úÖ FALLBACK: –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç –æ—Ç API */}
              {cardNames.length === 0 && (
                <div className="text-amber-400 text-sm">
                  –ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
                </div>
              )}
            </div>
            
            <Card className="bg-card/50 border-border">
              <CardContent className="p-6">
                {/* ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø */}
                <TarotReading reading={readingData} />
              </CardContent>
            </Card>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <MainLayout title="–ö–∞—Ä—Ç—ã" showHeader={false} activeTab="tarot">
      {/* ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º */}
      <div className="min-h-screen overflow-y-auto pb-32">
        <div className="container mx-auto px-4 space-y-6 max-w-4xl" style={{ paddingTop: 'max(120px, env(safe-area-inset-top, 120px))', paddingBottom: '24px' }}>
          {currentStep !== "reading" && (
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-2">
                {["layout", "category", "preset", "question", "cards"].map((step, index) => (
                  <div
                    key={step}
                    className={`w-3 h-3 rounded-full transition-all ${
                      ["layout", "category", "preset", "question", "cards"].indexOf(currentStep) >= index
                        ? "bg-accent"
                        : "bg-border"
                    }`}
                  />
                ))}
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={resetReading}
                className="text-[var(--foreground-secondary)] hover:text-white"
              >
                <RotateCcw className="h-4 w-4 mr-1" />
                –°–Ω–∞—á–∞–ª–∞
              </Button>
            </div>
          )}

          {renderStep()}

          {/* –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ */}
          {currentStep !== "reading" && (
            <div className="mt-8 pt-8">
              <div className="flex items-center gap-4 max-w-md mx-auto">
                {currentStep !== "layout" && (
                  <Button
                    variant="outline"
                    onClick={() => {
                      const steps: Step[] = ["layout", "category", "preset", "question", "cards"];
                      const currentIndex = steps.indexOf(currentStep);
                      if (currentIndex > 0) {
                        if (currentStep === "cards") {
                          setSelectedCards([]);
                          setRevealedCards([]);
                          setCardNames([]);
                          setReadingData([]);
                        }
                        setCurrentStep(steps[currentIndex - 1]);
                      }
                    }}
                    className="flex-1 h-12 bg-[var(--background-secondary)]/80 backdrop-blur-sm border-[var(--border)] text-white hover:bg-[var(--background-tertiary)] transition-all"
                  >
                    –ù–∞–∑–∞–¥
                  </Button>
                )}
                
                <Button
                  onClick={nextStep}
                  disabled={
                    (currentStep === "cards" && revealedCards.length < cardCount) ||
                    generateReading.isPending
                  }
                  className="flex-1 bg-gradient-to-r from-purple-600 via-blue-600 to-purple-700 hover:from-purple-700 hover:via-blue-700 hover:to-purple-800 text-white font-connie text-lg rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] hover:shadow-[0_0_30px_rgba(168,85,247,0.6)] transition-all duration-300 transform hover:scale-[1.02] border border-purple-400/30 h-12"
                >
                  <div className="flex items-center justify-center gap-2">
                    <Sparkles className="h-5 w-5" />
                    <span>
                      {currentStep === "cards" 
                        ? generateReading.isPending 
                          ? "–°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥..." 
                          : "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"
                        : currentStep === "layout"
                        ? "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                        : "–î–∞–ª–µ–µ"
                      }
                    </span>
                    <Sparkles className="h-5 w-5" />
                  </div>
                </Button>
              </div>
            </div>
          )}
          
          {currentStep === "reading" && (
            <div className="mt-8 pt-8">
              <div className="flex justify-center">
                <Button
                  onClick={resetReading}
                  className="bg-gradient-to-r from-purple-600 via-blue-600 to-purple-700 hover:from-purple-700 hover:via-blue-700 hover:to-purple-800 text-white font-connie text-lg rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] hover:shadow-[0_0_30px_rgba(168,85,247,0.6)] transition-all duration-300 transform hover:scale-[1.02] border border-purple-400/30 h-12 px-8"
                >
                  <div className="flex items-center justify-center gap-2">
                    <RotateCcw className="h-5 w-5" />
                    <span>–ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥</span>
                    <Sparkles className="h-5 w-5" />
                  </div>
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </MainLayout>
  );
}