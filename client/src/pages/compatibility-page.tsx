import { useState } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";

import { formatDisplayDate, calculateAge, parseLocalDate, getDaysOld, getNumericCode, formatDateForDB } from "../../../dateUtils";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { motion } from "framer-motion";
import { getZodiacSymbol } from "@/lib/zodiac";

import MainLayout from "@/components/layout/main-layout";
import DecorativeSymbols from "@/components/horoscope/decorative-symbols";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { DatePicker } from "@/components/shared/date-picker";
import { Card, CardContent } from "@/components/ui/card";
import { Loader2 } from "lucide-react";
import CosmicLoader from "@/components/shared/cosmic-loader";

const CompatibilityText = ({ text }: { text: string | any }) => {
  if (!text) {
    return (
      <div className="text-center py-8 text-white/60">
        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
      </div>
    );
  }
  
  let sections: Array<{title: string, content: string}> = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
  try {
    if (typeof text === 'string') {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const parsed = JSON.parse(text);
        if (Array.isArray(parsed)) {
          sections = parsed;
        } else {
          // –ï—Å–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª
          sections = [{ title: "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", content: text }];
        }
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        sections = [{ title: "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", content: text }];
      }
    } else if (Array.isArray(text)) {
      // –ï—Å–ª–∏ —É–∂–µ –º–∞—Å—Å–∏–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
      sections = text;
    } else if (typeof text === 'object') {
      // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (text.analysis) {
        sections = [{ title: "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", content: text.analysis }];
      } else {
        sections = [{ title: "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", content: JSON.stringify(text) }];
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    return (
      <div className="text-center py-8 text-white/60">
        <p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</p>
      </div>
    );
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏
  const validSections = sections.filter(section => 
    section.content && 
    section.content.trim().length > 10 &&
    !section.content.includes('[object Object]')
  );

  if (validSections.length === 0) {
    return (
      <div className="text-center py-8 text-white/60">
        <p>–î–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
      </div>
    );
  }

  // –£–º–Ω–æ–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞
  const astroSections: string[] = [];
  const numeroSections: string[] = [];
  const recomSections: string[] = [];

  validSections.forEach(section => {
    const title = section.title.toLowerCase().trim();
    const content = section.content.trim();
    
    if (title.includes('–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫') || title.includes('–æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑') || title.includes('–∑–Ω–∞–∫–∏')) {
      astroSections.push(content);
    } else if (title.includes('–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫') || title.includes('—á–∏—Å–ª–∞') || title.includes('–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫')) {
      numeroSections.push(content);
    } else if (title.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏') || title.includes('—Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞') || title.includes('–∑–∞–∫–ª—é—á–µ–Ω–∏–µ') || title.includes('—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')) {
      recomSections.push(content);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
      if (content.includes('–†–∞–∫') || content.includes('–ë–ª–∏–∑–Ω–µ—Ü—ã') || content.includes('—ç–ª–µ–º–µ–Ω—Ç')) {
        astroSections.push(content);
      } else if (content.includes('—á–∏—Å–ª–æ') || content.includes('—Ü–∏—Ñ—Ä–∞')) {
        numeroSections.push(content);
      } else {
        recomSections.push(content);
      }
    }
  });

  const finalSections = [
    { 
      title: "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", 
      icon: "‚≠ê",
      content: astroSections.join('\n\n')
    },
    { 
      title: "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", 
      icon: "üî¢",
      content: numeroSections.join('\n\n')
    },
    { 
      title: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥—ã", 
      icon: "üí°",
      content: recomSections.join('\n\n')
    }
  ].filter(section => section.content.trim().length > 20);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const highlightKeywords = (text: string): string => {
    if (!text || typeof text !== 'string') return text;
    
    const keywords = [
      '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', 
      '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã', '–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', 'Cancer', 'Gemini',
      '—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '–≥–∞—Ä–º–æ–Ω–∏—è', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '—ç–Ω–µ—Ä–≥–∏—è', '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π', '—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π',
      '—á–∏—Å–ª–æ', '—á–∏—Å–ª–∞', '–ø–∞—Ä—Ç–Ω–µ—Ä', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '–¥—Ä—É–∂–±–∞', '—Å–µ–º—å—è', '–±—Ä–∞–∫',
      '–∏–Ω—Ç—É–∏—Ü–∏—è', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å', '–±–∞–ª–∞–Ω—Å', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–¥–æ–≤–µ—Ä–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      '–ò–≤–∞–Ω', '–ö–∏—Ä–∏–ª–ª', '–∞–º–±–∏—Ü–∏–∏', '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ', '–≥—É–º–∞–Ω–∏–∑–º', '–∏–¥–µ–∞–ª–∏–∑–º'
    ];
    
    let result = text;
    keywords.forEach(keyword => {
      const regex = new RegExp(`\\b(${keyword})\\b`, 'gi');
      result = result.replace(regex, '<strong class="text-amber-300 font-medium">$1</strong>');
    });
    
    return result;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const formatContent = (content: string) => {
    if (!content) return null;

    const paragraphs = content
      .split('\n')
      .map(p => p.trim())
      .filter(p => p.length > 0);

    return paragraphs.map((paragraph, idx) => {
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
      if (paragraph.match(/^[–ê-–Ø–Å][–ê-–Ø–∞-—è—ë–Å\s]+:?$/) && paragraph.length < 50) {
        return (
          <h5 key={idx} className="text-amber-300 font-bold text-lg mt-6 mb-3 flex items-center">
            <span className="mr-2">üî∏</span>
            {paragraph.replace(':', '')}
          </h5>
        );
      }

      // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ - —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
      if (paragraph.includes(':') && paragraph.split(':').length === 2) {
        const [label, description] = paragraph.split(':');
        return (
          <div key={idx} className="mb-4 p-4 bg-amber-400/5 rounded-lg border-l-4 border-amber-400">
            <div className="flex flex-col">
              <span className="text-amber-300 font-bold text-base mb-2">
                {highlightKeywords(label.trim())}
              </span>
              <span 
                className="text-white font-cormorant text-base leading-relaxed"
                dangerouslySetInnerHTML={{ __html: highlightKeywords(description.trim()) }}
              />
            </div>
          </div>
        );
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞)
      if (paragraph.match(/^[–ê-–Ø–Å]/) && 
          (paragraph.includes('—Å—Ç–æ–∏—Ç') || paragraph.includes('—Å–ª–µ–¥—É–µ—Ç') || 
           paragraph.includes('–≤–∞–∂–Ω–æ') || paragraph.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è'))) {
        return (
          <div key={idx} className="mb-4 p-3 bg-blue-500/10 rounded-lg border-l-2 border-blue-400">
            <p 
              className="text-blue-100 font-cormorant text-base leading-relaxed font-medium"
              dangerouslySetInnerHTML={{ __html: highlightKeywords(paragraph) }}
            />
          </div>
        );
      }

      // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—ã –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
      if (paragraph.includes('‚Üí') || paragraph.includes('=') || paragraph.includes('+')) {
        return (
          <div key={idx} className="mb-4 p-3 bg-purple-500/10 rounded-lg border border-purple-400/30">
            <p 
              className="text-purple-100 font-mono text-sm leading-relaxed"
              dangerouslySetInnerHTML={{ __html: highlightKeywords(paragraph) }}
            />
          </div>
        );
      }

      // –û–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü
      return (
        <p 
          key={idx}
          className="text-white font-cormorant text-base leading-relaxed mb-3"
          dangerouslySetInnerHTML={{ __html: highlightKeywords(paragraph) }}
        />
      );
    }).filter(Boolean);
  };

  return (
    <div className="space-y-8 max-w-none">
      {finalSections.map((section, index) => (
        <div key={index} className="mb-10">
          {index > 0 && (
            <div className="border-t border-amber-400/30 my-8"></div>
          )}
          
          <div className="mb-6">
            <h4 className="text-2xl font-bold text-amber-400 mb-3 flex items-center">
              <span className="mr-4 text-3xl">
                {section.icon}
              </span>
              <span className="font-connie leading-tight">
                {section.title}
              </span>
            </h4>
            <div className="ml-16 h-0.5 bg-gradient-to-r from-amber-400/60 to-transparent"></div>
          </div>
          
          <div className="text-white leading-relaxed space-y-4 pl-4">
            {formatContent(section.content)}
          </div>
        </div>
      ))}

      {/* –ö—Ä–∞—Å–∏–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ */}
      <div className="text-center py-8 border-t border-amber-400/20 mt-12">
        <div className="flex justify-center items-center space-x-3 text-amber-400/70">
          <span className="text-xl">‚ú®</span>
          <span className="font-cormorant text-base italic">
            –ó–≤—ë–∑–¥—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –ø—É—Ç—å, –Ω–æ –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –∑–∞ –≤–∞–º–∏
          </span>
          <span className="text-xl">‚ú®</span>
        </div>
      </div>
    </div>
  );
};

interface Friend {
  id: string;
  name: string;
  birthDate: string;
  zodiacSign?: string;
}

interface CompatibilityResult {
  compatibilityScore: number;
  analysis: string;
  partnerData: {
    birthDate?: string;
    zodiacSign?: string;
    name?: string;
  };
}

export default function CompatibilityPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  
  const [partnerType, setPartnerType] = useState<"self" | "friend" | "custom">("friend");
  const [selectedFriendId, setSelectedFriendId] = useState<string>("");
  const [partnerDate, setPartnerDate] = useState<Date | undefined>(undefined);
  const [partnerName, setPartnerName] = useState<string>("");
  const [compatibilityResult, setCompatibilityResult] = useState<CompatibilityResult | null>(null);

  const { data: friends = [] } = useQuery<Friend[]>({
    queryKey: ["/api/friends"],
    enabled: !!user,
    staleTime: 60000,
    refetchOnWindowFocus: false,
  });

  const compatibilityMutation = useMutation({
    mutationFn: async (data: any) => {
      const res = await apiRequest("POST", "/api/compatibility", data);
      return await res.json();
    },
    onSuccess: (data) => {
      console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:", data);
      setCompatibilityResult(data);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    },
    onError: (error: Error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const calculateCompatibility = () => {
    if (partnerType === "self") {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–ª—å–∑—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π",
        variant: "destructive",
      });
      return;
    }

    if (partnerType === "friend" && !selectedFriendId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞",
        variant: "destructive",
      });
      return;
    }

    if (partnerType === "custom" && !partnerDate) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
        variant: "destructive",
      });
      return;
    }

    if (partnerType === "custom" && !partnerName.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
        variant: "destructive",
      });
      return;
    }

    let partnerData;
    if (partnerType === "friend") {
      const friend = friends.find(f => f.id === selectedFriendId);
      partnerData = {
        type: "friend",
        friendId: selectedFriendId,
        name: friend?.name
      };
    } else {
      partnerData = {
        type: "custom",
        birthDate: partnerDate ? formatDateForDB(partnerDate) : "",
        name: partnerName
      };
    }

    console.log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", partnerData);
    compatibilityMutation.mutate(partnerData);
  };

  const getNumericCodeLocal = (birthDate: Date | string): number => {
    const dateObj = typeof birthDate === 'string' ? parseLocalDate(birthDate) : birthDate;
    
    if (!dateObj || !(dateObj instanceof Date)) return 0;
    
    const day = dateObj.getDate();
    const month = dateObj.getMonth() + 1;
    const year = dateObj.getFullYear();
    
    let sum = day + month + year;
    while (sum > 9) {
      sum = sum.toString().split('').reduce((a, b) => a + parseInt(b), 0);
    }
    
    return sum;
  };

  const renderPartnerSelection = () => (
    <Card className="bg-[var(--background-secondary)]/50 backdrop-blur-sm border border-[var(--border)]">
      <CardContent className="p-5 space-y-4">
        <h2 className="text-xl font-connie text-center mb-4 text-white">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</h2>

        <div className="space-y-4">
          <div className="space-y-2">
            <label className="text-base font-cormorant font-medium text-white">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</label>
            <div className="flex flex-col gap-2">
              <button
                type="button"
                className={`p-3 rounded-xl border text-left text-white ${
                  partnerType === "friend" 
                    ? "border-amber-400 bg-[var(--background-secondary)]/80" 
                    : "border-[var(--border)] bg-[var(--background-secondary)]/50"
                }`}
                onClick={() => setPartnerType("friend")}
              >
                <span className="font-medium">–î—Ä—É–≥ –∏–∑ —Å–ø–∏—Å–∫–∞</span>
              </button>
              
              <button
                type="button"
                className={`p-3 rounded-xl border text-left text-white ${
                  partnerType === "custom" 
                    ? "border-amber-400 bg-[var(--background-secondary)]/80" 
                    : "border-[var(--border)] bg-[var(--background-secondary)]/50"
                }`}
                onClick={() => setPartnerType("custom")}
              >
                <span className="font-medium">–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫</span>
              </button>
            </div>
          </div>

          {partnerType === "friend" && (
            <div className="space-y-2">
              <label className="text-base font-cormorant font-medium text-white">–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞</label>
              <div className="border rounded-xl border-[var(--border)] bg-[var(--background-secondary)]/50 p-2 max-h-40 overflow-y-auto">
                {friends.map((friend) => (
                  <button
                    key={friend.id}
                    type="button"
                    className={`w-full p-2 my-1 text-left rounded-lg text-white ${
                      selectedFriendId === friend.id.toString() 
                        ? "bg-amber-400/20 border-amber-400" 
                        : "hover:bg-[var(--background-tertiary)]"
                    }`}
                    onClick={() => setSelectedFriendId(friend.id.toString())}
                  >
                    {friend.name}
                  </button>
                ))}
              </div>
            </div>
          )}

          {partnerType === "custom" && (
            <>
              <div className="space-y-2">
                <label className="text-base font-cormorant font-medium text-white">–ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞</label>
                <input
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
                  value={partnerName}
                  onChange={(e) => setPartnerName(e.target.value)}
                  className="w-full p-3 rounded-xl border border-[var(--border)] bg-[var(--background-secondary)]/50 text-white placeholder:text-white/50"
                  style={{ marginBottom: '2rem' }}
                />
              </div>
              
              <div className="space-y-2 mb-8">
                <label className="text-base font-cormorant font-medium text-white">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞</label>
                <div className="calendar-wrapper" style={{ position: 'relative', zIndex: 100, marginBottom: '3rem' }}>
                  <DatePicker
                    date={partnerDate}
                    setDate={setPartnerDate}
                    className="bg-[var(--background-secondary)] bg-opacity-50 rounded-xl border-[var(--border)]"
                  />
                </div>
              </div>
            </>
          )}

          <Button 
            className="w-full py-6 bg-[var(--primary)] hover:bg-[var(--primary-hover)] text-white font-connie rounded-xl transition-all shadow-[0_0_15px_var(--primary-opacity)]"
            onClick={calculateCompatibility}
            disabled={compatibilityMutation.isPending}
          >
            {compatibilityMutation.isPending ? (
              <><CosmicLoader size="small" text="" /> –†–∞—Å—á–µ—Ç...</>
            ) : (
              "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );

  const renderCompatibilityResult = () => {
    if (!compatibilityResult || !user) return null;

    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <Card className="bg-[var(--background-secondary)]/80 backdrop-blur-sm border border-[var(--border)]">
            <CardContent className="p-4">
              <h3 className="text-lg font-connie text-center mb-2 text-white">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h3>
              <p className="text-center font-medium text-base text-white">
                {formatDisplayDate(user?.birthDate || "")}
              </p>
              <div className="flex justify-between text-sm mt-2 text-white">
                <p>–í–æ–∑—Ä–∞—Å—Ç: {calculateAge(user?.birthDate || "")}</p>
                <p>–ì–ª–∞–≤–Ω–∞—è —Ü–∏—Ñ—Ä–∞: {getNumericCodeLocal(user?.birthDate || "")}</p>
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-[var(--background-secondary)]/80 backdrop-blur-sm border border-[var(--border)]">
            <CardContent className="p-4">
              <h3 className="text-lg font-connie text-center mb-2 text-white">
                {compatibilityResult.partnerData?.name ? 
                  `${compatibilityResult.partnerData.name}` : 
                  "–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"}
              </h3>
              <p className="text-center font-medium text-base text-white">
                {compatibilityResult.partnerData?.birthDate ? 
                  formatDisplayDate(compatibilityResult.partnerData.birthDate) : 
                  "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
              </p>
              <div className="flex justify-between text-sm mt-2 text-white">
                {compatibilityResult.partnerData?.birthDate && (
                  <>
                    <p>–í–æ–∑—Ä–∞—Å—Ç: {calculateAge(compatibilityResult.partnerData.birthDate)}</p>
                    <p>–ì–ª–∞–≤–Ω–∞—è —Ü–∏—Ñ—Ä–∞: {getNumericCodeLocal(compatibilityResult.partnerData.birthDate)}</p>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div className="mb-6">
          <h3 className="text-xl font-connie text-center mb-4 text-white">–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibilityResult.compatibilityScore}%</h3>
          <div className="relative">
            <Progress 
              value={compatibilityResult.compatibilityScore} 
              className="h-12 rounded-md progress-golden bg-slate-200"
            />
            <div 
              className="absolute inset-0 flex items-center justify-center text-lg font-bold"
              style={{ 
                color: 'black'
              }}
            >
              {compatibilityResult.compatibilityScore}%
            </div>
          </div>
        </div>
        
        {/* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ */}
        <Card className="bg-[var(--background-secondary)]/50 backdrop-blur-sm border border-[var(--border)]">
          <CardContent className="p-5">
            <h3 className="text-xl font-connie text-center mb-4 text-white">–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</h3>
            <div className="pr-2">
              <CompatibilityText text={compatibilityResult.analysis} />
            </div>
          </CardContent>
        </Card>
        
        <Button 
          className="w-full py-6 bg-[var(--primary)] hover:bg-[var(--primary-hover)] text-white font-connie rounded-xl transition-all shadow-[0_0_15px_var(--primary-opacity)]"
          onClick={() => {
            setCompatibilityResult(null);
            setPartnerName("");
          }}
        >
          –ù–æ–≤—ã–π —Ç–µ—Å—Ç
        </Button>
      </div>
    );
  };

  return (
    <MainLayout title="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å" activeTab="compatibility">
      <div className="relative p-4 pb-safe">
        {compatibilityMutation.isPending && (
          <CosmicLoader 
            fullScreen 
            size="large" 
            text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥–Ω—ã—Ö –∫–∞—Ä—Ç..."
          />
        )}
        
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <DecorativeSymbols type="astrology" />
        </div>
        
        <div className="mt-2 mb-6 text-center">
         <h1 className="text-2xl font-connie mb-3 text-center w-full">–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</h1>
         <p className="text-sm opacity-90 font-cormorant text-base mx-auto max-w-md text-[var(--foreground-secondary)]">
           –£–∑–Ω–∞–π—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤–∞—à–∏ –∑–≤—ë–∑–¥—ã —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏
         </p>
       </div>
       
       {compatibilityResult ? renderCompatibilityResult() : renderPartnerSelection()}
     </div>
   </MainLayout>
 );
}