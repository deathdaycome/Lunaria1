import { useState, useEffect, useRef } from "react";
import MainLayout from "@/components/layout/main-layout";
import HoroscopeCard from "@/components/horoscope/horoscope-card";
import FriendsSection from "@/components/horoscope/friends-section";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useQuery } from "@tanstack/react-query";
import { Skeleton } from "@/components/ui/skeleton";
import { useLocation } from "wouter";
import { getZodiacSign } from "@/lib/zodiac";
import CosmicLoader from "@/components/shared/cosmic-loader";
import { useAuth } from "@/hooks/use-auth";

type HoroscopePeriod = "today" | "week" | "month";

type UserProfileData = {
  id: number;
  name: string;
  gender: "male" | "female";
  birthDate: string;
  birthTime?: string;
  birthPlace?: string;
  zodiacSign: string;
  subscriptionType: string;
};

export default function HoroscopePage() {
  const [, navigate] = useLocation();
  const [period, setPeriod] = useState<HoroscopePeriod>("today");
  
  // –†–µ—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ HoroscopeCard
  const horoscopeCardRef = useRef<{ handleRefresh: () => void } | null>(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { user, isLoading: authLoading } = useAuth();

  // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
  const { data: userProfile, isLoading, error } = useQuery({
    queryKey: ["/api/user"],
    queryFn: async () => {
      const response = await fetch("/api/user");
      if (!response.ok) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      }
      return response.json() as Promise<UserProfileData>;
    },
    enabled: !authLoading, // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    retry: 1,
  });

  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    if (!authLoading && !user && error) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
      navigate("/");
    }
  }, [authLoading, user, error, navigate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ
  const handleRefresh = () => {
    console.log("üî• MainLayout refresh clicked - –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞");
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ HoroscopeCard
    if (horoscopeCardRef.current && horoscopeCardRef.current.handleRefresh) {
      horoscopeCardRef.current.handleRefresh();
    } else {
      console.warn("‚ö†Ô∏è horoscopeCardRef.current.handleRefresh –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  if (authLoading || isLoading) {
    return (
      <MainLayout 
        title="–ì–æ—Ä–æ—Å–∫–æ–ø" 
        activeTab="horoscope"
        showRefresh={false}
        showHeader={false}
      >
        <div className="space-y-6 mb-20">
          <div className="card p-8 flex flex-col items-center justify-center min-h-[300px]">
            <CosmicLoader size="medium" text="–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å..." />
          </div>
        </div>
      </MainLayout>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  if (error || !userProfile) {
    return (
      <MainLayout 
        title="–ì–æ—Ä–æ—Å–∫–æ–ø" 
        activeTab="horoscope"
        showRefresh={false}
        showHeader={false}
      >
        <div className="space-y-6 mb-20">
          <div className="card p-8 flex flex-col items-center justify-center min-h-[300px]">
            <p className="text-white text-center">
              –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
              <br />
              <button 
                onClick={() => navigate("/")} 
                className="text-primary underline mt-2"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
              </button>
            </p>
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout 
      title="–ì–æ—Ä–æ—Å–∫–æ–ø" 
      activeTab="horoscope"
      showRefresh={true}
      onRefresh={handleRefresh}
      showHeader={false}
    >
      <div className="space-y-6 mb-20">
        <div className="flex justify-between items-center mb-4">
          <h2 className="page-heading font-gilroy">
            {userProfile.name}, –≤–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø
          </h2>
          <Select
            value={period}
            onValueChange={(value) => setPeriod(value as HoroscopePeriod)}
          >
            <SelectTrigger className="w-[110px] glass-effect border-accent/20 font-gilroy text-white">
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥" />
            </SelectTrigger>
            <SelectContent className="bg-[#2a1d51] border-[#583e8b]">
              <SelectItem value="today" className="font-gilroy text-white">–°–µ–≥–æ–¥–Ω—è</SelectItem>
              <SelectItem value="week" className="font-gilroy text-white">–ù–µ–¥–µ–ª—è</SelectItem>
              <SelectItem value="month" className="font-gilroy text-white">–ú–µ—Å—è—Ü</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <HoroscopeCard 
          ref={horoscopeCardRef}
          period={period}
          zodiacSign={getZodiacSign(new Date(userProfile.birthDate)).name}
          userId={userProfile.id}
          userName={userProfile.name}
          userBirthDate={userProfile.birthDate}
          subscriptionType={userProfile.subscriptionType}
        />

        <FriendsSection userId={userProfile.id} />
      </div>
    </MainLayout>
  );
}