// @ts-nocheck
console.log('=== CRASH PROTECTION START ===');

// –õ–æ–≤–∏–º –í–°–ï –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
process.on('uncaughtException', (error) => {
    console.error('=== UNCAUGHT EXCEPTION ===');
    console.error('Error:', error);
    console.error('Stack:', error.stack);
    console.error('Time:', new Date().toISOString());
    console.error('Memory at crash:', process.memoryUsage());
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('=== UNHANDLED PROMISE REJECTION ===');
    console.error('Reason:', reason);
    console.error('Promise:', promise);
    console.error('Time:', new Date().toISOString());
    console.error('Memory at rejection:', process.memoryUsage());
});

console.log('=== STARTUP DIAGNOSTICS ===');
console.log('Node.js version:', process.version);
console.log('Platform:', process.platform);
console.log('Working directory:', process.cwd());
console.log('Environment:', process.env.NODE_ENV);
console.log('Port:', process.env.PORT);
console.log('Available memory:', Math.round(process.memoryUsage().rss / 1024 / 1024), 'MB');

console.log('Loading modules...');

import 'dotenv/config';
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { storage } from "./storage";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { db } from "./db";
import * as schema from "../shared/schema";
import { pool } from "./db";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import session from "express-session";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import connectPgSimple from "connect-pg-simple";
import pg from "pg";
import path from "path";
import fs from "fs";
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const { Pool } = pg;
const scryptAsync = promisify(scrypt);

console.log('Modules loaded successfully');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏
async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
function parseLocalDate(dateString: string): Date {
  if (!dateString) return new Date();
  
  if (dateString.includes('T') || dateString.includes(' ')) {
    return new Date(dateString);
  }
  
  const [year, month, day] = dateString.split('-').map(Number);
  return new Date(year, month - 1, day, 12, 0, 0);
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É YYYY-MM-DD
function formatDateForDB(date: Date): string {
  if (!date || !(date instanceof Date)) return '';
  
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  
  return `${year}-${month}-${day}`;
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
function getZodiacSign(birthDate: Date | string) {
  let dateObj: Date;
  
  if (typeof birthDate === 'string') {
    dateObj = parseLocalDate(birthDate);
  } else {
    dateObj = birthDate;
  }
  
  const month = dateObj.getMonth() + 1;
  const day = dateObj.getDate();
  
  const signs = [
    { name: "–ö–æ–∑–µ—Ä–æ–≥", start: [12, 22], end: [1, 19] },
    { name: "–í–æ–¥–æ–ª–µ–π", start: [1, 20], end: [2, 18] },
    { name: "–†—ã–±—ã", start: [2, 19], end: [3, 20] },
    { name: "–û–≤–µ–Ω", start: [3, 21], end: [4, 19] },
    { name: "–¢–µ–ª–µ—Ü", start: [4, 20], end: [5, 20] },
    { name: "–ë–ª–∏–∑–Ω–µ—Ü—ã", start: [5, 21], end: [6, 20] },
    { name: "–†–∞–∫", start: [6, 21], end: [7, 22] },
    { name: "–õ–µ–≤", start: [7, 23], end: [8, 22] },
    { name: "–î–µ–≤–∞", start: [8, 23], end: [9, 22] },
    { name: "–í–µ—Å—ã", start: [9, 23], end: [10, 22] },
    { name: "–°–∫–æ—Ä–ø–∏–æ–Ω", start: [10, 23], end: [11, 21] },
    { name: "–°—Ç—Ä–µ–ª–µ—Ü", start: [11, 22], end: [12, 21] }
  ];
  
  for (const sign of signs) {
    if (
      (month === sign.start[0] && day >= sign.start[1]) ||
      (month === sign.end[0] && day <= sign.end[1])
    ) {
      return { name: sign.name };
    }
  }
  
  return { name: "–û–≤–µ–Ω" };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
function convertZodiacToEnglish(zodiacSign: string): string {
  const zodiacMap: Record<string, string> = {
    '–û–≤–µ–Ω': 'aries',
    '–¢–µ–ª–µ—Ü': 'taurus', 
    '–ë–ª–∏–∑–Ω–µ—Ü—ã': 'gemini',
    '–†–∞–∫': 'cancer',
    '–õ–µ–≤': 'leo',
    '–î–µ–≤–∞': 'virgo',
    '–í–µ—Å—ã': 'libra',
    '–°–∫–æ—Ä–ø–∏–æ–Ω': 'scorpio',
    '–°—Ç—Ä–µ–ª–µ—Ü': 'sagittarius',
    '–ö–æ–∑–µ—Ä–æ–≥': 'capricorn',
    '–í–æ–¥–æ–ª–µ–π': 'aquarius',
    '–†—ã–±—ã': 'pisces'
  };
  
  return zodiacMap[zodiacSign] || zodiacSign.toLowerCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø
function checkCanRefresh(lastUpdate: Date, period: string): boolean {
  const now = new Date();
  const lastUpdateDate = new Date(lastUpdate);
  
  switch (period) {
    case 'today':
      return now.toDateString() !== lastUpdateDate.toDateString();
    case 'week':
      const weeksDiff = Math.floor((now.getTime() - lastUpdateDate.getTime()) / (7 * 24 * 60 * 60 * 1000));
      return weeksDiff >= 1;
    case 'month':
      return now.getMonth() !== lastUpdateDate.getMonth() || now.getFullYear() !== lastUpdateDate.getFullYear();
    default:
      return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (–æ—Ç 1 –¥–æ 10)
function getRandomNumbers(count: number, min: number, max: number): number[] {
  const numbers: number[] = [];
  for (let i = 0; i < count; i++) {
    numbers.push(Math.floor(Math.random() * (max - min + 1)) + min);
  }
  return numbers;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∑–Ω–∞–∫–æ–≤
function getCompatibleSigns(zodiacSign: string): string[] {
  const compatibility: Record<string, string[]> = {
    'aries': ['leo', 'sagittarius', 'gemini'],
    'taurus': ['virgo', 'capricorn', 'cancer'],
    'gemini': ['libra', 'aquarius', 'aries'],
    'cancer': ['scorpio', 'pisces', 'taurus'],
    'leo': ['aries', 'sagittarius', 'gemini'],
    'virgo': ['taurus', 'capricorn', 'cancer'],
    'libra': ['gemini', 'aquarius', 'leo'],
    'scorpio': ['cancer', 'pisces', 'virgo'],
    'sagittarius': ['aries', 'leo', 'libra'],
    'capricorn': ['taurus', 'virgo', 'scorpio'],
    'aquarius': ['gemini', 'libra', 'sagittarius'],
    'pisces': ['cancer', 'scorpio', 'capricorn']
  };
  
  return compatibility[zodiacSign.toLowerCase()] || ['taurus', 'cancer', 'virgo'];
}

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
console.log("üî• CREATING EXPRESS APP!");
const app = express();
console.log("üî• EXPRESS APP CREATED!");

// –¢–µ—Å—Ç OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testOpenAI() {
  try {
    console.log("ü§ñ Testing OpenAI connection...");
    const OpenAI = (await import("openai")).default;
    const openai = new OpenAI({ 
      baseURL: "https://openrouter.ai/api/v1",
      apiKey: process.env.OPENROUTER_API_KEY,
      defaultHeaders: {
        'HTTP-Referer': 'https://lunaria-app.com',
        'X-Title': 'Lunaria Astrology App',
      }
    });
    
    const response = await openai.chat.completions.create({
      model: "openai/gpt-4o-mini",
      messages: [{ role: "user", content: "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç" }],
      max_tokens: 10,
    });
    
    console.log("‚úÖ OpenAI connection SUCCESS!");
    console.log("ü§ñ Response:", response.choices[0].message.content);
  } catch (error: any) {
    console.error("‚ùå OpenAI connection FAILED:", error.message);
  }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
testOpenAI();

// –û–°–ù–û–í–ù–´–ï MIDDLEWARE
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.set("trust proxy", 1);
app.use(session({
  secret: "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π-–ø—É—Ç—å-—Å–µ–∫—Ä–µ—Ç",
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 30 * 24 * 60 * 60 * 1000,
    secure: false,
    httpOnly: true,
    sameSite: "lax"
  }
}));

app.use(passport.initialize());
app.use(passport.session());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Passport
passport.use(
  new LocalStrategy(async (username, password, done) => {
    try {
      console.log("üîë Passport Local Strategy called for username:", username);
      const user = await storage.getUserByUsername(username);
      if (!user || !(await comparePasswords(password, user.password))) {
        console.log("üîë Authentication failed for username:", username);
        return done(null, false, { message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      } else {
        console.log("üîë Authentication successful for username:", username);
        return done(null, user);
      }
    } catch (error) {
      console.error("üîë Passport authentication error:", error);
      return done(error);
    }
  }),
);

passport.serializeUser((user: any, done) => {
  console.log("üîë Serializing user:", user.id);
  done(null, user.id);
});

passport.deserializeUser(async (id: number, done) => {
  try {
    console.log("üîë Deserializing user ID:", id);
    const user = await storage.getUser(id);
    console.log("üîë User deserialized:", user ? user.username : 'not found');
    done(null, user);
  } catch (error) {
    console.error("üîë Deserialization error:", error);
    done(error);
  }
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üìù ${new Date().toISOString()} - ${req.method} ${req.url}`);
  next();
});

// HEALTH CHECK –†–û–£–¢–´
app.get('/health', (req: Request, res: Response) => {
  const healthData = {
    status: 'ok', 
    timestamp: new Date().toISOString(),
    app: 'Lunaria AI',
    port: process.env.PORT || 8000,
    env: process.env.NODE_ENV || 'development',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    pid: process.pid,
    openai: process.env.OPENROUTER_API_KEY ? 'configured ‚úÖ' : 'missing ‚ùå'
  };
  
  console.log('=== HEALTH CHECK REQUESTED ===');
  res.status(200).json(healthData);
});

app.get('/test', (req, res) => {
  console.log('üß™ TEST ROUTE HIT - —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  res.json({ message: 'TEST WORKS!' });
});

app.get('/', (req: Request, res: Response) => {
  console.log('=== ROOT PATH REQUESTED ===');
  res.status(200).json({ 
    message: 'Lunaria AI is running',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// ======= API ENDPOINTS =======

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
app.get('/api/friends', async (req: any, res) => {
  console.log('üîç FRIENDS GET ENDPOINT HIT!');
  console.log('üîç User:', req.user ? `ID: ${req.user.id}` : 'not found');
  
  try {
    const user = req.user;
    
    if (!user) {
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    const friends = await storage.getFriendsByUserId(user.id);
    console.log('‚úÖ Friends found:', friends.length);
    
    res.json(friends);
  } catch (error) {
    console.error('‚ùå Error getting friends:', error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π" });
  }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
app.post('/api/friends', async (req: any, res) => {
  console.log('üîç ADD FRIEND ENDPOINT HIT!');
  console.log('üîç Request body:', req.body);
  console.log('üîç User:', req.user ? `ID: ${req.user.id}` : 'not found');
  
  try {
    const user = req.user;
    
    if (!user) {
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    const { name, gender, birthDate, birthTime, birthPlace } = req.body;
    
    if (!name || !gender || !birthDate) {
      return res.status(400).json({ error: "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" });
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º parseLocalDate
    const birthDateObj = parseLocalDate(birthDate);
    const zodiacSignData = getZodiacSign(birthDateObj);
    
    console.log('üîç Creating friend with zodiac:', zodiacSignData.name);
    console.log('üîç Friend birth date processed:', formatDateForDB(birthDateObj));
    
    const friendData = {
      userId: user.id,
      name: name,
      email: '',
      gender: gender,
      birthDate: formatDateForDB(birthDateObj), // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º formatDateForDB
      birthTime: birthTime || null,
      birthPlace: birthPlace || '',
      zodiacSign: zodiacSignData.name
    };
    
    const newFriend = await storage.createFriend(friendData);
    console.log('‚úÖ Friend created successfully:', newFriend.id);
    
    res.status(201).json(newFriend);
  } catch (error) {
    console.error('‚ùå Error creating friend:', error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞" });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
app.delete('/api/friends/:friendId', async (req: any, res) => {
  console.log('üîç DELETE FRIEND ENDPOINT HIT!');
  console.log('üîç Friend ID:', req.params.friendId);
  console.log('üîç User:', req.user ? `ID: ${req.user.id}` : 'not found');
  
  res.setHeader('Content-Type', 'application/json');
  
  try {
    const user = req.user;
    const friendId = req.params.friendId;
    
    if (!user) {
      console.log('‚ùå No user found');
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    if (!friendId) {
      console.log('‚ùå No friendId provided');
      return res.status(400).json({ error: "ID –¥—Ä—É–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω" });
    }
    
    console.log('üîç Attempting to delete friend with ID:', friendId);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    console.log('‚úÖ Friend deleted successfully (simulated):', friendId);
    
    const responseData = { 
      success: true, 
      message: "–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      deletedFriendId: friendId
    };
    
    console.log('‚úÖ Sending response:', responseData);
    return res.status(200).json(responseData);
    
  } catch (error) {
    console.error('‚ùå Error deleting friend:', error);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞" });
  }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ì–û–†–û–°–ö–û–ü–ê - –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–´
app.get('/api/horoscope', async (req: any, res) => {
  console.log("üîç HOROSCOPE GET ENDPOINT HIT!");
  console.log("üîç Query params:", req.query);
  console.log("üîç User:", req.user);
  
  try {
    const { userId, period = "today", category = "general", zodiacSign } = req.query;
    const user = req.user;
    
    if (!user) {
      console.log("‚ùå User not authenticated");
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    console.log("üîç Parsed params:", { userId, period, category, zodiacSign });
    
    const zodiacSignEn = convertZodiacToEnglish(zodiacSign as string || user.zodiacSign);
    console.log("üîç Zodiac sign converted:", { original: zodiacSign, converted: zodiacSignEn });

    // ‚úÖ –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò –î–û–°–¢–£–ü–ù–´ - —É–±—Ä–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    // –ò—â–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
    const existingHoroscope = await storage.getActualHoroscope(
      user.id, 
      period as string, 
      category as string
    );

    console.log("üîç Existing horoscope:", existingHoroscope ? "found" : "not found");

    if (existingHoroscope) {
      const canRefresh = checkCanRefresh(existingHoroscope.createdAt, period as string);
      
      console.log("‚úÖ Returning existing horoscope");
      return res.json({
        content: existingHoroscope.content,
        luckyNumbers: existingHoroscope.luckyNumbers,
        compatibleSigns: existingHoroscope.compatibleSigns,
        lastUpdated: format(new Date(existingHoroscope.createdAt), 'd MMMM', { locale: ru }),
        canRefresh
      });
    }

    console.log("üîç Generating new horoscope...");
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const { generateHoroscope } = await import("./openai");
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
    const content = await generateHoroscope(
      user.id, 
      zodiacSignEn, 
      period as string, 
      category as string
    );
    
    console.log("‚úÖ Horoscope content generated");
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10
    const luckyNumbers = getRandomNumbers(3, 1, 10);
    const compatibleSigns = getCompatibleSigns(zodiacSignEn);
    
    console.log("üîç Creating horoscope in database...");
    
    const newHoroscope = await storage.createHoroscope({
      userId: user.id,
      period: period as string,
      category: category as string,
      content,
      luckyNumbers,
      compatibleSigns: compatibleSigns.slice(0, 3).map(sign => ({
        name: sign,
        compatibility: Math.floor(Math.random() * 21) + 80
      })),
      isActual: true
    });
    
    console.log("‚úÖ Horoscope created successfully");
    
    res.json({
      content: newHoroscope.content,
      luckyNumbers: newHoroscope.luckyNumbers,
      compatibleSigns: newHoroscope.compatibleSigns,
      lastUpdated: "—Å–µ–≥–æ–¥–Ω—è",
      canRefresh: false
    });
  } catch (error) {
    console.error("‚ùå Error getting horoscope:", error);
    res.status(500).json({ 
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
app.post('/api/horoscope/refresh', async (req: any, res) => {
  console.log("üî• HOROSCOPE REFRESH ENDPOINT HIT!");
  console.log("üî• Body:", JSON.stringify(req.body, null, 2));
  
  try {
    const user = req.user;
    
    if (!user) {
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }

    const { period = "today", category = "general", zodiacSign } = req.body;
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const { generateHoroscope } = await import("./openai");
    
    const zodiacSignEn = convertZodiacToEnglish(zodiacSign || user.zodiacSign);
    
    const content = await generateHoroscope(
      user.id, 
      zodiacSignEn, 
      period, 
      category
    );
    
    console.log("‚úÖ Generated content:", content.substring(0, 100) + "...");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
    const luckyNumbers = getRandomNumbers(3, 1, 10);
    const compatibleSigns = getCompatibleSigns(zodiacSignEn);
    
    const updatedHoroscope = await storage.createHoroscope({
      userId: user.id,
      period: period,
      category: category,
      content,
      luckyNumbers,
      compatibleSigns: compatibleSigns.slice(0, 3).map(sign => ({
        name: sign,
        compatibility: Math.floor(Math.random() * 21) + 80
      })),
      isActual: true
    });
    
    res.json({
      content: updatedHoroscope.content,
      luckyNumbers: updatedHoroscope.luckyNumbers,
      compatibleSigns: updatedHoroscope.compatibleSigns,
      lastUpdated: "—Å–µ–π—á–∞—Å",
      canRefresh: false
    });
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ error: (error as Error).message });
  }
});

// API –¥–ª—è —Ç–∞—Ä–æ
// API –¥–ª—è —Ç–∞—Ä–æ - –ó–ê–ú–ï–ù–ò–¢–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ë–õ–û–ö
app.post('/api/tarot', async (req: any, res) => {
  console.log("üîç TAROT ENDPOINT HIT!");
  console.log("üîç Request body:", req.body);
  console.log("üîç User:", req.user ? `ID: ${req.user.id}, Name: ${req.user.name}` : 'not found');
  
  try {
    const user = req.user;
    
    if (!user) {
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    const { question, cardCount = 3, category = "love", selectedCards } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!question || !question.trim()) {
      console.log("‚ùå Validation failed: no question");
      return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é" });
    }

    if (![3, 5].includes(cardCount)) {
      console.log("‚ùå Validation failed: invalid card count");
      return res.status(400).json({ error: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∏–ª–∏ 5" });
    }

    if (!category) {
      console.log("‚ùå Validation failed: no category");
      return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" });
    }
    
    console.log("üîç Processing tarot:", { 
      question: question?.substring(0, 50) + "...", 
      cardCount, 
      category 
    });
    
    console.log("üîç Generating tarot reading...");
    
    const { generateTarotReading } = await import("./openai");
    
    const reading = await generateTarotReading(
      user.id,
      question.trim(),
      cardCount,
      category,
      selectedCards
    );
    
    console.log("‚úÖ Tarot reading generated successfully");
    console.log("üîç Reading type:", Array.isArray(reading) ? 'array' : typeof reading);
    console.log("üîç Reading preview:", Array.isArray(reading) ? `${reading.length} sections generated` : reading.substring(0, 200) + "...");
    
    res.json({ 
      success: true,
      reading: reading,
      cardCount,
      category
    });
    
  } catch (error) {
    console.error("‚ùå Error generating tarot reading:", error);
    res.status(500).json({ 
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –∫–∞—Ä—Ç",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});

// API –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
app.post('/api/natal-chart', async (req: any, res) => {
  console.log("üîç NATAL CHART ENDPOINT HIT!");
  console.log("üîç Request body:", req.body);
  console.log("üîç User:", req.user ? `ID: ${req.user.id}, Name: ${req.user.name}` : 'not found');
  
  try {
    const user = req.user;
    
    if (!user) {
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    const { type, name, birthDate, birthTime, birthPlace } = req.body;
    
    console.log("üîç Processing natal chart:", { type, name, birthDate, birthTime, birthPlace });
    
    let analysisData: any = {};
    
    if (type === "self") {
      analysisData = {
        name: user.name,
        birthDate: user.birthDate,
        birthTime: user.birthTime,
        birthPlace: user.birthPlace
      };
      
      const missingData = [];
      if (!user.birthTime) {
        missingData.push("–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è");
      }
      if (!user.birthPlace) {
        missingData.push("–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è");
      }
      
      if (missingData.length > 0) {
        console.log("‚ö†Ô∏è Missing data for natal chart:", missingData);
        return res.status(400).json({
          error: "–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
          message: `–î–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: ${missingData.join(", ")}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.`,
          missingData: missingData,
          needsUpdate: true
        });
      }
    } else {
      if (!name || !birthDate) {
        return res.status(400).json({ 
          error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è" 
        });
      }
      
      analysisData = {
        name: name,
        birthDate: birthDate,
        birthTime: birthTime || "12:00",
        birthPlace: birthPlace || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      };
    }
    
    console.log("üîç Generating natal chart analysis...");
    
    const { generateNatalChartAnalysis } = await import("./openai");
    
    const analysis = await generateNatalChartAnalysis(
      user.id,
      analysisData.name,
      analysisData.birthDate,
      analysisData.birthTime,
      analysisData.birthPlace
    );
    
    console.log("‚úÖ Natal chart analysis generated successfully");
    
    res.json({ 
      analysis,
      chartData: analysisData,
      success: true,
      type: type
    });
    
  } catch (error) {
    console.error("‚ùå Error generating natal chart:", error);
    res.status(500).json({ 
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.post('/api/compatibility', async (req: any, res) => {
 console.log("üî• COMPATIBILITY ENDPOINT HIT!");
 console.log("üî• Body:", JSON.stringify(req.body, null, 2));
 
 try {
   const { type, friendId, birthDate, name } = req.body;
   const user = req.user;
   
   if (!user) {
     return res.status(401).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
   }
   
   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
   let partnerZodiacSign = "aries";
   let partnerBirthDate = birthDate;
   let partnerName = name || "–ü–∞—Ä—Ç–Ω–µ—Ä";
   
   if (type === "friend" && friendId) {
     try {
       const friend = await storage.getFriendById(friendId);
       if (friend) {
         partnerBirthDate = friend.birthDate;
         partnerName = friend.name;
         partnerZodiacSign = friend.zodiacSign || getZodiacSign(friend.birthDate).name;
       }
     } catch (error) {
       console.log("‚ö†Ô∏è Friend not found, using fallback data");
     }
   } else if (birthDate) {
     // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º parseLocalDate –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã
     const zodiacData = getZodiacSign(partnerBirthDate);
     partnerZodiacSign = zodiacData.name;
   }
   
   const partnerZodiacEn = convertZodiacToEnglish(partnerZodiacSign);
   const userZodiacEn = convertZodiacToEnglish(user?.zodiacSign || "capricorn");
   
   // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 9
   const compatibilityScore = Math.floor(Math.random() * 31) + 70;
   const userLuckyNumber = Math.floor(Math.random() * 10);
   const partnerLuckyNumber = Math.floor(Math.random() * 10);
   
   const { generateCompatibilityAnalysis } = await import("./openai");
   
   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –∏ –∏–∑ –ë–î, –∏ –Ω–æ–≤—ã–µ
   const userFormattedDate = user?.birthDate ? 
     formatDateForDB(parseLocalDate(user.birthDate)) : 
     "1990-01-01";

   const partnerFormattedDate = partnerBirthDate ? 
     formatDateForDB(parseLocalDate(partnerBirthDate)) : 
     "1990-01-01";
   
   console.log("üîç Dates for analysis:", { 
     user: userFormattedDate, 
     partner: partnerFormattedDate 
   });
   
   const analysis = await generateCompatibilityAnalysis(
     user?.id || 1,
     { 
       name: user?.name || "–í—ã", 
       zodiacSign: userZodiacEn, 
       birthDate: userFormattedDate,
       luckyNumber: userLuckyNumber
     },
     { 
       name: partnerName, 
       zodiacSign: partnerZodiacEn, 
       birthDate: partnerFormattedDate,
       luckyNumber: partnerLuckyNumber
     },
     compatibilityScore
   );
   
   res.json({
     compatibilityScore,
     analysis,
     partnerData: { 
       name: partnerName,
       birthDate: partnerFormattedDate,
       zodiacSign: partnerZodiacSign,
       luckyNumber: partnerLuckyNumber
     },
     userData: {
       name: user?.name || "–í—ã",
       birthDate: userFormattedDate,
       zodiacSign: user?.zodiacSign,
       luckyNumber: userLuckyNumber
     }
   });
 } catch (error) {
   console.error("‚ùå Compatibility Error:", error);
   res.status(500).json({ error: (error as Error).message });
 }
});

// AUTH –ú–ê–†–®–†–£–¢–´
app.get('/api/user', (req: any, res) => {
 console.log('üî• USER ROUTE HIT!');
 console.log('üî• User in session:', req.user);
 
 if (req.user) {
   console.log('‚úÖ User found in session');
   res.json(req.user);
 } else {
   console.log('‚ùå No user in session');
   res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
 }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/api/register', async (req: any, res, next) => {
 console.log('üî• REGISTER ROUTE HIT!');
 console.log('üî• Request body:', JSON.stringify(req.body, null, 2));

 try {
   const { birthDate, username, password, name, gender, email, birthPlace, birthTime } = req.body;
   
   if (!username || !password || !name || !gender || !birthDate) {
     console.log("‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
     return res.status(400).json({ message: "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" });
   }
   
   console.log("üîç Checking if user exists:", username);
   const existingUser = await storage.getUserByUsername(username);
   if (existingUser) {
     console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", username);
     return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
   }

   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º parseLocalDate –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã
   const birthDateObj = typeof birthDate === 'string' ? parseLocalDate(birthDate) : birthDate;
   const zodiacSignData = getZodiacSign(birthDateObj);
   console.log("‚ú® –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", zodiacSignData.name);
   console.log("‚ú® –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:", formatDateForDB(birthDateObj));
   
   const userData2Save = {
     username: username,
     name: name,
     email: email || `temp_${Date.now()}@lunaria.app`,
     gender: gender,
     birthPlace: birthPlace || '',
     birthTime: birthTime || '12:00:00',
     birthDate: formatDateForDB(birthDateObj), // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º formatDateForDB
     password: await hashPassword(password),
     zodiacSign: zodiacSignData.name,
     subscriptionType: 'free',
     role: 'user'
   };
   
   console.log("üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:", { 
     ...userData2Save, 
     password: "–°–ö–†–´–¢" 
   });
   
   const user = await storage.createUser(userData2Save);
   console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", { id: user.id, name: user.name });

   req.login(user, (err: any) => {
     if (err) {
       console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
       return next(err);
     }
     
     console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
     const { password, ...userWithoutPassword } = user;
     res.status(201).json(userWithoutPassword);
   });
 } catch (error) {
   console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
   res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
 }
});

app.post('/api/login', (req, res, next) => {
 console.log('üî• LOGIN ROUTE HIT!');
 console.log('üî• Login request body:', JSON.stringify(req.body, null, 2));
 
 passport.authenticate(
   "local",
   (err: any, user: any, info: any) => {
     if (err) {
       console.error("‚ùå Login authentication error:", err);
       return next(err);
     }
     if (!user) {
       console.log("‚ùå Login failed:", info?.message || "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
       return res.status(401).json({ message: info?.message || "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
     }
     
     console.log("‚úÖ User authenticated, logging in:", user.username);
     req.login(user, (err: any) => {
       if (err) {
         console.error("‚ùå req.login error:", err);
         return next(err);
       }
       console.log("‚úÖ Login successful for user:", user.username);
       
       const { password, ...userWithoutPassword } = user;
       return res.status(200).json(userWithoutPassword);
     });
   }
 )(req, res, next);
});

app.post('/api/logout', (req: any, res, next) => {
 console.log('üî• LOGOUT ROUTE HIT!');
 console.log('üî• User before logout:', req.user ? req.user.username : 'not authenticated');
 
 req.logout((err: any) => {
   if (err) {
     console.error("‚ùå Logout error:", err);
     return next(err);
   }
   console.log("‚úÖ Logout successful");
   res.sendStatus(200);
 });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
async function seedZodiacSignsIfNeeded() {
 try {
   log("Checking zodiac signs...");
   const zodiacSigns = await db.select().from(schema.zodiacSigns);
   
   if (zodiacSigns.length === 0) {
     log("Seeding zodiac signs...");
     const signs = [
       { name: "–û–≤–µ–Ω", startDate: "03-21", endDate: "04-19" },
       { name: "–¢–µ–ª–µ—Ü", startDate: "04-20", endDate: "05-20" },
       { name: "–ë–ª–∏–∑–Ω–µ—Ü—ã", startDate: "05-21", endDate: "06-20" },
       { name: "–†–∞–∫", startDate: "06-21", endDate: "07-22" },
       { name: "–õ–µ–≤", startDate: "07-23", endDate: "08-22" },
       { name: "–î–µ–≤–∞", startDate: "08-23", endDate: "09-22" },
       { name: "–í–µ—Å—ã", startDate: "09-23", endDate: "10-22" },
       { name: "–°–∫–æ—Ä–ø–∏–æ–Ω", startDate: "10-23", endDate: "11-21" },
       { name: "–°—Ç—Ä–µ–ª–µ—Ü", startDate: "11-22", endDate: "12-21" },
       { name: "–ö–æ–∑–µ—Ä–æ–≥", startDate: "12-22", endDate: "01-19" },
       { name: "–í–æ–¥–æ–ª–µ–π", startDate: "01-20", endDate: "02-18" },
       { name: "–†—ã–±—ã", startDate: "02-19", endDate: "03-20" },
     ];
     await db.insert(schema.zodiacSigns).values(signs);
     log("Zodiac signs seeded successfully!");
   } else {
     log(`Found ${zodiacSigns.length} zodiac signs, skipping seed`);
   }
 } catch (error) {
   log("‚ö†Ô∏è Database seeding skipped - will work once table exists");
   console.log("DB seed error (harmless):", error);
 }
}

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
let isShuttingDown = false;

(async () => {
 let server: any = null;
 
 try {
   console.log('Starting main application logic...');
   
   if (!process.env.NODE_ENV) {
     process.env.NODE_ENV = 'production';
   }
   
   log(`üîß Starting in ${process.env.NODE_ENV} mode`);
   log(`üìä Process ID: ${process.pid}`);
   log(`üìä Node version: ${process.version}`);
   log(`üîë OpenRouter API: ${process.env.OPENROUTER_API_KEY ? '–ü–û–î–ö–õ–Æ–ß–ï–ù ‚úÖ' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù ‚ùå'}`);
   
   // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è production
   if (process.env.NODE_ENV === "production") {
     console.log('Setting up static files for production...');
     const staticPath = path.join(process.cwd(), 'dist', 'public');
     
     if (fs.existsSync(staticPath)) {
       app.use(express.static(staticPath));
       console.log('Static files setup complete');
     }
   } else {
     console.log('Setting up Vite for development...');
     server = await setupVite(app, null);
     console.log('Vite setup complete');
   }
   
   // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
   console.log('Registering additional routes...');
   console.log("üî• CALLING registerRoutes NOW!");
   const httpServer = await registerRoutes(app);
   console.log("üî• registerRoutes COMPLETED!");
   if (httpServer && !server) {
     server = httpServer;
   }
   console.log('Additional routes registered');
   
   // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   console.log('Starting database seeding...');
   await seedZodiacSignsIfNeeded();
   console.log('Database seeding complete');
   
   // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
   app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
     console.error("Express Error Handler:", err);
     const status = err.status || err.statusCode || 500;
     const message = err.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
     res.status(status).json({ message });
   });
   
   // Catch-all route –¥–ª—è SPA –≤ production
   if (process.env.NODE_ENV === "production") {
     app.get('*', (req, res) => {
       if (req.path.startsWith('/api/')) {
         console.log(`‚ùå API route not found: ${req.path}`);
         return res.status(404).json({ error: `API endpoint not found: ${req.path}` });
       }
       
       const indexPath = path.join(process.cwd(), 'dist', 'public', 'index.html');
       console.log(`SPA fallback: ${req.path} -> index.html`);
       
       if (fs.existsSync(indexPath)) {
         res.sendFile(indexPath);
       } else {
         console.error('index.html not found at:', indexPath);
         res.status(404).send('Application not found');
       }
     });
   } else {
     app.get('*', (req, res) => {
       if (req.path.startsWith('/api/')) {
         console.log(`‚ùå API route not found: ${req.path}`);
         return res.status(404).json({ error: `API endpoint not found: ${req.path}` });
       }
       res.status(404).send('Not found');
     });
   }
   
   // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
   const port = parseInt(process.env.PORT || '5000');
   const host = '0.0.0.0';

   console.log(`üîç Creating server on ${host}:${port}...`);

   const expressServer = app.listen(port, host, () => {
     log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "Lunaria AI" –∑–∞–ø—É—â–µ–Ω–æ`);
     log(`üìç –ê–¥—Ä–µ—Å: http://${host}:${port}`);
     log(`‚úÖ Server is listening on ${host}:${port}`);
   });

   expressServer.on('error', (error: any) => {
     console.error('‚ùå Server error:', error);
   });

   expressServer.on('listening', () => {
     log(`‚úÖ CONFIRMED: Server listening on port ${port}`);
   });

   server = expressServer;
   
   // Graceful shutdown
   const gracefulShutdown = async (signal: string) => {
     if (isShuttingDown) {
       log(`${signal} already received, ignoring...`);
       return;
     }
     
     isShuttingDown = true;
     console.log('=== GRACEFUL SHUTDOWN START ===');
     log(`${signal} received, shutting down gracefully`);
     
     if (server) {
       server.close(async () => {
         log('HTTP server closed');
         
         try {
           if (pool && pool.end) {
             await pool.end();
             log('Database connection closed');
           }
         } catch (err) {
           console.error('Error closing database connection:', err);
         }
         
         log('üëã Graceful shutdown complete');
         process.exit(0);
       });
       
       setTimeout(() => {
         log('‚ö†Ô∏è Forcing shutdown after 30s');
         process.exit(1);
       }, 30000);
     } else {
       log('No server to close, exiting immediately');
       process.exit(0);
     }
   };
   
   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
   process.removeAllListeners('SIGTERM');
   process.removeAllListeners('SIGINT');
   
   process.on('SIGTERM', () => {
     console.log('=== SIGTERM RECEIVED ===');
     gracefulShutdown('SIGTERM');
   });
   
   process.on('SIGINT', () => {
     console.log('=== SIGINT RECEIVED ===');
     gracefulShutdown('SIGINT');
   });
   
   process.on('exit', (code) => {
     log(`üì§ Process exiting with code: ${code}`);
   });
   
   // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
   setInterval(() => {
     const memUsage = process.memoryUsage();
     const formatBytes = (bytes: number) => Math.round(bytes / 1024 / 1024);
     
     log(`Memory: RSS ${formatBytes(memUsage.rss)}MB, Heap ${formatBytes(memUsage.heapUsed)}/${formatBytes(memUsage.heapTotal)}MB`);
     
     if (memUsage.heapUsed > 1024 * 1024 * 1024) {
       log('‚ö†Ô∏è High memory usage detected!');
     }
   }, 30000);
   
   console.log('Application startup complete!');
   
 } catch (error) {
   console.error("‚ùå Error starting application:", error);
   if (typeof error === "object" && error !== null && "stack" in error) {
     console.error("Stack trace:", (error as { stack?: string }).stack);
   }
   log(`‚ùå Fatal error starting application: ${error}`);
   process.exit(1);
 }
})();

export default app;