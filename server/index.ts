import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { format } from "date-fns";
import { db } from "./db";
import * as schema from "@shared/schema";
import { pool } from "./db";

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  log(`${req.method} ${req.path} from ${req.ip || 'unknown'}`);
  next();
});

// HEALTH CHECK –†–û–£–¢–´ - –î–û –í–°–ï–ì–û –û–°–¢–ê–õ–¨–ù–û–ì–û
app.get('/health', (req: Request, res: Response) => {
  res.status(200).json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    app: 'Lunaria AI',
    port: process.env.PORT || 5000,
    env: process.env.NODE_ENV || 'development',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    urls: {
      health: '/health',
      api: '/api'
    }
  });
});

app.get('/', (req: Request, res: Response) => {
  res.status(200).json({ 
    message: 'Lunaria AI is running',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        // –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const safeResponseClone = { ...capturedJsonResponse };
        if (safeResponseClone.password) safeResponseClone.password = "[HIDDEN]";
        
        logLine += ` :: ${JSON.stringify(safeResponseClone)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "‚Ä¶";
      }

      log(logLine);
    }
  });

  next();
});

// –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
async function seedZodiacSignsIfNeeded() {
  try {
    log("Checking zodiac signs...");
    
    // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    const zodiacSigns = await db.select().from(schema.zodiacSigns);
    
    if (zodiacSigns.length === 0) {
      log("Seeding zodiac signs...");
      
      const signs = [
        { name: "–û–≤–µ–Ω", startDate: "03-21", endDate: "04-19" },
        { name: "–¢–µ–ª–µ—Ü", startDate: "04-20", endDate: "05-20" },
        { name: "–ë–ª–∏–∑–Ω–µ—Ü—ã", startDate: "05-21", endDate: "06-20" },
        { name: "–†–∞–∫", startDate: "06-21", endDate: "07-22" },
        { name: "–õ–µ–≤", startDate: "07-23", endDate: "08-22" },
        { name: "–î–µ–≤–∞", startDate: "08-23", endDate: "09-22" },
        { name: "–í–µ—Å—ã", startDate: "09-23", endDate: "10-22" },
        { name: "–°–∫–æ—Ä–ø–∏–æ–Ω", startDate: "10-23", endDate: "11-21" },
        { name: "–°—Ç—Ä–µ–ª–µ—Ü", startDate: "11-22", endDate: "12-21" },
        { name: "–ö–æ–∑–µ—Ä–æ–≥", startDate: "12-22", endDate: "01-19" },
        { name: "–í–æ–¥–æ–ª–µ–π", startDate: "01-20", endDate: "02-18" },
        { name: "–†—ã–±—ã", startDate: "02-19", endDate: "03-20" },
      ];
      
      await db.insert(schema.zodiacSigns).values(signs);
      log("Zodiac signs seeded successfully!");
    } else {
      log(`Found ${zodiacSigns.length} zodiac signs, skipping seed`);
    }
  } catch (error) {
    log("‚ö†Ô∏è  Database seeding skipped - will work once table exists");
    // –ù–ï –õ–û–ì–ò–†–£–ï–ú –û–®–ò–ë–ö–£ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  }
}

(async () => {
  let server: any = null;
  
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π NODE_ENV –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    if (!process.env.NODE_ENV) {
      process.env.NODE_ENV = 'production';
    }
    
    log(`üîß Starting in ${process.env.NODE_ENV} mode`);
    log(`üìä Process ID: ${process.pid}`);
    log(`üìä Node version: ${process.version}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vite –î–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if (process.env.NODE_ENV === "development") {
      server = await setupVite(app, null);
    } else {
      // –î–ª—è production —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
      serveStatic(app);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vite
    await registerRoutes(app);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await seedZodiacSignsIfNeeded();
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú)
    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
      console.error("Error:", err);
      const status = err.status || err.statusCode || 500;
      const message = err.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
      
      res.status(status).json({ message });
    });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const port = parseInt(process.env.PORT || '5000');
    const host = '0.0.0.0'; // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û 0.0.0.0 –¥–ª—è Docker
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤ production), —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!server) {
      server = app.listen(port, host, () => {
        log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "Lunaria AI" –∑–∞–ø—É—â–µ–Ω–æ`);
        log(`üìç –ê–¥—Ä–µ—Å: http://${host}:${port}`);
        log(`üè• Health check: http://${host}:${port}/health`);
        log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV}`);
        log(`üìä PID: ${process.pid}`);
        log(`üìä –ü–∞–º—è—Ç—å: ${JSON.stringify(process.memoryUsage(), null, 2)}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º internal health check
        setTimeout(async () => {
          try {
            log("üîç Testing internal health check...");
            // –ï—Å–ª–∏ –µ—Å—Ç—å fetch, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (typeof fetch !== 'undefined') {
              const response = await fetch(`http://localhost:${port}/health`);
              const data = await response.json();
              log(`‚úÖ Internal health check OK: ${JSON.stringify(data)}`);
            } else {
              log("‚ÑπÔ∏è  Skipping internal health check (fetch not available)");
            }
          } catch (error) {
            log(`‚ùå Internal health check failed: ${error}`);
          }
          
          log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
        }, 3000);
      });
      
      // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
      server.on('error', (error: any) => {
        console.error('‚ùå Server error:', error);
        log(`‚ùå Server error: ${error.message}`);
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å
      server.on('listening', () => {
        log(`‚úÖ Server is listening on ${host}:${port}`);
      });
      
    } else {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "Lunaria AI" –∑–∞–ø—É—â–µ–Ω–æ`);
      log(`üìç –ê–¥—Ä–µ—Å: http://${host}:${port}`);
      log(`üè• Health check: http://${host}:${port}/health`);
      log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV}`);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ª—É—á—à–µ–π –ª–æ–≥–∏–∫–æ–π
    const gracefulShutdown = async (signal: string) => {
      log(`${signal} received, shutting down gracefully`);
      log(`Uptime: ${process.uptime()}s`);
      log(`Memory usage: ${JSON.stringify(process.memoryUsage())}`);
      
      if (server) {
        // –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        server.close(async () => {
          log('HTTP server closed');
          
          try {
            if (pool && pool.end) {
              await pool.end();
              log('Database connection closed');
            }
          } catch (err) {
            console.error('Error closing database connection:', err);
          }
          
          log('üëã Graceful shutdown complete');
          process.exit(0);
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è)
        setTimeout(() => {
          log('‚ö†Ô∏è  Forcing shutdown after 15s');
          process.exit(1);
        }, 15000);
      } else {
        log('No server to close, exiting immediately');
        process.exit(0);
      }
    };
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      console.error('Unhandled Rejection at:', promise, 'reason:', reason);
      log(`‚ùå Unhandled Rejection: ${reason}`);
    });
    
    process.on('uncaughtException', (error) => {
      console.error('Uncaught Exception:', error);
      log(`‚ùå Uncaught Exception: ${error.message}`);
      // –ù–ï –≤—ã—Ö–æ–¥–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –¥–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(() => process.exit(1), 100);
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('exit', (code) => {
      log(`üì§ Process exiting with code: ${code}`);
    });
    
  } catch (error) {
    console.error("‚ùå Error starting application:", error);
    log(`‚ùå Fatal error starting application: ${error}`);
    process.exit(1);
  }
})();

// Export app for testing purposes
export default app;