import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupAuth, hashPassword } from "./auth";
import { getZodiacSign, getCompatibleSigns, calculateCompatibility } from "../client/src/lib/zodiac";
import { db } from "./db";
import { apiUsage, horoscopes, friends, User, users } from "@shared/schema";
import { eq, and, desc, asc } from "drizzle-orm";
import { generateHoroscope, generateTarotReading, generateNatalChartAnalysis, generateCompatibilityAnalysis } from "./openai";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { spawn } from "child_process";
import path from "path";

console.log("üö®üö®üö® ROUTES.TS FILE LOADED! TIMESTAMP:", new Date().toISOString());

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const isAuthenticated = (req: Request, res: Response, next: Function) => {
  if (req.isAuthenticated()) {
    return next();
  }
  res.status(401).send("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const isAdmin = (req: Request, res: Response, next: Function) => {
  if (req.isAuthenticated() && (req.user as User).role === "admin") {
    return next();
  }
  res.status(403).send("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
const getRandomNumbers = (count: number, min: number, max: number): number[] => {
  const numbers: number[] = [];
  for (let i = 0; i < count; i++) {
    numbers.push(Math.floor(Math.random() * (max - min + 1)) + min);
  }
  return numbers;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Python —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Python —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ stdin
async function callPythonNatalChart(userData: {
  user_name: string;
  birth_year: number;
  birth_month: number;
  birth_day: number;
  birth_hour: number;
  birth_minute: number;
  birth_city: string;
  birth_country_code: string;
}): Promise<{ svg_name: string | null; ai_prompt: string | null; success: boolean; error?: string }> {
  return new Promise((resolve) => {
    console.log("üêç Starting Python natal chart calculation...", userData);
    
    const scriptPath = path.join(__dirname, "utils", "natal-chart-calculator-NEW.py");
    console.log("üêç Script path:", scriptPath);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º JSON –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
    const pythonProcess = spawn("python3", [scriptPath], {
      stdio: ["pipe", "pipe", "pipe"],
      env: {
        ...process.env,
        PYTHONIOENCODING: "utf-8",
        PYTHONUTF8: "1",
        LANG: "en_US.UTF-8",
        LC_ALL: "en_US.UTF-8"
      },
    });

    console.log("üêç Python process PID:", pythonProcess.pid);
    console.log("üêç Python command:", "python3", scriptPath);

    let outputData = "";
    let errorData = "";

    pythonProcess.stdout.on("data", (data) => {
      outputData += data.toString("utf8");
    });

    pythonProcess.stderr.on("data", (data) => {
      const errorMessage = data.toString("utf8");
      console.log("üêç Python stderr:", errorMessage);
      errorData += errorMessage;
    });

    pythonProcess.on("close", (code) => {
      console.log("üêç Python process closed with code:", code);
      console.log("üêç Python stdout:", outputData);
      
      if (code !== 0) {
        console.error("üêç Python process failed:", errorData);
        resolve({
          svg_name: null,
          ai_prompt: null,
          success: false,
          error: `Python script failed with code ${code}: ${errorData}`
        });
        return;
      }

      try {
        const result = JSON.parse(outputData);
        console.log("üêç Python result:", result);
        resolve(result);
      } catch (parseError) {
        console.error("üêç Failed to parse Python output:", parseError);
        resolve({
          svg_name: null,
          ai_prompt: null,
          success: false,
          error: `Failed to parse Python output: ${parseError}`
        });
      }
    });

    pythonProcess.on("error", (error) => {
      console.error("üêç Python process error:", error);
      resolve({
        svg_name: null,
        ai_prompt: null,
        success: false,
        error: `Python process error: ${error.message}`
      });
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ stdin –±–µ–∑ escape-—Å–∏–º–≤–æ–ª–æ–≤
    try {
      const inputJson = JSON.stringify(userData);
      console.log("üêç Sending JSON to Python stdin:", inputJson.substring(0, 200));
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º JSON –≤ stdin –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      pythonProcess.stdin.write(inputJson, 'utf8');
      pythonProcess.stdin.end();
      
      console.log("üêç JSON sent to Python successfully");
    } catch (writeError) {
      console.error("üêç Failed to write to Python stdin:", writeError);
      resolve({
        svg_name: null,
        ai_prompt: null,
        success: false,
        error: `Failed to write to Python: ${writeError}`
      });
    }
  });
}



// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
export async function registerRoutes(app: Express): Promise<Server> {
  console.log("üöÄ REGISTERING HOROSCOPE REFRESH ROUTE!");
  // –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£ –í –°–ê–ú–û–ï –ù–ê–ß–ê–õ–û:
  app.get("/api/test-routes-work", (req, res) => {
    console.log("‚úÖ ROUTES FROM routes.ts WORK!");
    res.json({ message: "Routes from routes.ts are working!" });
  });

    // –î–û–ë–ê–í–¨ –≠–¢–ò –°–¢–†–û–ö–ò:
  console.log("üî• TESTING ROUTE REGISTRATION!");
  console.log("üî• App object type:", typeof app);
  console.log("üî• App methods:", Object.getOwnPropertyNames(app));
  // üöÄüöÄüöÄ –ö–†–ò–¢–ò–ß–ù–´–ô –õ–û–ì - –î–û–õ–ñ–ï–ù –ü–û–Ø–í–ò–¢–¨–°–Ø –í –ö–û–ù–°–û–õ–ò!
  console.log("üöÄüöÄüöÄ REGISTERING ROUTES - COMPATIBILITY WILL BE ADDED!");
  console.log("üöÄüöÄüöÄ Routes.ts loaded at:", new Date().toISOString());

  // üß™ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ - –î–û–ë–ê–í–ò–¢–¨ –ü–ï–†–í–´–ú!
  app.get("/api/test-simple", (req, res) => {
    console.log("üß™ SIMPLE TEST ENDPOINT HIT!");
    res.json({ message: "Simple test works!", time: new Date().toISOString() });
  });

  app.post("/api/test-simple", (req, res) => {
    console.log("üß™ SIMPLE TEST POST ENDPOINT HIT!");
    console.log("üß™ Body:", req.body);
    res.json({ message: "Simple POST test works!", time: new Date().toISOString() });
  });
  
  // üß™ –¢–ï–°–¢–û–í–´–ô ENDPOINT - –¥–æ–±–∞–≤–ª—è–µ–º –ü–ï–†–í–´–ú!
  app.post("/api/test-compat", isAuthenticated, async (req, res) => {
    console.log("üß™üß™üß™ TEST COMPAT ENDPOINT HIT!");
    console.log("üß™ Request body:", JSON.stringify(req.body, null, 2));
    res.json({ message: "Test compatibility endpoint works!", timestamp: new Date().toISOString() });
  });

  // üö® –¢–ï–°–¢ –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò!
  app.post("/api/test-no-auth", async (req, res) => {
    console.log("üö® NO-AUTH TEST ENDPOINT HIT!");
    console.log("üö® Body:", JSON.stringify(req.body, null, 2));
    res.json({ message: "No-auth test works!", data: req.body, timestamp: new Date().toISOString() });
  });

  // API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  app.get("/api/admin/users", isAdmin, async (req, res) => {
    try {
      const allUsers = await db.query.users.findMany({
        orderBy: (users, { desc }) => [desc(users.createdAt)]
      });
      
      res.json(allUsers);
    } catch (error) {
      console.error("Error getting users:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }
  });
  
  app.get("/api/admin/api-usage", isAdmin, async (req, res) => {
    try {
      const { timeframe = "week" } = req.query;
      
      const currentDate = new Date();
      let fromDate = new Date();
      
      if (timeframe === "day") {
        fromDate.setDate(currentDate.getDate() - 1);
      } else if (timeframe === "week") {
        fromDate.setDate(currentDate.getDate() - 7);
      } else if (timeframe === "month") {
        fromDate.setMonth(currentDate.getMonth() - 1);
      } else if (timeframe === "year") {
        fromDate.setFullYear(currentDate.getFullYear() - 1);
      }
      
      const apiUsageData = await db.query.apiUsage.findMany({
        where: (apiUsage, { gte }) => gte(apiUsage.createdAt, fromDate),
        orderBy: (apiUsage, { asc }) => [asc(apiUsage.createdAt)]
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º
      const dailyUsageMap = new Map();
      const endpointStatsMap = new Map();
      const hourlyUsageMap = new Map();
      
      let totalCalls = 0;
      let totalTokensIn = 0;
      let totalTokensOut = 0;
      
      apiUsageData.forEach(usage => {
        totalCalls++;
        totalTokensIn += usage.tokensIn || 0;
        totalTokensOut += usage.tokensOut || 0;
        
        const dateKey = format(new Date(usage.createdAt), 'd MMM', { locale: ru });
        if (!dailyUsageMap.has(dateKey)) {
          dailyUsageMap.set(dateKey, { date: dateKey, calls: 0 });
        }
        dailyUsageMap.get(dateKey).calls++;
        
        if (!endpointStatsMap.has(usage.requestSource)) {
          endpointStatsMap.set(usage.requestSource, { 
            endpoint: usage.requestSource, 
            calls: 0, 
            tokensIn: 0, 
            tokensOut: 0 
          });
        }
        const endpointStat = endpointStatsMap.get(usage.requestSource);
        endpointStat.calls++;
        endpointStat.tokensIn += usage.tokensIn;
        endpointStat.tokensOut += usage.tokensOut;
        
        const hourKey = format(new Date(usage.createdAt), 'HH:00');
        if (!hourlyUsageMap.has(hourKey)) {
          hourlyUsageMap.set(hourKey, { hour: hourKey, calls: 0 });
        }
        hourlyUsageMap.get(hourKey).calls++;
      });
      
      const endpointStats = Array.from(endpointStatsMap.values())
        .sort((a, b) => b.calls - a.calls);
      
      const topEndpoint = endpointStats.length > 0 ? endpointStats[0].endpoint : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      const avgResponseTime = Math.round((totalTokensOut / Math.max(1, totalCalls)) * 1.5);
      
      const yesterdayDate = new Date();
      yesterdayDate.setDate(currentDate.getDate() - 1);
      const yesterdayKey = format(yesterdayDate, 'd MMM', { locale: ru });
      const yesterdayCalls = dailyUsageMap.has(yesterdayKey) ? dailyUsageMap.get(yesterdayKey).calls : 0;
      
      const result = {
        totalCalls,
        totalCallsYesterday: yesterdayCalls,
        topEndpoint,
        averageResponseTime: avgResponseTime,
        dailyUsage: Array.from(dailyUsageMap.values()),
        endpointStats,
        hourlyUsage: Array.from(hourlyUsageMap.values())
      };
      
      res.json(result);
    } catch (error) {
      console.error("Error getting API usage:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API");
    }
  });
  
  app.post("/api/admin/set-admin-role", isAdmin, async (req, res) => {
    try {
      const { userId } = req.body;
      
      await db.update(users)
        .set({ role: "admin" })
        .where(eq(users.id, parseInt(userId)));
      
      res.json({ success: true });
    } catch (error) {
      console.error("Error setting admin role:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    }
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏
  app.get("/api/friends", isAuthenticated, async (req, res) => {
    try {
      const userFriends = await storage.getFriendsByUserId(req.user!.id);
      res.json(userFriends);
    } catch (error) {
      console.error("Error fetching friends:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π");
    }
  });

  app.post("/api/friends", isAuthenticated, async (req, res) => {
    try {
      const { birthDate, ...friendData } = req.body;
      
      const birthDateObj = typeof birthDate === 'string' ? new Date(birthDate) : birthDate;
      const zodiacSignData = getZodiacSign(new Date(birthDateObj));
      
      const newFriend = await storage.createFriend({
        name: friendData.name,
        gender: friendData.gender,
        email: friendData.email || '',
        userId: req.user!.id,
        birthDate: birthDateObj.toISOString().split('T')[0],
        zodiacSign: zodiacSignData.name,
      });
      
      res.status(201).json(newFriend);
    } catch (error) {
      console.error("Error creating friend:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞");
    }
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  app.get("/api/horoscope", async (req, res) => {
    try {
      const { period = "today", category = "general" } = req.query;
      const testUserId = 1;
      const testZodiacSign = "capricorn";

      const existingHoroscope = await storage.getActualHoroscope(
        testUserId, 
        period as string, 
        category as string
      );

      if (existingHoroscope) {
        return res.json({
          content: existingHoroscope.content,
          luckyNumbers: existingHoroscope.luckyNumbers,
          compatibleSigns: existingHoroscope.compatibleSigns,
          lastUpdated: format(new Date(existingHoroscope.createdAt), 'd MMMM', { locale: ru })
        });
      }

      const content = await generateHoroscope(
        testUserId, 
        testZodiacSign, 
        period as string, 
        category as string
      );
      
      const luckyNumbers = getRandomNumbers(3, 1, 99);
      const compatibleSigns = getCompatibleSigns(testZodiacSign);
      
      const newHoroscope = await storage.createHoroscope({
        userId: testUserId,
        period: period as string,
        category: category as string,
        content,
        luckyNumbers,
        compatibleSigns,
        isActual: true
      });
      
      res.json({
        content: newHoroscope.content,
        luckyNumbers: newHoroscope.luckyNumbers,
        compatibleSigns: newHoroscope.compatibleSigns,
        lastUpdated: "—Å–µ–≥–æ–¥–Ω—è"
      });
    } catch (error) {
      console.error("Error getting horoscope:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞");
    }
  });

  app.post("/api/horoscope/refresh", async (req, res) => {
    console.log("üî•üî•üî• REFRESH ENDPOINT HIT - NEW VERSION!");
    console.log("üî• Body:", JSON.stringify(req.body, null, 2));
    console.log("üî• Headers:", JSON.stringify(req.headers, null, 2));
    console.log("üî• User agent:", req.get('User-Agent'));
    console.log("üî• Content-Type:", req.get('Content-Type'));
    
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const content = await generateHoroscope(
        1, 
        "capricorn", 
        "today", 
        "general"
      );
      
      console.log("‚úÖ Generated content:", content.substring(0, 100) + "...");
      
      res.json({
          content: content,
          luckyNumbers: [7, 14, 21],
          compatibleSigns: ["–î–µ–≤–∞", "–¢–µ–ª–µ—Ü", "–†—ã–±—ã"],
          lastUpdated: "—Å–µ–π—á–∞—Å"
      });
    } catch (error) {
      console.error("‚ùå Error:", error);
      res.status(500).json({ error: (error as Error).message });
    }
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ
  app.post("/api/tarot", isAuthenticated, async (req, res) => {
    try {
      console.log("üîÆ TAROT API ENDPOINT HIT!");
      console.log("üîÆ Request body:", JSON.stringify(req.body, null, 2));
      
      const { question, cardCount, category, preset } = req.body;
      
      // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
      if (!question || !question.trim()) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é" });
      }
      
      if (!cardCount || (cardCount !== 3 && cardCount !== 5)) {
        return res.status(400).json({ error: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∏–ª–∏ 5" });
      }
      
      if (!category) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" });
      }
      
      if (!preset) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∞" });
      }
      
      console.log(`üîÆ Validated params: ${cardCount} cards, category: ${category}, preset: ${preset}`);
      
      // ‚úÖ –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í –ü–û–î–ü–ò–°–ö–ò
      const subscriptionType = req.user!.subscriptionType;
      if (subscriptionType === "free") {
        if (cardCount > 3) {
          return res.status(403).json({ 
            error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∏–∑ 5 –∫–∞—Ä—Ç",
            code: "SUBSCRIPTION_REQUIRED" 
          });
        }
        
        const dailyUsage = await storage.getTodayApiUsageCount(req.user!.id, "tarot");
        if (dailyUsage >= 3) {
          return res.status(403).json({ 
            error: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
            code: "DAILY_LIMIT_REACHED"
          });
        }
      } else if (subscriptionType === "basic") {
        const monthlyUsage = await storage.getMonthlyApiUsageCount(req.user!.id, "tarot");
        const limit = cardCount === 3 ? 10 : 5;
        if (monthlyUsage >= limit) {
          return res.status(403).json({ 
            error: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç ${limit} —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∏–∑ ${cardCount} –∫–∞—Ä—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏`,
            code: "MONTHLY_LIMIT_REACHED"
          });
        }
      }
      
      console.log(`‚úÖ Subscription check passed for ${subscriptionType} user`);
      
      // ‚úÖ –ì–ï–ù–ï–†–ò–†–£–ï–ú –†–ê–°–ö–õ–ê–î –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò
      const readingSections = await generateTarotReading(
        req.user!.id, 
        question.trim(), 
        cardCount, 
        category,
        preset
      );

      console.log(`‚úÖ Tarot reading generated successfully`);
      console.log(`üîç Result structure:`, {
        readingLength: readingSections?.length,
        isArray: Array.isArray(readingSections)
      });

      // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê
      if (!readingSections || !Array.isArray(readingSections)) {
        console.error("‚ùå Invalid reading structure - not an array");
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–∞—Å–∫–ª–∞–¥–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" });
      }
      
      const expectedSections = cardCount + 1; // –∫–∞—Ä—Ç—ã + –æ–±—â–∏–π —Å–æ–≤–µ—Ç
      if (readingSections.length !== expectedSections) {
        console.warn(`‚ö†Ô∏è Wrong section count: got ${readingSections.length}, expected ${expectedSections}`);
      }

      // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
      const isValidReadingStructure = readingSections.every(section => 
        section && 
        typeof section === 'object' &&
        section.title && typeof section.title === 'string' &&
        section.content && typeof section.content === 'string' &&
        section.content.length > 10
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∫–∞—Ä—Ç –∏–∑ —Å–µ–∫—Ü–∏–π (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é - –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
      const cardSections = readingSections.slice(0, cardCount);
      const cards = cardSections.map(section => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ø–æ—Å–ª–µ –¥–µ—Ñ–∏—Å–∞)
        const cardName = section.title.includes(' - ') ? 
          section.title.split(' - ')[1] : 
          `–ö–∞—Ä—Ç–∞ ${cardSections.indexOf(section) + 1}`;
        return { name: cardName };
      });

      // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–†–£–ö–¢–£–†–£ –ö–ê–†–¢
      const isValidCardsStructure = cards.every(card =>
        card &&
        typeof card === 'object' &&
        card.name && typeof card.name === 'string'
      );
      
      if (!isValidReadingStructure) {
        console.error("‚ùå Invalid reading structure - sections invalid");
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–∞—Å–∫–ª–∞–¥–∞ - –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ reading" });
      }
      
      if (!isValidCardsStructure) {
        console.error("‚ùå Invalid cards structure - cards invalid");
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–∞—Å–∫–ª–∞–¥–∞ - –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ cards" });
      }
      
      // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï
      const response = {
        reading: readingSections,
        cards: cards,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        meta: {
          requestedCards: cardCount,
          actualReadingSections: readingSections.length,
          actualCardsCount: cards.length,
          isValidCount: readingSections.length === expectedSections && cards.length === cardCount,
          category,
          preset
        }
      };
      
      console.log("‚úÖ Sending response with structure:", {
        readingSections: response.reading.length,
        cardsCount: response.cards.length,
        isValid: response.meta.isValidCount
      });
      
      res.json(response);
      
    } catch (error) {
      console.error("‚ùå Error generating tarot reading:", error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (error instanceof Error) {
        if (error.message.includes("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")) {
          return res.status(429).json({ error: error.message, code: "RATE_LIMIT" });
        } else if (error.message.includes("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")) {
          return res.status(401).json({ error: error.message, code: "AUTH_ERROR" });
        } else if (error.message.includes("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")) {
          return res.status(503).json({ error: error.message, code: "SERVICE_UNAVAILABLE" });
        }
      }
      
      res.status(500).json({ 
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –∫–∞—Ä—Ç",
        code: "INTERNAL_ERROR"
      });
    }
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
  app.post("/api/natal-chart", isAuthenticated, async (req, res) => {
    try {
      console.log("üåü Natal chart API called");
      const { type, name, birthDate, birthTime, birthPlace } = req.body;
      
      let userData: any = {};
      let analysisName: string = "";
      let analysisBirthDate: string = "";
      let analysisBirthTime: string = "";
      let analysisBirthPlace: string = "";
      
      if (type === "self") {
        analysisName = req.user!.name;
        analysisBirthDate = new Date(req.user!.birthDate).toISOString().split('T')[0];
        analysisBirthTime = req.user!.birthTime || "12:00";
        analysisBirthPlace = req.user!.birthPlace || "–ú–æ—Å–∫–≤–∞";
        
        const userBirthDate = new Date(req.user!.birthDate);
        userData = {
          user_name: req.user!.name,
          birth_year: userBirthDate.getFullYear(),
          birth_month: userBirthDate.getMonth() + 1,
          birth_day: userBirthDate.getDate(),
          birth_hour: parseInt((req.user!.birthTime || "12:00").split(":")[0]),
          birth_minute: parseInt((req.user!.birthTime || "12:00").split(":")[1]),
          birth_city: req.user!.birthPlace || "–ú–æ—Å–∫–≤–∞",
          birth_country_code: "RU"
        };
      } else {
        analysisName = name;
        analysisBirthDate = new Date(birthDate).toISOString().split('T')[0];
        analysisBirthTime = birthTime || "12:00";
        analysisBirthPlace = birthPlace || "–ú–æ—Å–∫–≤–∞";
        
        const customBirthDate = new Date(birthDate);
        userData = {
          user_name: name,
          birth_year: customBirthDate.getFullYear(),
          birth_month: customBirthDate.getMonth() + 1,
          birth_day: customBirthDate.getDate(),
          birth_hour: parseInt((birthTime || "12:00").split(":")[0]),
          birth_minute: parseInt((birthTime || "12:00").split(":")[1]),
          birth_city: birthPlace || "–ú–æ—Å–∫–≤–∞",
          birth_country_code: "RU"
        };
      }
      
      console.log("üåü Prepared user data for Python:", userData);
      
      const pythonResult = await callPythonNatalChart(userData);
      console.log("üåü Python result:", pythonResult);
      
      let analysis: Array<{title: string, content: string}> = [];
      try {
        const aiResult = await generateNatalChartAnalysis(
          req.user!.id,
          analysisName,
          analysisBirthDate,
          analysisBirthTime,
          analysisBirthPlace
        );
        analysis = aiResult.analysis;
        console.log("üåü AI analysis generated");
      } catch (aiError) {
        console.error("üåü AI analysis failed:", aiError);
        if (pythonResult.ai_prompt) {
          analysis = [{
            title: "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã",
            content: pythonResult.ai_prompt
          }];
        }
      }
      
      const response = {
        analysis,
        chartData: {
          name: analysisName,
          birthDate: analysisBirthDate,
          birthTime: analysisBirthTime,
          birthPlace: analysisBirthPlace
        },
        success: pythonResult.success,
        type: type,
        svgFileName: pythonResult.svg_name,
        pythonSuccess: pythonResult.success,
        pythonError: pythonResult.error || null
      };
      
      console.log("üåü Final response:", {
        analysisLength: analysis.length,
        svgFileName: pythonResult.svg_name,
        pythonSuccess: pythonResult.success
      });
      
      res.json(response);
      
    } catch (error) {
      console.error("üåü Error generating natal chart:", error);
      res.status(500).json({
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã",
        success: false,
        pythonSuccess: false
      });
    }
  });

  // üî•üî•üî• API –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø!
  app.post("/api/compatibility", isAuthenticated, async (req, res) => {
    console.log("üîçüîçüîç COMPATIBILITY ENDPOINT HIT!!!");
    console.log("üîç Timestamp:", new Date().toISOString());
    console.log("üîç User ID:", req.user?.id);
    console.log("üîç Request body:", JSON.stringify(req.body, null, 2));
    
    try {
      const { type, friendId, birthDate, name } = req.body;
      
      console.log("üîç Parsed values:", { type, friendId, birthDate, name });
      
      const user = req.user!;
      let partnerData: any = {};
      
      if (type === "friend") {
        console.log("üîç Processing friend compatibility, friendId:", friendId);
        const friend = await storage.getFriendById(parseInt(friendId));
        if (!friend) {
          console.log("‚ùå Friend not found:", friendId);
          return res.status(404).send("–î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        console.log("‚úÖ Friend found:", friend.name);
        partnerData = {
          name: friend.name,
          zodiacSign: friend.zodiacSign,
          birthDate: new Date(friend.birthDate).toISOString().split('T')[0]
        };
      } else {
        console.log("üîç Processing custom partner compatibility");
        const birthDateObj = new Date(birthDate);
        const zodiacSign = getZodiacSign(birthDateObj);
        
        console.log("üîç Partner zodiac sign:", zodiacSign.name);
        
        partnerData = {
          name: name || "–ü–∞—Ä—Ç–Ω–µ—Ä",
          zodiacSign: zodiacSign.name,
          birthDate: birthDateObj.toISOString().split('T')[0]
        };
      }
      
      console.log("üîç Final partner data:", partnerData);
      
      // Calculate compatibility score
      const compatibilityScore = calculateCompatibility(user.zodiacSign, partnerData.zodiacSign);
      console.log("üîç Compatibility score:", compatibilityScore);
      
      // Generate analysis
      console.log("üîç Generating compatibility analysis...");
      const analysis = await generateCompatibilityAnalysis(
        user.id,
        {
          name: user.name,
          zodiacSign: user.zodiacSign,
          birthDate: new Date(user.birthDate).toISOString().split('T')[0]
        },
        partnerData,
        compatibilityScore
      );
      
      console.log("‚úÖ Analysis generated successfully");
      
      const response = {
        compatibilityScore,
        analysis,
        partnerData
      };
      
      console.log("üîç Sending response:", { 
        compatibilityScore, 
        analysisLength: analysis.length,
        partnerName: partnerData.name 
      });
      
      res.json(response);
    } catch (error) {
      console.error("‚ùå Error calculating compatibility:", error);
      console.error("‚ùå Error stack:", error instanceof Error ? error.stack : "No stack");
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏");
    }
  });

  // API –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
  app.post("/api/subscription", isAuthenticated, async (req, res) => {
    try {
      const { planType } = req.body;
      
      const updatedUser = await storage.updateUserSubscription(req.user!.id, planType);
      
      res.json(updatedUser);
    } catch (error) {
      console.error("Error updating subscription:", error);
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
    }
  });

  console.log("üöÄüöÄüöÄ ALL ROUTES REGISTERED SUCCESSFULLY!");
  console.log("üöÄüöÄüöÄ Total routes registered at:", new Date().toISOString());

  const httpServer = createServer(app);
  return httpServer;
}