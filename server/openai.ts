
import OpenAI from "openai";
import { InsertApiUsage } from "../shared/schema";
import { storage } from "./storage";

// –ü—Ä–æ—Å—Ç–æ–π OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è production (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)
const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 30000,
  maxRetries: 3,
  defaultHeaders: {
    'User-Agent': 'Lunaria-AI/1.0'
  }
});

// Track OpenAI API usage with a database entry
async function trackApiUsage(userId: number, requestSource: string, requestText: string, responseText: string, tokensIn: number, tokensOut: number) {
  try {
    const apiUsage: InsertApiUsage = {
      userId,
      requestSource,
      requestText,
      responseText,
      tokensIn,
      tokensOut,
    };
    
    await storage.createApiUsage(apiUsage);
  } catch (error) {
    console.error('‚ùå Failed to track API usage:', error);
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
  }
}

// Generate horoscope text
export async function generateHoroscope(userId: number, zodiacSign: string, period: string, category: string): Promise<string> {
  try {
    console.log(`üîÆ Generating horoscope for ${zodiacSign} (${period}, ${category})`);
    
    const prompt = `–°–æ–∑–¥–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ ${zodiacSign} –Ω–∞ –ø–µ—Ä–∏–æ–¥ "${period}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}". 
    –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. 
    –ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏ –¥—É—Ö–æ–≤–Ω—ã–π —Ç–æ–Ω. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 300,
      temperature: 0.8,
    });

    const content = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    
    console.log(`‚úÖ Horoscope generated successfully for ${zodiacSign}`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      `horoscope/${period}/${category}`,
      prompt,
      content,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || content.length
    );
    
    return content;
  } catch (error: any) {
    console.error("‚ùå Error generating horoscope:", error);
    
    if (error.status === 429) {
      throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.status === 401) {
      throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
    } else if (error.status >= 500) {
      throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// Generate tarot reading
export async function generateTarotReading(userId: number, question: string, cardCount: number, category: string): Promise<string> {
  try {
    console.log(`üîÆ Generating tarot reading: ${cardCount} cards, category: ${category}`);
    
    const prompt = `–ü—Ä–æ–∏–∑–≤–µ–¥–∏ —á—Ç–µ–Ω–∏–µ ${cardCount} –∫–∞—Ä—Ç –¢–∞—Ä–æ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
    –¢–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞: ${category}. 
    –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${question}". 
    –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–∞—Ä—Ç —Å–æ —Å–º—ã—Å–ª–æ–º –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –∏ –æ–±—â–∏–º –≤—ã–≤–æ–¥–æ–º. 
    –ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏ –¥—É—Ö–æ–≤–Ω—ã–π —Ç–æ–Ω. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 800,
      temperature: 0.8,
    });

    const content = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    
    console.log(`‚úÖ Tarot reading generated successfully`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      `tarot/${cardCount}/${category}`,
      prompt,
      content,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || content.length
    );
    
    return content;
  } catch (error: any) {
    console.error("‚ùå Error generating tarot reading:", error);
    
    if (error.status === 429) {
      throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.status === 401) {
      throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
    } else if (error.status >= 500) {
      throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// Generate natal chart analysis
export async function generateNatalChartAnalysis(userId: number, name: string, birthDate: string, birthTime?: string, birthPlace?: string): Promise<string> {
  try {
    console.log(`üîÆ Generating natal chart analysis for ${name}`);
    
    const prompt = `–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–µ–º ${name}, 
    —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${birthDate}${birthTime ? ` –≤ ${birthTime}` : ""}${birthPlace ? ` –≤ ${birthPlace}` : ""}. 
    –í–∫–ª—é—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–ª–∞–Ω–µ—Ç, –¥–æ–º–∞—Ö, –∞—Å–ø–µ–∫—Ç–∞—Ö –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º–∞—Ö –∂–∏–∑–Ω–∏. 
    –ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏ –¥—É—Ö–æ–≤–Ω—ã–π —Ç–æ–Ω. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 800,
      temperature: 0.7,
    });

    const content = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    
    console.log(`‚úÖ Natal chart analysis generated successfully for ${name}`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "natal-chart",
      prompt,
      content,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || content.length
    );
    
    return content;
  } catch (error: any) {
    console.error("‚ùå Error generating natal chart analysis:", error);
    
    if (error.status === 429) {
      throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.status === 401) {
      throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
    } else if (error.status >= 500) {
      throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// Generate compatibility analysis
export async function generateCompatibilityAnalysis(
  userId: number,
  person1: { name: string; zodiacSign: string; birthDate: string },
  person2: { name: string; zodiacSign: string; birthDate: string },
  compatibilityScore?: number
): Promise<string> {
  try {
    console.log(`üîÆ Generating compatibility analysis for ${person1.name} and ${person2.name}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ª—é–¥—å–º–∏:

    –ß–µ–ª–æ–≤–µ–∫ 1: ${person1.name}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ${person1.birthDate}, –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ${person1.zodiacSign}
    –ß–µ–ª–æ–≤–µ–∫ 2: ${person2.name}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ${person2.birthDate}, –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ${person2.zodiacSign}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
    1. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
    2. –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º —Ä–æ–∂–¥–µ–Ω–∏—è
    3. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    4. –û–±–ª–∞—Å—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π

    –ù–∞–ø–∏—à–∏ –∞–Ω–∞–ª–∏–∑ –≤ –¥—É—Ö–æ–≤–Ω–æ–º –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–º —Ç–æ–Ω–µ, –Ω–æ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.`;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 600,
      temperature: 0.7,
    });

    const content = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    
    console.log(`‚úÖ Compatibility analysis generated successfully`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "compatibility",
      prompt,
      content,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || content.length
    );
    
    return content;
  } catch (error: any) {
    console.error("‚ùå Error generating compatibility analysis:", error);
    
    if (error.status === 429) {
      throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.status === 401) {
      throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
    } else if (error.status >= 500) {
      throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// Test OpenAI connection (–±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è production)
export async function testOpenAIConnection(): Promise<boolean> {
  try {
    console.log('üîß Testing OpenAI connection...');
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: 'Test' }],
      max_tokens: 5,
    });
    
    console.log('‚úÖ OpenAI connection test successful!');
    return true;
  } catch (error: any) {
    console.error('‚ùå OpenAI connection test failed:', error.message);
    return false;
  }
}

// Health check function for monitoring
export async function healthCheck(): Promise<{ status: string; openai: boolean; timestamp: string }> {
  const isOpenAIWorking = await testOpenAIConnection();
  
  return {
    status: isOpenAIWorking ? 'healthy' : 'degraded',
    openai: isOpenAIWorking,
    timestamp: new Date().toISOString()
  };
}