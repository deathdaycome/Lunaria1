import OpenAI from "openai";
import { InsertApiUsage } from "../shared/schema";
import { storage } from "./storage";
// ‚ú® –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –û–ß–ò–°–¢–ö–ò –¢–ï–ö–°–¢–ê
import { cleanMarkdownText, cleanRussianText, cleanStructuredRussianText } from "./utils/textCleaner";
import { callPythonNatalChart } from "./utils/natal-chart-calculator";
// ‚ú® –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢ –î–õ–Ø –†–ê–ë–û–¢–´ –° PYTHON
import { spawn } from "child_process";
import path from "path";
import fs from "fs/promises";

// OpenRouter –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-4o-mini
const openai = new OpenAI({
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: process.env.OPENROUTER_API_KEY,
  timeout: 30000,
  maxRetries: 3,
  defaultHeaders: {
    'HTTP-Referer': 'https://lunaria-app.com',
    'X-Title': 'Lunaria Astrology App',
    'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`
  }
});

// Track OpenAI API usage with a database entry
async function trackApiUsage(userId: number, requestSource: string, requestText: string, responseText: string, tokensIn: number, tokensOut: number) {
  try {
    const apiUsage: InsertApiUsage = {
      userId,
      requestSource,
      requestText,
      responseText,
      tokensIn,
      tokensOut,
    };
    
    await storage.createApiUsage(apiUsage);
  } catch (error) {
    console.error('‚ùå Failed to track API usage:', error);
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
  }
}

// ‚ú® –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–ö–¢–£–ê–õ–¨–ù–û–ô –î–ê–¢–´
function getCurrentDateInfo() {
  const now = new Date();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const daysOfWeek = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
  const dayOfWeek = daysOfWeek[now.getDay()];
  
  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const months = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
  ];
  const month = months[now.getMonth()];
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
  const day = now.getDate();
  const year = now.getFullYear();
  
  return {
    dayOfWeek,
    formattedDate: `${dayOfWeek}, ${day} ${month} ${year} –≥–æ–¥–∞`,
    day,
    month: month,
    year,
    fullDate: now
  };
}

// ‚ú® –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–¢–´ –ü–ï–†–ò–û–î–ê
// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–¢–´ –ü–ï–†–ò–û–î–ê
function getPeriodDateInfo(period: string) {
  const currentDate = getCurrentDateInfo();
  const now = currentDate.fullDate;
  
  switch (period) {
    case "today":
      return {
        periodText: `–Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${currentDate.formattedDate}`,
        periodDescription: "–¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø"
      };
      
    case "week":
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay() + 1); // –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6); // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
      
      const startDay = startOfWeek.getDate();
      const endDay = endOfWeek.getDate();
      const startMonth = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'][startOfWeek.getMonth()];
      const endMonth = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'][endOfWeek.getMonth()];
      
      if (startOfWeek.getMonth() === endOfWeek.getMonth()) {
        return {
          periodText: `–Ω–∞ –Ω–µ–¥–µ–ª—é —Å ${startDay} –ø–æ ${endDay} ${startMonth} ${startOfWeek.getFullYear()} –≥–æ–¥–∞`,
          periodDescription: "–Ω–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"
        };
      } else {
        return {
          periodText: `–Ω–∞ –Ω–µ–¥–µ–ª—é —Å ${startDay} ${startMonth} –ø–æ ${endDay} ${endMonth} ${startOfWeek.getFullYear()} –≥–æ–¥–∞`,
          periodDescription: "–Ω–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"
        };
      }
      
    case "month":
      const monthName = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'][now.getMonth()];
      const fullMonthName = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
        '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'][now.getMonth()];
      return {
        periodText: `–Ω–∞ ${fullMonthName} ${now.getFullYear()} –≥–æ–¥–∞`,
        periodDescription: "–º–µ—Å—è—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"
      };
      
    default:
      return {
        periodText: `–Ω–∞ ${currentDate.formattedDate}`,
        periodDescription: "–¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø"
      };
  }
}

export async function generateHoroscope(userId: number, zodiacSign: string, period: string, category: string): Promise<string> {
 try {
   console.log(`üîÆ Generating horoscope for ${zodiacSign} (${period}, ${category})`);
   
   // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ê
   console.log('üîë OPENROUTER_API_KEY exists:', !!process.env.OPENROUTER_API_KEY);
   console.log('üîë API key length:', process.env.OPENROUTER_API_KEY?.length || 0);
   console.log('üîë API key first 20 chars:', process.env.OPENROUTER_API_KEY?.substring(0, 20) || 'UNDEFINED');
   console.log('üîë Full API key:', process.env.OPENROUTER_API_KEY); // –í–†–ï–ú–ï–ù–ù–û –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   
   // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
   const user = await getUserData(userId);
   const userName = user?.name || "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥";
   const birthDate = user?.birthDate || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞";
   
   // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–£–Æ –î–ê–¢–£ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –û–ü–ò–°–ê–ù–ò–ï–ú –ü–ï–†–ò–û–î–ê
   const currentDate = getCurrentDateInfo();
   const periodInfo = getPeriodDateInfo(period);
   
   // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
   let promptType: string;
   if (period === "today") {
     // –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
     const types = ["negative", "neutral", "positive"];
     promptType = types[Math.floor(Math.random() * types.length)];
   } else {
     // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏ –º–µ—Å—è—á–Ω–æ–≥–æ - —Ç–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
     const types = ["neutral", "positive"];
     promptType = types[Math.floor(Math.random() * types.length)];
   }
   
   console.log(`üéØ Selected prompt type: ${promptType} for period: ${period}`);
   console.log(`üìÖ Period info:`, periodInfo);
   
   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–†–û–ú–ü–¢–´ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –£–ö–ê–ó–ê–ù–ò–ï–ú –ü–ï–†–ò–û–î–ê
   let prompt: string = "";
   
   switch (promptType) {
     case "negative":
       prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π ${periodInfo.periodDescription} ${periodInfo.periodText} –Ω–∞ —Ç–µ–º—É ${category}. –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ -- ${zodiacSign}. –ò–º—è -- ${userName}. –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${birthDate}. –°–¥–µ–ª–∞–π –µ–≥–æ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –¥–∞–π –Ω–∞–¥–µ–∂–¥—É. –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞: ${period === "today" ? "–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –¥–µ–Ω—å" : period === "week" ? "–¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏" : "–¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –æ–±—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞"}. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è). –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.`;
       break;
     case "neutral":
       prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π ${periodInfo.periodDescription} ${periodInfo.periodText} –Ω–∞ —Ç–µ–º—É ${category}. –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ -- ${zodiacSign}. –ò–º—è -- ${userName}. –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${birthDate}. –°–¥–µ–ª–∞–π –µ–≥–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞: ${period === "today" ? "–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è" : period === "week" ? "–¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏" : "–¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏"}. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è). –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.`;
       break;
     case "positive":
       prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π ${periodInfo.periodDescription} ${periodInfo.periodText} –Ω–∞ —Ç–µ–º—É ${category}. –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ -- ${zodiacSign}. –ò–º—è -- ${userName}. –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${birthDate}. –°–¥–µ–ª–∞–π –µ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö. –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞: ${period === "today" ? "–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å" : period === "week" ? "–¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ–¥–µ–ª–∏" : "–¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"}. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è). –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.`;
       break;
     default:
       prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π ${periodInfo.periodDescription} ${periodInfo.periodText} –Ω–∞ —Ç–µ–º—É ${category}. –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ -- ${zodiacSign}. –ò–º—è -- ${userName}. –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${birthDate}. –°–¥–µ–ª–∞–π –µ–≥–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞: ${period === "today" ? "–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã" : period === "week" ? "–¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏"}. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è). –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.`;
   }

   console.log('üöÄ Sending request to OpenRouter...');
   console.log('üîó Base URL:', openai.baseURL);
   console.log('üìù Model:', "openai/gpt-4o-mini");

   const response = await openai.chat.completions.create({
     model: "openai/gpt-4o-mini",
     messages: [{ role: "user", content: prompt }],
     max_tokens: period === "today" ? 2000 : period === "week" ? 3000 : 4000, // ‚úÖ –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
     temperature: 0.8,
   });

   console.log('‚úÖ OpenRouter response received successfully!');

   const rawContent = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
   
   // ‚ú® –ü–†–ò–ú–ï–ù–Ø–ï–ú –û–ß–ò–°–¢–ö–£ –¢–ï–ö–°–¢–ê –û–¢ MARKDOWN-–°–ò–ú–í–û–õ–û–í
   const cleanedContent = cleanRussianText(rawContent);
   
   console.log(`‚úÖ Horoscope generated successfully for ${zodiacSign} (${promptType}) - ${periodInfo.periodDescription}`);
   console.log(`üßπ Text cleaned from markdown symbols`);
   
   // Track API usage
   try {
     await trackApiUsage(
       userId,
       `horoscope/${period}/${category}/${promptType}`,
       prompt,
       cleanedContent,
       response.usage?.prompt_tokens || prompt.length,
       response.usage?.completion_tokens || cleanedContent.length
     );
   } catch (trackingError) {
     console.log('‚ö†Ô∏è API usage tracking failed (non-critical):', (trackingError as Error).message);
   }
   
   return cleanedContent;
 } catch (error: any) {
   console.error("‚ùå Error generating horoscope:", error);
   console.error("‚ùå Error details:", {
     status: error.status,
     message: error.message,
     code: error.code,
     headers: error.headers
   });
   
   if (error.status === 429) {
     throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
   } else if (error.status === 401 || error.status === 403) {
     console.error("üö® AUTHENTICATION ERROR - API key issue detected!");
     console.error("üîë Current API key:", process.env.OPENROUTER_API_KEY);
     throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
   } else if (error.status >= 500) {
     throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
   } else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
     throw new Error("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É.");
   }
   
   throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
 }
}

// =====================================================
// –ü–†–û–ú–ü–¢–´ –î–õ–Ø –ì–û–†–û–°–ö–û–ü–û–í (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
async function getUserData(userId: number) {
  try {
    const user = await storage.getUser(userId);
    return user;
  } catch (error) {
    console.error('‚ùå Failed to get user data:', error);
    return null;
  }
}



// =====================================================
// –°–ß–ê–°–¢–õ–ò–í–´–ï –ß–ò–°–õ–ê (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

export async function generateLuckyNumbers(userId: number): Promise<number[]> {
  try {
    console.log(`üîÆ Generating lucky numbers for user ${userId}`);
    
    const user = await getUserData(userId);
    const userName = user?.name || "–î—Ä—É–≥";
    const birthDate = user?.birthDate || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞";
    
    // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ - –ß–ï–¢–ö–û –£–ö–ê–ó–´–í–ê–ï–ú –î–ò–ê–ü–ê–ó–û–ù 1-10
    const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –û–ø—Ä–µ–¥–µ–ª–∏ 3 —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ò–º—è -- ${userName}. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - ${birthDate}. –í –æ—Ç–≤–µ—Ç–µ –ø–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ 3 —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –Ω–∏–∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤.`;

    const response = await openai.chat.completions.create({
      model: "openai/gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 50,
      temperature: 0.7,
    });

    const rawContent = response.choices[0].message.content || "7 3 9";
    
    // ‚ú® –û–ß–ò–©–ê–ï–ú –¢–ï–ö–°–¢ –û–¢ MARKDOWN-–°–ò–ú–í–û–õ–û–í
    const cleanedContent = cleanMarkdownText(rawContent);
    
    // ‚ú® –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ß–ò–°–ï–õ
    let numbers = cleanedContent.match(/\d+/g)?.slice(0, 3).map(n => {
      let num = parseInt(n);
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 1-10
      if (num < 1) num = 1;
      if (num > 10) num = (num % 10) + 1;
      return num;
    }) || [];
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 3 —á–∏—Å–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-10
    while (numbers.length < 3) {
      const randomNum = Math.floor(Math.random() * 10) + 1;
      if (!numbers.includes(randomNum)) {
        numbers.push(randomNum);
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
    numbers = Array.from(new Set(numbers)).slice(0, 3);
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
    while (numbers.length < 3) {
      const randomNum = Math.floor(Math.random() * 10) + 1;
      if (!numbers.includes(randomNum)) {
        numbers.push(randomNum);
      }
    }
    
    console.log(`‚úÖ Lucky numbers generated: ${numbers.join(', ')}`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "lucky-numbers",
      prompt,
      cleanedContent,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || cleanedContent.length
    );
    
    return numbers;
  } catch (error: any) {
    console.error("‚ùå Error generating lucky numbers:", error);
    // ‚ú® FALLBACK –¢–û–ñ–ï –ò–°–ü–†–ê–í–õ–ï–ù - –ß–ò–°–õ–ê –û–¢ 1 –î–û 10
    return [
      Math.floor(Math.random() * 10) + 1,
      Math.floor(Math.random() * 10) + 1,
      Math.floor(Math.random() * 10) + 1
    ].filter((num, index, arr) => arr.indexOf(num) === index); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }
}

// =====================================================
// –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –ó–ù–ê–ö–ê–ú–ò –ó–û–î–ò–ê–ö–ê (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

export async function generateCompatibleSigns(userId: number): Promise<Array<{name: string, compatibility: number}>> {
  try {
    console.log(`üîÆ Generating compatible signs for user ${userId}`);
    
    const user = await getUserData(userId);
    const userName = user?.name || "–î—Ä—É–≥";
    const birthDate = user?.birthDate || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞";
    
    // –ü—Ä–æ–º–ø—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –û–ø—Ä–µ–¥–µ–ª–∏ 3 –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞, –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å: –∏–º—è -- ${userName}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - ${birthDate}. –í –æ—Ç–≤–µ—Ç–µ –ø–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è).`;

    const response = await openai.chat.completions.create({
      model: "openai/gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 100,
      temperature: 0.7,
    });

    const rawContent = response.choices[0].message.content || "–¢–µ–ª–µ—Ü 85%, –î–µ–≤–∞ 80%, –†—ã–±—ã 75%";
    
    // ‚ú® –û–ß–ò–©–ê–ï–ú –¢–ï–ö–°–¢ –û–¢ MARKDOWN-–°–ò–ú–í–û–õ–û–í
    const cleanedContent = cleanMarkdownText(rawContent);
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const signs = [];
    const lines = cleanedContent.split(/[,\n]/);
    
    for (const line of lines) {
      const match = line.match(/(\w+)\s*(\d+)%/);
      if (match && signs.length < 3) {
        signs.push({
          name: match[1],
          compatibility: parseInt(match[2])
        });
      }
    }
    
    // Fallback –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    if (signs.length === 0) {
      signs.push(
        { name: "–¢–µ–ª–µ—Ü", compatibility: 85 },
        { name: "–î–µ–≤–∞", compatibility: 80 },
        { name: "–†—ã–±—ã", compatibility: 75 }
      );
    }
    
    console.log(`‚úÖ Compatible signs generated: ${signs.map(s => `${s.name} ${s.compatibility}%`).join(', ')}`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "compatible-signs",
      prompt,
      cleanedContent,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || cleanedContent.length
    );
    
    return signs;
  } catch (error: any) {
    console.error("‚ùå Error generating compatible signs:", error);
    return [
      { name: "–¢–µ–ª–µ—Ü", compatibility: 85 },
      { name: "–î–µ–≤–∞", compatibility: 80 }, 
      { name: "–†—ã–±—ã", compatibility: 75 }
    ];
  }
}

// =====================================================
// PROGRESS BAR –¢–ï–°–¢–ê –ù–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

export async function generateCompatibilityPercentage(
  userId: number,
  person1: { name: string; birthDate: string; zodiacSign: string },
  person2: { name: string; birthDate: string; zodiacSign: string }
): Promise<number> {
  try {
    console.log(`üîÆ Generating compatibility percentage for ${person1.name} and ${person2.name}`);
    
    // –ü—Ä–æ–º–ø—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ª—é–¥–µ–π. –ü–æ—Å—á–∏—Ç–∞–π –º–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è ${person1.name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${person1.birthDate} –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ${person1.zodiacSign} –∏ ${person2.name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${person2.birthDate} –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ${person2.zodiacSign}. –í –æ—Ç–≤–µ—Ç–µ –ø–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.`;

    const response = await openai.chat.completions.create({
      model: "openai/gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 20,
      temperature: 0.5,
    });

    const rawContent = response.choices[0].message.content || "85%";
    
    // ‚ú® –û–ß–ò–©–ê–ï–ú –¢–ï–ö–°–¢ –û–¢ MARKDOWN-–°–ò–ú–í–û–õ–û–í
    const cleanedContent = cleanMarkdownText(rawContent);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const percentMatch = cleanedContent.match(/(\d+)%?/);
    const percentage = percentMatch ? parseInt(percentMatch[1]) : Math.floor(Math.random() * 31) + 70; // 70-100%
    
    console.log(`‚úÖ Compatibility percentage generated: ${percentage}%`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "compatibility-percentage",
      prompt,
      cleanedContent,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || cleanedContent.length
    );
    
    return Math.min(Math.max(percentage, 0), 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100%
  } catch (error: any) {
    console.error("‚ùå Error generating compatibility percentage:", error);
    return Math.floor(Math.random() * 31) + 70; // Fallback: 70-100%
  }
}

// =====================================================
// –¢–ï–°–¢ –ù–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

export async function generateCompatibilityAnalysis(
  userId: number,
  person1: { name: string; zodiacSign: string; birthDate: string },
  person2: { name: string; zodiacSign: string; birthDate: string },
  compatibilityScore?: number
): Promise<Array<{title: string, content: string}>> {
  try {
    console.log(`üîÆ Generating compatibility analysis for ${person1.name} and ${person2.name}`);
    
    // –ü—Ä–æ–º–ø—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ª—é–¥–µ–π, –ø—Ä–æ—Å—á–∏—Ç–∞–π –º–Ω–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ª—é–±–æ–≤–Ω—É—é (–¥—Ä—É–∂–µ—Å–∫—É—é, –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é) —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ${person1.name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${person1.birthDate} –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ${person1.zodiacSign} –∏ ${person2.name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${person2.birthDate} –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ${person2.zodiacSign}. –°–¥–µ–ª–∞–π —ç—Ç–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏ —Ä–æ—Å—Ç–∞. –í –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º: —Å–Ω–∞—á–∞–ª–∞ ¬´–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å¬ª, –∑–∞—Ç–µ–º ¬´–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å¬ª, –∑–∞—Ç–µ–º ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å¬ª. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—á–∏–Ω–∞–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞. –í–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.`;

    const response = await openai.chat.completions.create({
      model: "openai/gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 5000,
      temperature: 0.7,
    });

    const rawContent = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    
    // ‚ú® –°–¢–†–£–ö–¢–£–†–ò–†–£–ï–ú –¢–ï–ö–°–¢ –í –°–ï–ö–¶–ò–ò (–ö–ê–ö –í –¢–ê–†–û)
    const structuredSections = cleanStructuredRussianText(rawContent);
    
    console.log(`‚úÖ Compatibility analysis generated successfully`);
    console.log(`üßπ Text structured into ${structuredSections.length} sections`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "compatibility-analysis",
      prompt,
      rawContent,
      response.usage?.prompt_tokens || prompt.length,
      response.usage?.completion_tokens || rawContent.length
    );
    
    return structuredSections;
  } catch (error: any) {
    console.error("‚ùå Error generating compatibility analysis:", error);
    
    if (error.status === 429) {
      throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.status === 401) {
      throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
    } else if (error.status >= 500) {
      throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// =====================================================
// –ü–†–ï–°–ï–¢–´ –î–õ–Ø –¢–ê–†–û (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

interface TarotPreset {
  id: string;
  name: string;
  cards3: string[];
  cards5: string[];
}

const TAROT_PRESETS: Record<string, TarotPreset[]> = {
  "love": [
    {
      id: "love-1",
      name: "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
      cards3: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
      cards5: ["–ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", "–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ –ø–æ–ª—É—á–∞—é", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "love-2", 
      name: "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      cards3: ["–ú–æ–∏ —á—É–≤—Å—Ç–≤–∞", "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–°–æ–≤–µ—Ç"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–í–∑–≥–ª—è–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–í–∑–≥–ª—è–¥ –º–µ–Ω—è", "–°–æ–≤–µ—Ç", "–ë—É–¥—É—â–µ–µ"]
    },
    {
      id: "love-3",
      name: "–û–∂–∏–¥–∞–Ω–∏—è vs –†–µ–∞–ª—å–Ω–æ—Å—Ç—å",
      cards3: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ò—Ç–æ–≥"],
      cards5: ["–ú–æ–∏ —ç–º–æ—Ü–∏–∏", "–≠–º–æ—Ü–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–ß—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ò—Ç–æ–≥"]
    },
    {
      id: "love-4",
      name: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ",
      cards3: ["–ü—Ä–∏—á–∏–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–°–æ–≤–µ—Ç"],
      cards5: ["–õ—é–±–æ–≤—å —Å–µ–π—á–∞—Å", "–ß—Ç–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ß—Ç–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß–µ–≥–æ –±–æ—é—Å—å", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"]
    },
    {
      id: "love-5",
      name: "–í–∑–∞–∏–º–Ω—ã–π –æ–±–º–µ–Ω",
      cards3: ["–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ —è –ø–æ–ª—É—á–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–ù–∞—á–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π", "–ò—Ö —Ä–∞–∑–≤–∏—Ç–∏–µ", "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ß—Ç–æ —Å–∫—Ä—ã—Ç–æ", "–°–æ–≤–µ—Ç"]
    }
  ],
  "career": [
    {
      id: "career-1",
      name: "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
      cards3: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ –∫–∞—Ä—å–µ—Ä—ã"],
      cards5: ["–¶–µ–ª—å", "–†–µ—Å—É—Ä—Å—ã", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–î–µ–π—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "career-2",
      name: "–°–∏–ª—ã –∏ —Å–ª–∞–±–Ω–æ—Å—Ç–∏",
      cards3: ["–ú–æ–∏ —Å–∏–ª—ã", "–ú–æ–∏ —Å–ª–∞–±–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞"],
      cards5: ["–ú–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "career-3",
      name: "–¶–µ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
      cards3: ["–ú–æ–∏ —Ü–µ–ª–∏", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
      cards5: ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ß—Ç–æ —è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å", "–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"]
    },
    {
      id: "career-4",
      name: "–í–∑–≥–ª—è–¥ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      cards3: ["–°–∏—Ç—É–∞—Ü–∏—è —Å–µ–π—á–∞—Å", "–ö–∞–∫ –º–µ–Ω—è –≤–∏–¥—è—Ç –∫–æ–ª–ª–µ–≥–∏/—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–í–ª–∏—è–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã"],
      cards5: ["–ú–æ–∏ —Ü–µ–ª–∏", "–ü–ª–∞–Ω—ã", "–í—ã–∑–æ–≤—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ò—Ç–æ–≥"]
    },
    {
      id: "career-5",
      name: "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥",
      cards3: ["–ß—Ç–æ —è –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç –º–µ–Ω—è", "–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥"],
      cards5: ["–ö–ª—é—á–µ–≤–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è", "–õ–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–í–Ω–µ—à–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–†–∏—Å–∫–∏", "–°–æ–≤–µ—Ç –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"]
    }
  ],
  "spirituality": [
    {
      id: "spirituality-1",
      name: "–î—É—Ö–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ –¥—É—Ö–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í—ã–∑–æ–≤", "–°–æ–≤–µ—Ç"],
      cards5: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ò—Å—Ç–æ–∫–∏", "–í—ã–∑–æ–≤—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—É—Ç—å"]
    },
    {
      id: "spirituality-2",
      name: "–û—Å–æ–∑–Ω–∞–Ω–∏–µ",
      cards3: ["–ß—Ç–æ —è –æ—Å–æ–∑–Ω–∞—é", "–ß—Ç–æ —Å–∫—Ä—ã—Ç–æ", "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å"],
      cards5: ["–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—á–∏—Ç–µ–ª—å", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "spirituality-3",
      name: "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä",
      cards3: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä", "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è", "–ü—É—Ç—å –≤–ø–µ—Ä–µ–¥"],
      cards5: ["–ú–æ–∏ —Å–æ–º–Ω–µ–Ω–∏—è", "–ú–æ—è –≤–µ—Ä–∞", "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç –º–µ–Ω—è", "–ß—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç", "–ò—Ç–æ–≥ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏"]
    },
    {
      id: "spirituality-4",
      name: "–ë–∞–ª–∞–Ω—Å",
      cards3: ["–ß—Ç–æ –º–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ü—É—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É"],
      cards5: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç", "–ü—Ä–∏—á–∏–Ω–∞", "–ü—É—Ç—å –∏—Å—Ü–µ–ª–µ–Ω–∏—è", "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏"]
    },
    {
      id: "spirituality-5",
      name: "–î—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å",
      cards3: ["–ß—Ç–æ —è –º–æ–≥—É –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–ß—Ç–æ –º–Ω–µ –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è"],
      cards5: ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ", "–£—Ä–æ–∫", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"]
    }
  ],
  "money": [
    {
      id: "finances-1",
      name: "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
      cards3: ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–°–æ–≤–µ—Ç"],
      cards5: ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", "–û–±–ª–∞—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–°–æ–≤–µ—Ç"]
    },
    {
      id: "finances-2",
      name: "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã",
      cards3: ["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"],
      cards5: ["–ú–æ–∏ —Ä–µ—Å—É—Ä—Å—ã", "–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å", "–†–∏—Å–∫–∏", "–ù–æ–≤—ã–π –ø—É—Ç—å", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]
    },
    {
      id: "finances-3",
      name: "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
      cards3: ["–ß—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
      cards5: ["–¶–µ–ª–∏", "–ü–ª–∞–Ω—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"]
    },
    {
      id: "finances-4",
      name: "–†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
      cards3: ["–†–∏—Å–∫–∏", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–î–µ–π—Å—Ç–≤–∏—è"],
      cards5: ["–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ë—É–¥—É—â–µ–µ", "–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–°–æ–≤–µ—Ç"]
   },
   {
     id: "finances-5",
     name: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
     cards3: ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç"],
     cards5: ["–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–£–≥—Ä–æ–∑—ã", "–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"]
   }
 ],
 "health": [
   {
     id: "health-1",
     name: "–ó–¥–æ—Ä–æ–≤—å–µ",
     cards3: ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "–°–æ–≤–µ—Ç"],
     cards5: ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã", "–°–æ–≤–µ—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"]
   },
   {
     id: "health-2",
     name: "–¢–µ–ª–æ-–≠–º–æ—Ü–∏–∏-–î—É—Ö",
     cards3: ["–¢–µ–ª–æ", "–≠–º–æ—Ü–∏–∏", "–î—É—Ö"],
     cards5: ["–°–∏–º–ø—Ç–æ–º", "–ü—Ä–∏—á–∏–Ω–∞", "–ß—Ç–æ —è –¥–µ–ª–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "–ò—Ç–æ–≥"]
   },
   {
     id: "health-3",
     name: "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç",
     cards3: ["–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–ß—Ç–æ –º–µ—à–∞–µ—Ç", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
     cards5: ["–ú–æ–π —Ä–µ—Å—É—Ä—Å", "–ß—Ç–æ –∏—Å—Ç–æ—â–∞–µ—Ç", "–ü–æ–º–æ—â—å –∏–∑–≤–Ω–µ", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∞—Ä—å–µ—Ä—ã", "–ü—É—Ç—å –∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—é"]
   },
   {
     id: "health-4",
     name: "–ü—Ä–∏—á–∏–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤",
     cards3: ["–ü—Ä–∏—á–∏–Ω–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤", "–¢–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥"],
     cards5: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–ß—Ç–æ –≤–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ò—Ç–æ–≥ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è"]
   },
   {
     id: "health-5",
     name: "–≠–Ω–µ—Ä–≥–∏—è –∏ —Å—Ç—Ä–µ—Å—Å",
     cards3: ["–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞", "–°–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"],
     cards5: ["–¢–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è", "–≠–º–æ—Ü–∏–∏", "–ú—ã—à–ª–µ–Ω–∏–µ", "–í–Ω–µ—à–Ω–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ", "–°–æ–≤–µ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É"]
   }
 ],
 "friendship": [
   {
     id: "friendship-1",
     name: "–Ø –∏ –¥—Ä—É–≥",
     cards3: ["–Ø", "–î—Ä—É–≥", "–°—É—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π"],
     cards5: ["–Ø", "–î—Ä—É–≥", "–ù–∞—à–∏ –æ–±—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "–í—ã–∑–æ–≤—ã", "–ò—Ç–æ–≥"]
   },
   {
     id: "friendship-2",
     name: "–í–∑–∞–∏–º–Ω—ã–π –æ–±–º–µ–Ω",
     cards3: ["–ß—Ç–æ —è –¥–∞—é", "–ß—Ç–æ –ø–æ–ª—É—á–∞—é", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"],
     cards5: ["–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–æ–≤–µ—Ç—ã", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"]
   },
   {
     id: "friendship-3",
     name: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –¥—Ä—É–∂–±–µ",
     cards3: ["–ü—Ä–∏—á–∏–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç", "–°–æ–≤–µ—Ç"],
     cards5: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–û–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–∞", "–ß—Ç–æ –Ω–∞—Å —Å–æ–µ–¥–∏–Ω—è–µ—Ç", "–ß—Ç–æ –Ω–∞—Å —Ä–∞–∑–¥–µ–ª—è–µ—Ç", "–ò—Ç–æ–≥"]
   },
   {
     id: "friendship-4",
     name: "–û–∂–∏–¥–∞–Ω–∏—è",
     cards3: ["–ú–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–ò—Ç–æ–≥"],
     cards5: ["–ò—Å—Ç–æ–∫–∏ –¥—Ä—É–∂–±—ã", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å", "–°–æ–≤–µ—Ç"]
   },
   {
     id: "friendship-5",
     name: "–ë—É–¥—É—â–µ–µ –¥—Ä—É–∂–±—ã",
     cards3: ["–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ", "–ë—É–¥—É—â–µ–µ –¥—Ä—É–∂–±—ã"],
     cards5: ["–Ø", "–î—Ä—É–≥", "–ù–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–∞", "–ë–∞—Ä—å–µ—Ä—ã", "–ö–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥"]
   }
 ]
};

// 22 –∫–∞—Ä—Ç—ã —Å—Ç–∞—Ä—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤
const MAJOR_ARCANA = [
 "–î—É—Ä–∞–∫", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
 "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
 "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", 
 "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
];

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Python —Å–∫—Ä–∏–ø—Ç–æ–º –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏
 */
// ‚úÖ –ó–ê–ú–ï–ù–ê PYTHON –§–£–ù–ö–¶–ò–ò –ù–ê TYPESCRIPT

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤ –∫–æ–¥ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 */
function getCountryCode(birthCountry?: string): string {
  const countryMap: Record<string, string> = {
    '–†–æ—Å—Å–∏—è': 'RU',
    '–°–®–ê': 'US', 
    '–ì–µ—Ä–º–∞–Ω–∏—è': 'DE',
    '–§—Ä–∞–Ω—Ü–∏—è': 'FR',
    '–ò—Ç–∞–ª–∏—è': 'IT',
    '–ò—Å–ø–∞–Ω–∏—è': 'ES',
    '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è': 'GB',
    '–ö–∞–Ω–∞–¥–∞': 'CA',
    '–ê–≤—Å—Ç—Ä–∞–ª–∏—è': 'AU',
    '–Ø–ø–æ–Ω–∏—è': 'JP',
    '–ö–∏—Ç–∞–π': 'CN',
    '–ò–Ω–¥–∏—è': 'IN',
    '–ë—Ä–∞–∑–∏–ª–∏—è': 'BR',
    '–ú–µ–∫—Å–∏–∫–∞': 'MX',
    '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞': 'AR',
    '–¢—É—Ä—Ü–∏—è': 'TR',
    '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è': 'KR',
    '–ü–æ–ª—å—à–∞': 'PL',
    '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã': 'NL',
    '–®–≤–µ—Ü–∏—è': 'SE',
    '–ù–æ—Ä–≤–µ–≥–∏—è': 'NO',
    '–î–∞–Ω–∏—è': 'DK',
    '–§–∏–Ω–ª—è–Ω–¥–∏—è': 'FI',
    '–ß–µ—Ö–∏—è': 'CZ',
    '–í–µ–Ω–≥—Ä–∏—è': 'HU',
    '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è': 'PT',
    '–ì—Ä–µ—Ü–∏—è': 'GR',
    '–®–≤–µ–π—Ü–∞—Ä–∏—è': 'CH',
    '–ê–≤—Å—Ç—Ä–∏—è': 'AT',
    '–ë–µ–ª—å–≥–∏—è': 'BE',
    '–£–∫—Ä–∞–∏–Ω–∞': 'UA',
    '–ë–µ–ª–∞—Ä—É—Å—å': 'BY',
    '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω': 'KZ'
  };
  
  return countryMap[birthCountry || '–†–æ—Å—Å–∏—è'] || 'RU';
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
 */
// ‚úÖ –î–û–õ–ñ–ù–û –ë–´–¢–¨:
export async function generateNatalChartAnalysis(
  userId: number,
  name: string,
  birthDate: string,
  birthTime?: string,
  birthPlace?: string,
  birthCountry?: string
): Promise<{
  svgFileName?: string;
  analysis: Array<{title: string, content: string}>;
  success: boolean;
}> {
  try {
    console.log(`üåå Generating natal chart for ${name}`);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    const birthDateObj = new Date(birthDate);
    const year = birthDateObj.getFullYear();
    const month = birthDateObj.getMonth() + 1;
    const day = birthDateObj.getDate();
    
    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
    let hour = 12;
    let minute = 0;
    if (birthTime) {
      const timeParts = birthTime.split(':');
      hour = parseInt(timeParts[0]) || 12;
      minute = parseInt(timeParts[1]) || 0;
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Python —Å–∫—Ä–∏–ø—Ç–∞
    const pythonInput = {
      user_name: name,
      birth_year: year,
      birth_month: month,
      birth_day: day,
      birth_hour: hour,
      birth_minute: minute,
      birth_city: birthPlace || "–ú–æ—Å–∫–≤–∞",
      birth_country_code: getCountryCode(birthCountry)
    };
    
    console.log(`üåå Python input prepared:`, pythonInput);
    
    // –í—ã–∑—ã–≤–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç
    const pythonResult = await callPythonNatalChart(pythonInput);
    
    if (!pythonResult.success || pythonResult.error) {
      console.error(`üåå Python script failed: ${pythonResult.error}`);
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      console.log(`üåå Using AI fallback for natal chart analysis`);
      
      const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–µ–º ${name}, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${birthDate}${birthTime ? ` –≤ ${birthTime}` : ""}${birthPlace ? ` –≤ –≥–æ—Ä–æ–¥–µ ${birthPlace}` : ""}${birthCountry ? ` –≤ —Å—Ç—Ä–∞–Ω–µ ${birthCountry}` : ""}. 

–í–∫–ª—é—á–∏ –≤ –∞–Ω–∞–ª–∏–∑:
1. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞
2. –í–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—É–¥—å–±—É
3. –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–∏
4. –¢–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
6. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏
7. –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏ —á–∏—Å–ª–∞

–ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∏ –¥—É—Ö–æ–≤–Ω—ã–π —Ç–æ–Ω, –Ω–æ –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è). –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.`;

      const response = await openai.chat.completions.create({
        model: "openai/gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 6000,
        temperature: 0.7,
      });

      const rawContent = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      
      // ‚ú® –°–¢–†–£–ö–¢–£–†–ò–†–£–ï–ú –¢–ï–ö–°–¢ –í –°–ï–ö–¶–ò–ò
      const structuredSections = cleanStructuredRussianText(rawContent);
      
      // Track API usage
      await trackApiUsage(
        userId,
        "natal-chart-fallback",
        prompt,
        rawContent,
        response.usage?.prompt_tokens || prompt.length,
        response.usage?.completion_tokens || rawContent.length
      );
      
      return {
        analysis: structuredSections,
        success: false // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è fallback
      };
    }
    
    // –ï—Å–ª–∏ Python —Å–∫—Ä–∏–ø—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ
    console.log(`üåå Python script successful, processing AI prompt`);
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–º—Ç –æ—Ç Python –≤ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const response = await openai.chat.completions.create({
      model: "openai/gpt-4o-mini",
      messages: [{ role: "user", content: pythonResult.ai_prompt! }],
      max_tokens: 8000,
      temperature: 0.7,
    });

    const rawContent = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    
    // ‚ú® –°–¢–†–£–ö–¢–£–†–ò–†–£–ï–ú –¢–ï–ö–°–¢ –í –°–ï–ö–¶–ò–ò
    const structuredSections = cleanStructuredRussianText(rawContent);
    
    console.log(`‚úÖ Natal chart analysis generated successfully for ${name}`);
    console.log(`üßπ Text structured into ${structuredSections.length} sections`);
    console.log(`üìÅ SVG file: ${pythonResult.svg_name}`);
    
    // Track API usage
    await trackApiUsage(
      userId,
      "natal-chart",
      pythonResult.ai_prompt!,
      rawContent,
      response.usage?.prompt_tokens || (pythonResult.ai_prompt?.length || 0),
      response.usage?.completion_tokens || rawContent.length
    );
    
    return {
      svgFileName: pythonResult.svg_name,
      analysis: structuredSections,
      success: true
    };
    
  } catch (error: any) {
    console.error("‚ùå Error generating natal chart analysis:", error);
    
    if (error.status === 429) {
      throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.status === 401) {
      throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
    } else if (error.status >= 500) {
      throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// =====================================================
// –†–ê–°–ö–õ–ê–î –¢–ê–†–û (–°–û–ì–õ–ê–°–ù–û –¢–ó)
// =====================================================

export async function generateTarotReading(
 userId: number, 
 question: string, 
 cardCount: number, 
 category: string, 
 preset: string,
 selectedCardNames?: string[]
): Promise<Array<{title: string, content: string}>> {
 try {
   console.log(`üîÆ Generating tarot reading: ${cardCount} cards, category: ${category}, preset: ${preset}`);
   
   const user = await getUserData(userId);
   const userName = user?.name || "–î—Ä—É–≥";
   const userGender = user?.gender || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
   const birthDate = user?.birthDate || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞";
   
   const categoryPresets = TAROT_PRESETS[category] || TAROT_PRESETS["love"];
   const selectedPreset = categoryPresets.find(p => p.id === preset) || categoryPresets[0];
   
   const positions = cardCount === 3 ? selectedPreset.cards3 : selectedPreset.cards5;
   
   if (positions.length !== cardCount) {
     console.error(`‚ùå Mismatch: cardCount=${cardCount}, positions.length=${positions.length}`);
     throw new Error(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç: –∑–∞–ø—Ä–æ—à–µ–Ω–æ ${cardCount}, –ø–æ–∑–∏—Ü–∏–π ${positions.length}`);
   }
   
   // ‚úÖ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ö–ê–†–¢–´ –ù–ê –ë–≠–ö–ï–ù–î–ï (–ù–ï –ù–ê –§–†–û–ù–¢–ï–ù–î–ï!)
   const drawnCards = selectedCardNames || [...MAJOR_ARCANA].sort(() => Math.random() - 0.5).slice(0, cardCount);
   
   console.log(`üé¥ Selected preset: ${selectedPreset.name}`);
   console.log(`üé¥ Positions (${positions.length}): ${positions.join(', ')}`);
   console.log(`üé¥ Drawn cards (${drawnCards.length}): ${drawnCards.join(', ')}`);
   
   // ‚úÖ –°–û–ó–î–ê–ï–ú –°–¢–†–û–ì–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´
   let prompt: string;

   if (cardCount === 3) {
     prompt = `–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–∏–∑–º–∞ –∏ —Ç–æ–Ω–∫–æ—Å—Ç–µ–π –∫–∞—Ä—Ç –¢–∞—Ä–æ. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –æ–±—Ä–µ—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–≤–∞–π —Å–ø–æ–∫–æ–π–Ω—É—é –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ.

   –ß–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∫ —Ç–µ–±–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è, –∑–æ–≤—É—Ç ${userName}, –ø–æ–ª: ${userGender}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}. –¢–µ–º–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Äì ${category}.
   –ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é ${userName} —Ö–æ—á–µ—Ç —Ä–µ—à–∏—Ç—å: ¬´${question}¬ª.

   –í—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã: –∫–∞—Ä—Ç–∞ 1 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[0]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[0]}, –∫–∞—Ä—Ç–∞ 2 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[1]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[1]}, –∫–∞—Ä—Ç–∞ 3 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[2]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[2]}.

   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –∏ –Ω–∞–ø–∏—Å–∞–Ω—ã. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø–∏—Å–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–æ–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Ç—è–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ —á–µ–≥–æ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å.

   –°–¥–µ–ª–∞–π —Å—Ç—Ä–æ–≥–æ 5 —Ä–∞–∑–¥–µ–ª–æ–≤:

   –†–ê–ó–î–ï–õ1: –í–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ (–º–∏–Ω–∏–º—É–º 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   –°–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–≤–µ—Ä–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏ –∫–∞—Ä—Ç. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –º–æ–º–µ–Ω—Ç–∞.

   –†–ê–ó–î–ï–õ2: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã - ${positions[0]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[0]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[0]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

   –†–ê–ó–î–ï–õ3: –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã - ${positions[1]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[1]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[1]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

   –†–ê–ó–î–ï–õ4: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã - ${positions[2]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[2]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[2]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

   –†–ê–ó–î–ï–õ5: –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 8-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   –î–∞–π –∏—Ç–æ–≥–æ–≤—ã–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∫–∞—Ä—Ç. –û–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –º—É–¥—Ä–æ—Å—Ç—å –≤ —Ü–µ–ª–æ—Å—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É, –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö.

   –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.`;

 } else if (cardCount === 5) {
   prompt = `–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–∏–∑–º–∞ –∏ —Ç–æ–Ω–∫–æ—Å—Ç–µ–π –∫–∞—Ä—Ç –¢–∞—Ä–æ. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –æ–±—Ä–µ—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–≤–∞–π —Å–ø–æ–∫–æ–π–Ω—É—é –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ.

 –ß–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∫ —Ç–µ–±–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è, –∑–æ–≤—É—Ç ${userName}, –ø–æ–ª: ${userGender}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}. –¢–µ–º–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Äì ${category}.
 –ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é ${userName} —Ö–æ—á–µ—Ç —Ä–µ—à–∏—Ç—å: ¬´${question}¬ª.

 –í—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã: –∫–∞—Ä—Ç–∞ 1 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[0]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[0]}, –∫–∞—Ä—Ç–∞ 2 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[1]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[1]}, –∫–∞—Ä—Ç–∞ 3 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[2]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[2]}, –∫–∞—Ä—Ç–∞ 4 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[3]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[3]}, –∫–∞—Ä—Ç–∞ 5 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ¬´${positions[4]}¬ª - —ç—Ç–æ –∫–∞—Ä—Ç–∞ ${drawnCards[4]}.

 –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –∏ –Ω–∞–ø–∏—Å–∞–Ω—ã. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø–∏—Å–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–æ–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Ç—è–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ —á–µ–≥–æ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å.

 –°–¥–µ–ª–∞–π —Å—Ç—Ä–æ–≥–æ 7 —Ä–∞–∑–¥–µ–ª–æ–≤:

 –†–ê–ó–î–ï–õ1: –í–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ (–º–∏–Ω–∏–º—É–º 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –°–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–≤–µ—Ä–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏ –∫–∞—Ä—Ç. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –º–æ–º–µ–Ω—Ç–∞.

 –†–ê–ó–î–ï–õ2: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã - ${positions[0]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[0]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[0]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

 –†–ê–ó–î–ï–õ3: –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã - ${positions[1]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[1]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[1]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

 –†–ê–ó–î–ï–õ4: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã - ${positions[2]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[2]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[2]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

 –†–ê–ó–î–ï–õ5: –ê–Ω–∞–ª–∏–∑ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∫–∞—Ä—Ç—ã - ${positions[3]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[3]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[3]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

 –†–ê–ó–î–ï–õ6: –ê–Ω–∞–ª–∏–∑ –ø—è—Ç–æ–π –∫–∞—Ä—Ç—ã - ${positions[4]} (–º–∏–Ω–∏–º—É–º 10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç—É ${drawnCards[4]} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ ${positions[4]}. –û–ø–∏—à–∏ —Å–∏–º–≤–æ–ª–∏–∑–º –∫–∞—Ä—Ç—ã, –µ—ë –≥–ª—É–±–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–∞—ë—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∂–∏–∑–Ω–∏.

 –†–ê–ó–î–ï–õ7: –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 8-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
 –î–∞–π –∏—Ç–æ–≥–æ–≤—ã–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—è—Ç–∏ –∫–∞—Ä—Ç. –û–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –º—É–¥—Ä–æ—Å—Ç—å –≤ —Ü–µ–ª–æ—Å—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É, –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö.

 –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.`;

   } else {
     throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: ${cardCount}`);
   }

   console.log(`üîç Using ${cardCount}-card specific prompt`);

   const response = await openai.chat.completions.create({
     model: "openai/gpt-4o-mini",
     messages: [{ role: "user", content: prompt }],
     max_tokens: cardCount === 3 ? 8000 : 12000,
     temperature: 0.9,
   });

   const rawContent = response.choices[0].message.content || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";

   console.log("üîç ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–í–ï–¢–ê –ò–ò ==========");
   console.log("üîç –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò:", rawContent.length, "—Å–∏–º–≤–æ–ª–æ–≤");
   console.log("üîç –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:");
   console.log(rawContent.substring(0, 500));
   console.log("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:");
   console.log(rawContent.substring(rawContent.length - 300));
   console.log("üîç –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –†–ê–ó–î–ï–õ –≤ –æ—Ç–≤–µ—Ç–µ:");
   const sectionMarkers = rawContent.match(/–†–ê–ó–î–ï–õ\s*\d+:/g);
   console.log("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:", sectionMarkers);
   console.log("üîç ==========================================");

   // ‚úÖ –ü–ê–†–°–ò–ú –û–¢–í–ï–¢ –í –ü–†–ê–í–ò–õ–¨–ù–£–Æ –°–¢–†–£–ö–¢–£–†–£
   console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –¥–ª–∏–Ω–æ–π:", rawContent.length);
   const structuredReading = parseStrictTarotResponse(rawContent, cardCount, positions, drawnCards);
   console.log("üîç –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–∫—Ü–∏–π:", structuredReading.length);

   console.log(`‚úÖ Tarot reading generated: ${cardCount} cards, ${structuredReading.length} sections`);
   
   // Track API usage
   await trackApiUsage(
     userId,
     `tarot/${cardCount}/${category}/${preset}`,
     prompt,
     rawContent,
     response.usage?.prompt_tokens || prompt.length,
     response.usage?.completion_tokens || rawContent.length
   );
   
   // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í –°–ï–ö–¶–ò–ô –ö–ê–ö –û–ñ–ò–î–ê–ï–¢ –§–†–û–ù–¢–ï–ù–î
   console.log(`‚úÖ Final result: ${structuredReading.length} sections returned`);
   
   return structuredReading;
 } catch (error: any) {
   console.error("‚ùå Error generating tarot reading:", error);
   
   if (error.status === 429) {
     throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
   } else if (error.status === 401) {
     throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.");
   } else if (error.status >= 500) {
     throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
   }
   
   throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
 }
}

// ‚úÖ –°–¢–†–û–ì–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê –û–¢–í–ï–¢–ê –ò–ò
function parseStrictTarotResponse(
 rawContent: string, 
 expectedCardCount: number, 
 positions: string[], 
 drawnCards: string[]
): Array<{title: string, content: string}> {
 console.log("üîç STRICT PARSING for EXACTLY " + expectedCardCount + " cards + 1 advice");
 
 const expectedSectionCount = expectedCardCount === 3 ? 5 : 7;
 
 if (!rawContent || typeof rawContent !== 'string') {
   console.log('‚ùå Invalid rawContent, creating fallback');
   return createStrictFallbackReading(expectedCardCount, positions, drawnCards, expectedSectionCount);
 }

 // –û—á–∏—â–∞–µ–º –æ—Ç markdown
 const cleanedText = cleanRussianText(rawContent);
 
 // –ò—â–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ –º–∞—Ä–∫–µ—Ä—É "–†–ê–ó–î–ï–õ"
 const sectionMatches = cleanedText.match(/–†–ê–ó–î–ï–õ\s*\d+:[^]+?(?=–†–ê–ó–î–ï–õ\s*\d+:|$)/g);

 console.log("üîç –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π:", sectionMatches ? sectionMatches.length : 0);
 if (sectionMatches) {
   sectionMatches.forEach((section, index) => {
     console.log(`üîç –°–µ–∫—Ü–∏—è ${index + 1} (–¥–ª–∏–Ω–∞ ${section.length}):`, section.substring(0, 150) + "...");
   });
 }
 
 const sections: Array<{title: string, content: string}> = [];
 
 if (sectionMatches && sectionMatches.length >= expectedCardCount + 1) {
   console.log("‚úÖ Found " + sectionMatches.length + " sections with –†–ê–ó–î–ï–õ markers");
   
   // –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ (–†–ê–ó–î–ï–õ1)
   if (sectionMatches.length > 0) {
     const introSection = sectionMatches[0];
     let introContent = introSection.replace(/^–†–ê–ó–î–ï–õ\s*\d+:[^\n]*\n/, '').trim();
     sections.push({
       title: "–í–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ",
       content: introContent || "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–≤—è—â–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–∞—Ä–æ."
     });
   }

   // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –∫–∞—Ä—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –†–ê–ó–î–ï–õ1 - –≤–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ)
   for (let i = 0; i < expectedCardCount; i++) {
     const sectionIndex = i + 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª (–≤–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ)
     const positionName = (positions && positions.length > i && positions[i]) ? positions[i] : ("–ü–æ–∑–∏—Ü–∏—è " + (i + 1));
     const cardName = (drawnCards && drawnCards.length > i && drawnCards[i]) ? drawnCards[i] : ("–ö–∞—Ä—Ç–∞ " + (i + 1));
     
     if (sectionIndex < sectionMatches.length) {
       const section = sectionMatches[sectionIndex];
       
       // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì: —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
       let content = section.replace(/^–†–ê–ó–î–ï–õ\s*\d+:[^\n]*\n/, '').trim();
       
       // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
       content = content.replace(/\n\s*\n/g, '\n\n');
       
       // Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π
       if (!content || content.length < 100) {
         content = "–ö–∞—Ä—Ç–∞ " + cardName + " –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.";
       }
       
       sections.push({
         title: positionName + " - " + cardName,
         content: content
       });
     }
   }

   // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   if (sectionMatches.length > expectedCardCount) {
     const adviceSection = sectionMatches[expectedCardCount];
     if (adviceSection) {
       const adviceContentMatch = adviceSection.match(/–†–ê–ó–î–ï–õ\s*\d+:[^\n]+\n([\s\S]+)/);
       const adviceContent = adviceContentMatch ? adviceContentMatch[1].trim() : "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—É—Ç—å –∫ –º—É–¥—Ä–æ—Å—Ç–∏.";
       
       sections.push({
         title: "–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
         content: adviceContent
       });
     }
   }
 } else {
   console.log('‚ö†Ô∏è –†–ê–ó–î–ï–õ markers not found, using simple paragraph splitting');
   
   // Fallback: –¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
   const paragraphs = cleanedText.split('\n\n').filter(function(p) { return p.trim().length > 20; });
   const paragraphsPerCard = Math.max(1, Math.floor(paragraphs.length / (expectedCardCount + 1)));
   
   // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∫–∞—Ä—Ç
   for (let i = 0; i < expectedCardCount; i++) {
     const startIdx = i * paragraphsPerCard;
     const endIdx = (i + 1) * paragraphsPerCard;
     const cardParagraphs = paragraphs.slice(startIdx, endIdx);
     
     const positionName = (positions && positions.length > i && positions[i]) ? positions[i] : ("–ü–æ–∑–∏—Ü–∏—è " + (i + 1));
     const cardName = (drawnCards && drawnCards.length > i && drawnCards[i]) ? drawnCards[i] : ("–ö–∞—Ä—Ç–∞ " + (i + 1));
     
     sections.push({
       title: positionName + " - " + cardName,
       content: cardParagraphs.join('\n\n') || ("–ö–∞—Ä—Ç–∞ " + cardName + " –≤ –ø–æ–∑–∏—Ü–∏–∏ \"" + positionName + "\" –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ.")
     });
   }
   
   // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–±–∑–∞—Ü–µ–≤
   const remainingParagraphs = paragraphs.slice(expectedCardCount * paragraphsPerCard);
   sections.push({
     title: "–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
     content: remainingParagraphs.join('\n\n') || "–ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
   });
 }
 
 // ‚úÖ –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –¢–û–ß–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–ï–ö–¶–ò–ô
 if (sections.length !== expectedSectionCount) {
   console.log("üö® Wrong section count: " + sections.length + ", expected: " + expectedSectionCount + ", creating strict fallback");
   return createStrictFallbackReading(expectedCardCount, positions, drawnCards, expectedSectionCount);
 }

 console.log("‚úÖ PERFECT RESULT: " + sections.length + " sections (" + expectedCardCount + " cards + 1 advice)");
 return sections;
}

// ‚úÖ –°–¢–†–û–ì–ò–ô FALLBACK - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
function createStrictFallbackReading(
 cardCount: number, 
 positions: string[], 
 drawnCards: string[],
 expectedSectionCount: number
): Array<{title: string, content: string}> {
 console.log(`üîÑ Creating STRICT fallback for EXACTLY ${cardCount} cards + 1 advice`);
 
 const fallbackSections: Array<{title: string, content: string}> = [];

 // –í–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
 fallbackSections.push({
   title: "–í–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ",
   content: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–≤—è—â–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–∞—Ä–æ. –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é –∏ –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
 });

 // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∫–∞—Ä—Ç
 for (let i = 0; i < cardCount; i++) {
   const position = positions[i] || `–ü–æ–∑–∏—Ü–∏—è ${i + 1}`;
   const card = drawnCards[i] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞`;
   
   fallbackSections.push({
     title: `–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã - ${position}`,
     content: `–ö–∞—Ä—Ç–∞ ${card} –≤ –ø–æ–∑–∏—Ü–∏–∏ "${position}" –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.`
   });
 }

 // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 fallbackSections.push({
   title: "–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
   content: "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –∏—Ö –º—É–¥—Ä–æ—Å—Ç–∏ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é –≥—Ä–∞–Ω—å –∏—Å—Ç–∏–Ω—ã."
 });
 
 console.log(`‚úÖ Strict fallback created: ${fallbackSections.length} sections (${cardCount} cards + 1 advice)`);
 
 return fallbackSections;
}

// =====================================================
// –¢–ï–°–¢–û–í–´–ï –ò –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =====================================================

// Test OpenRouter connection
export async function testOpenAIConnection(): Promise<boolean> {
try {
  console.log('üîß Testing OpenRouter connection...');
  
  const response = await openai.chat.completions.create({
    model: 'openai/gpt-4o-mini',
    messages: [{ role: 'user', content: 'Test' }],
    max_tokens: 5,
  });
  
  console.log('‚úÖ OpenRouter connection test successful!');
  return true;
} catch (error: any) {
  console.error('‚ùå OpenRouter connection test failed:', error.message);
  return false;
}
}

// Health check function for monitoring
export async function healthCheck(): Promise<{ status: string; openai: boolean; timestamp: string }> {
const isOpenAIWorking = await testOpenAIConnection();

return {
  status: isOpenAIWorking ? 'healthy' : 'degraded',
  openai: isOpenAIWorking,
  timestamp: new Date().toISOString()
};
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
export function getTarotPresets(category: string): TarotPreset[] {
return TAROT_PRESETS[category] || TAROT_PRESETS["love"];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export function getTarotCategories(): string[] {
return Object.keys(TAROT_PRESETS);
}