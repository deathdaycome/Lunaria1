import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server | null) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º NODE_ENV –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  if (process.env.NODE_ENV === "development") {
    const serverOptions = {
      middlewareMode: true,
      hmr: server ? { server } : false,
      // allowedHosts removed from here, will be set in the server property below
    };

    const vite = await createViteServer({
      ...viteConfig,
      configFile: false,
      customLogger: {
        ...viteLogger,
        error: (msg, options) => {
          viteLogger.error(msg, options);
          // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ development
          // process.exit(1);
        },
      },
      server: {
        ...serverOptions,
        allowedHosts: true, // valid value for ServerOptions
      },
      appType: "custom",
    });

    app.use(vite.middlewares);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è development
    app.use("*", async (req, res, next) => {
      const url = req.originalUrl;

      try {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ index.html –≤ client –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const clientIndexPath = path.resolve(process.cwd(), "client", "index.html");
        
        if (!fs.existsSync(clientIndexPath)) {
          log(`Client index.html not found at ${clientIndexPath}`, "vite");
          return next();
        }

        let template = await fs.promises.readFile(clientIndexPath, "utf-8");
        template = template.replace(
          `src="/src/main.tsx"`,
          `src="/src/main.tsx?v=${nanoid()}"`,
        );
        const page = await vite.transformIndexHtml(url, template);
        res.status(200).set({ "Content-Type": "text/html" }).end(page);
      } catch (e) {
        log(`Error in Vite middleware: ${e}`, "vite");
        next(e);
      }
    });
    
    return server; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä
  }
  
  // –í production –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å
  return server;
}

export function serveStatic(app: Express) {
  log('=== DEBUG serveStatic ===');
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ë–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è production
  const possibleDistPaths = [
    path.resolve(process.cwd(), "dist", "public"),     // ./dist/public
    path.resolve(process.cwd(), "dist"),               // ./dist (vite output)
    path.resolve(process.cwd(), "build"),              // ./build
    path.resolve(process.cwd(), "client", "dist"),     // ./client/dist
    "/app/dist/public",                                // Docker path
    "/app/dist",                                       // Docker path
    "/app/public",                                     // Docker path
  ];
  
  let distPath = "";
  
  log('Checking possible paths:');
  for (const testPath of possibleDistPaths) {
    const exists = fs.existsSync(testPath);
    log(`- ${testPath}: ${exists}`);
    if (exists && !distPath) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
      try {
        const files = fs.readdirSync(testPath);
        if (files.length > 0) {
          distPath = testPath;
          log(`  Found ${files.length} files in ${testPath}`);
        }
      } catch (err) {
        log(`  Error reading ${testPath}: ${err}`);
      }
    }
  }
  
  if (!distPath) {
    log('‚ùå No static files found!');
    log('Current working directory:', process.cwd());
    
    try {
      const cwdFiles = fs.readdirSync(process.cwd());
      log('Files in CWD:', cwdFiles.join(', '));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
      if (cwdFiles.includes('dist')) {
        const distFiles = fs.readdirSync(path.join(process.cwd(), 'dist'));
        log('Files in dist:', distFiles.join(', '));
      }
    } catch (err) {
      log('Error reading directories: ' + (err instanceof Error ? err.message : String(err)));
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –õ—É—á—à–∏–π fallback
    const fallbackPath = path.resolve(process.cwd(), "dist", "public");
    
    try {
      fs.mkdirSync(fallbackPath, { recursive: true });
      const fallbackHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lunaria AI</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        .status { color: #666; margin-top: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåô Lunaria AI</h1>
        <p>Application is starting...</p>
        <div class="status">
            <p>‚è∞ Time: ${new Date().toLocaleString()}</p>
            <p>üîÑ Status: Loading</p>
            <p><a href="/health">Health Check</a></p>
        </div>
    </div>
</body>
</html>`;
      
      fs.writeFileSync(path.join(fallbackPath, "index.html"), fallbackHtml);
      distPath = fallbackPath;
      log('‚úÖ Created fallback static directory:', distPath);
    } catch (err) {
      log('‚ùå Error creating fallback directory: ' + (err instanceof Error ? err.message : String(err)));
    }
  }
  
  if (distPath) {
    log(`‚úÖ Using distPath: ${distPath}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    app.use(express.static(distPath, {
      index: ['index.html'],
      setHeaders: (res, filePath) => {
        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        if (filePath.endsWith('.js') || filePath.endsWith('.css')) {
          res.setHeader('Cache-Control', 'public, max-age=31536000');
        }
      }
    }));

    // SPA fallback - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú
    app.get("*", (req, res, next) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã
      if (req.path.startsWith("/api")) {
        return next();
      }
      
      const indexPath = path.join(distPath, "index.html");
      
      if (fs.existsSync(indexPath)) {
        res.sendFile(indexPath);
      } else {
        log(`‚ùå index.html not found at ${indexPath}`);
        res.status(404).json({
          error: "Application not found",
          path: req.path,
          message: "Please check if the build was successful"
        });
      }
    });
  } else {
    log('‚ùå No valid static directory found!');
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
    app.get("*", (req, res, next) => {
      if (req.path.startsWith("/api")) {
        return next();
      }
      
      res.status(503).json({
        error: "Application not available",
        message: "Static files not found. Please check the build configuration.",
        timestamp: new Date().toISOString()
      });
    });
  }
}