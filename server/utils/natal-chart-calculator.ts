import { spawn } from 'child_process';
import path from 'path';

export interface NatalChartInput {
  user_name: string;
  birth_year: number;
  birth_month: number;
  birth_day: number;
  birth_hour: number;
  birth_minute: number;
  birth_city: string;
  birth_country_code: string;
}

export interface NatalChartResult {
  svg_name?: string;
  ai_prompt?: string;
  success: boolean;
  error?: string;
}

export function callPythonNatalChart(inputData: NatalChartInput): Promise<NatalChartResult> {
  return new Promise((resolve, reject) => {
    console.log('üêç CALLING PYTHON NATAL CHART CALCULATOR');
    console.log('üì• Input data:', inputData);

    // –ü—É—Ç—å –∫ Python –∏ —Å–∫—Ä–∏–ø—Ç—É
    const pythonPath = 'C:\\Program Files\\PostgreSQL\\15\\pgAdmin 4\\python\\python.exe';
    const scriptPath = path.join(process.cwd(), 'natal_chart_calculator.py');

    console.log('üîß Python path:', pythonPath);
    console.log('üîß Script path:', scriptPath);

    // –ó–∞–ø—É—Å–∫–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å
    const pythonProcess = spawn(pythonPath, [scriptPath], {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: false
    });

    let output = '';
    let errorOutput = '';

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ stdout
    pythonProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    // –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ stderr
    pythonProcess.stderr.on('data', (data) => {
      const errorText = data.toString();
      console.log('üêç Python stderr:', errorText);
      errorOutput += errorText;
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    pythonProcess.on('close', (code) => {
      console.log('üêç Python process finished with code:', code);
      console.log('üì§ Python output:', output);

      if (code === 0) {
        try {
          // –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Python
          const result = JSON.parse(output);
          console.log('‚úÖ Python result parsed successfully:', result);
          resolve(result);
        } catch (parseError) {
          console.error('‚ùå Failed to parse Python output:', parseError);
          console.error('Raw output:', output);
          reject(new Error(`Failed to parse Python output: ${output}`));
        }
      } else {
        console.error('‚ùå Python script failed with code:', code);
        console.error('Error output:', errorOutput);
        reject(new Error(`Python script failed: ${errorOutput}`));
      }
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    pythonProcess.on('error', (error) => {
      console.error('‚ùå Failed to start Python process:', error);
      reject(new Error(`Failed to start Python process: ${error.message}`));
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Python
    try {
      const inputJson = JSON.stringify(inputData);
      console.log('üì§ Sending to Python:', inputJson);
      pythonProcess.stdin.write(inputJson);
      pythonProcess.stdin.end();
    } catch (writeError) {
      console.error('‚ùå Failed to write to Python stdin:', writeError);
      reject(new Error(`Failed to write to Python stdin: ${writeError}`));
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default callPythonNatalChart;