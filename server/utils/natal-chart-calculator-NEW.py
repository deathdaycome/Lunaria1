#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è kerykeion 2.0.0
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –Ω–∞ stdin, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –Ω–∞ stdout
"""

import json
import sys
import os
import io
import re
from pathlib import Path

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç typing –¥–ª—è Python 3.8
try:
    from typing import Dict, List, Any, Optional, Union
except ImportError:
    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
    pass

def clean_unicode_data(data):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    if data is None:
        return None
    elif isinstance(data, str):
        # –£–¥–∞–ª—è–µ–º —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = re.sub(r'[\udc00-\udfff]', '', data)
        cleaned = re.sub(r'[\ud800-\udbff]', '', cleaned) 
        return cleaned
    elif isinstance(data, (Path, os.PathLike)):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Path –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        return str(data)
    elif isinstance(data, dict):
        try:
            return {str(key): clean_unicode_data(value) for key, value in data.items()}
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning dict: {e}", file=sys.stderr)
            return str(data)
    elif isinstance(data, (list, tuple)):
        try:
            return [clean_unicode_data(item) for item in data]
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning list/tuple: {e}", file=sys.stderr)
            return str(data)
    elif isinstance(data, (int, float, bool)):
        return data
    elif hasattr(data, '__dict__'):
        # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        try:
            obj_dict = {}
            for attr_name in dir(data):
                if not attr_name.startswith('_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    try:
                        attr_value = getattr(data, attr_name)
                        if not callable(attr_value):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
                            obj_dict[attr_name] = clean_unicode_data(attr_value)
                    except Exception:
                        continue
            return obj_dict
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning object: {e}", file=sys.stderr)
            return str(data)
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        try:
            return str(data)
        except Exception:
            return "non-serializable-object"

def transliterate_name(name):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    print(f"üîÑ Original name: '{name}' (type: {type(name)})", file=sys.stderr)
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
    if isinstance(name, bytes):
        name = name.decode('utf-8')
    
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    result = ''
    for char in name:
        if char in translit_dict:
            result += translit_dict[char]
        elif char.isalnum() or char in '-_':
            result += char
        else:
            result += '_'
    
    print(f"üîÑ Transliterated: '{result}'", file=sys.stderr)
    return result

def safe_json_parse(input_text):
    """
    –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä JSON, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    """
    import re
    
    if not input_text or not input_text.strip():
        raise ValueError("Empty input")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = input_text.strip()
    
    # –£–¥–∞–ª—è–µ–º BOM –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = cleaned.lstrip('\ufeff\ufffe\x00')
    
    # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', cleaned)
    
    print(f"üîç Trying to parse: {repr(cleaned[:150])}", file=sys.stderr)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    try:
        result = json.loads(cleaned)
        print("‚úÖ Standard JSON parsing successful", file=sys.stderr)
        return result
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è Standard JSON failed: {e}", file=sys.stderr)
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON
    try:
        # –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        if ':' in cleaned and '{' not in cleaned and '"' not in cleaned:
            print("üîß Detected key:value format without quotes, reconstructing JSON", file=sys.stderr)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä—ã –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
            pairs = cleaned.split(',')
            json_obj = {}
            
            for pair in pairs:
                if ':' in pair:
                    key, value = pair.split(':', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
                    if value.isdigit():
                        json_obj[key] = int(value)
                    elif value.replace('.', '').isdigit():
                        json_obj[key] = float(value)
                    elif value.lower() in ('true', 'false'):
                        json_obj[key] = value.lower() == 'true'
                    else:
                        json_obj[key] = value
            
            print(f"üîß Reconstructed JSON: {json_obj}", file=sys.stderr)
            return json_obj
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
        fixed = cleaned.replace("'", '"')
        result = json.loads(fixed)
        print("‚úÖ Fixed with quote replacement", file=sys.stderr)
        return result
        
    except Exception as e:
        print(f"‚ö†Ô∏è Quote replacement failed: {e}", file=sys.stderr)
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
    try:
        print("üîß Using regex extraction as last resort", file=sys.stderr)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏ –±–µ–∑
        user_match = re.search(r'(?:"user_name"|user_name)\s*:\s*["\']?([^",\'}]+)["\']?', cleaned)
        year_match = re.search(r'(?:"birth_year"|birth_year)\s*:\s*(\d+)', cleaned)
        month_match = re.search(r'(?:"birth_month"|birth_month)\s*:\s*(\d+)', cleaned)
        day_match = re.search(r'(?:"birth_day"|birth_day)\s*:\s*(\d+)', cleaned)
        hour_match = re.search(r'(?:"birth_hour"|birth_hour)\s*:\s*(\d+)', cleaned)
        minute_match = re.search(r'(?:"birth_minute"|birth_minute)\s*:\s*(\d+)', cleaned)
        city_match = re.search(r'(?:"birth_city"|birth_city)\s*:\s*["\']?([^",\'}]+)["\']?', cleaned)
        country_match = re.search(r'(?:"birth_country_code"|birth_country_code)\s*:\s*["\']?([^",\'}]+)["\']?', cleaned)
        
        if all([user_match, year_match, month_match, day_match, hour_match, minute_match, city_match, country_match]):
            result = {
                "user_name": user_match.group(1),
                "birth_year": int(year_match.group(1)),
                "birth_month": int(month_match.group(1)),
                "birth_day": int(day_match.group(1)),
                "birth_hour": int(hour_match.group(1)),
                "birth_minute": int(minute_match.group(1)),
                "birth_city": city_match.group(1),
                "birth_country_code": country_match.group(1)
            }
            print(f"‚úÖ Regex extraction successful: {result}", file=sys.stderr)
            return result
        else:
            missing = []
            if not user_match: missing.append("user_name")
            if not year_match: missing.append("birth_year")
            if not month_match: missing.append("birth_month")
            if not day_match: missing.append("birth_day")
            if not hour_match: missing.append("birth_hour")
            if not minute_match: missing.append("birth_minute")
            if not city_match: missing.append("birth_city")
            if not country_match: missing.append("birth_country_code")
            
            raise ValueError(f"Could not extract required fields: {missing}")
            
    except Exception as e:
        print(f"‚ùå Regex extraction failed: {e}", file=sys.stderr)
        raise ValueError(f"Could not parse JSON after all attempts: {cleaned[:100]}")

def calculate_natal_chart(input_data):
    print("üêç FIXED VERSION FOR KERYKEION 2.0.0!", file=sys.stderr)
    print(f"üêç Input name: {input_data.get('user_name')}", file=sys.stderr)

    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    –ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø KERYKEION 2.0.0
    """
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∏–º–ø–æ—Ä—Ç –¥–ª—è kerykeion 2.0.0 - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ä–∞–±–æ—á—É—é –ª–æ–≥–∏–∫—É
        from kerykeion import KrInstance, MakeSvgInstance
        KERYKEION_VERSION = "2.0"
        print("‚úÖ Using kerykeion 2.0.0", file=sys.stderr)
    except ImportError:
        try:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é 1.x
            from kerykeion.kr_types import KrInstance
            from kerykeion.charts.charts_utils import MakeSvgInstance
            KERYKEION_VERSION = "1.x"
            print("‚úÖ Using kerykeion 1.x", file=sys.stderr)
        except ImportError:
            print("‚ùå Kerykeion library not found", file=sys.stderr)
            return {
                "error": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ kerykeion –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install kerykeion",
                "svg_name": None,
                "ai_prompt": None,
                "success": False
            }

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ê–ë–°–û–õ–Æ–¢–ù–û–ì–û –ü–£–¢–ò –ö –ü–ê–ü–ö–ï SVG
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ server
    current_file = Path(__file__)  # natal-chart-calculator-FIXED.py
    server_dir = current_file.parent.parent  # –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å server/
    svg_path = server_dir / 'public' / 'natal-charts'

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    svg_path.mkdir(parents=True, exist_ok=True)

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
    print(f"üîß Current file: {current_file}", file=sys.stderr)
    print(f"üîß Server directory: {server_dir}", file=sys.stderr)
    print(f"üîß SVG absolute path: {svg_path}", file=sys.stderr)
    print(f"üîß SVG path exists: {svg_path.exists()}", file=sys.stderr)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    svg_path_str = str(svg_path)
    
    # ‚úÖ –°–û–ó–î–ê–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ú–Ø –§–ê–ô–õ–ê –° –¢–†–ê–ù–°–õ–ò–¢–ï–†–ê–¶–ò–ï–ô
    safe_name = transliterate_name(input_data['user_name'])
    safe_name = re.sub(r'[^\w\-]', '', safe_name)
    if not safe_name:
        safe_name = "User"
    expected_svg_name = f"{safe_name}-Natal-Chart.svg"

    print(f"üîÑ Expected SVG name: '{expected_svg_name}'", file=sys.stderr)

    def translate_natal_chart(natal_data):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É JSON –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
        """
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        SIGN_TRANSLATION = {
            "Ari": "–û–≤–µ–Ω", "Tau": "–¢–µ–ª–µ—Ü", "Gem": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "Can": "–†–∞–∫",
            "Leo": "–õ–µ–≤", "Vir": "–î–µ–≤–∞", "Lib": "–í–µ—Å—ã", "Sco": "–°–∫–æ—Ä–ø–∏–æ–Ω",
            "Sag": "–°—Ç—Ä–µ–ª–µ—Ü", "Cap": "–ö–æ–∑–µ—Ä–æ–≥", "Aqu": "–í–æ–¥–æ–ª–µ–π", "Pis": "–†—ã–±—ã"
        }
        
        QUALITY_TRANSLATION = {
            "Cardinal": "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–π",
            "Fixed": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "Mutable": "–ú—É—Ç–∞–±–µ–ª—å–Ω—ã–π"
        }
        
        ELEMENT_TRANSLATION = {
            "Fire": "–û–≥–æ–Ω—å", "Earth": "–ó–µ–º–ª—è", 
            "Air": "–í–æ–∑–¥—É—Ö", "Water": "–í–æ–¥–∞"
        }
        
        HOUSE_TRANSLATION = {
            "First_House": "–ü–µ—Ä–≤—ã–π –¥–æ–º",
            "Second_House": "–í—Ç–æ—Ä–æ–π –¥–æ–º",
            "Third_House": "–¢—Ä–µ—Ç–∏–π –¥–æ–º",
            "Fourth_House": "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –¥–æ–º",
            "Fifth_House": "–ü—è—Ç—ã–π –¥–æ–º",
            "Sixth_House": "–®–µ—Å—Ç–æ–π –¥–æ–º",
            "Seventh_House": "–°–µ–¥—å–º–æ–π –¥–æ–º",
            "Eighth_House": "–í–æ—Å—å–º–æ–π –¥–æ–º",
            "Ninth_House": "–î–µ–≤—è—Ç—ã–π –¥–æ–º",
            "Tenth_House": "–î–µ—Å—è—Ç—ã–π –¥–æ–º",
            "Eleventh_House": "–û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π –¥–æ–º",
            "Twelfth_House": "–î–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π –¥–æ–º"
        }

        HOUSE_NUMBER_TRANSLATION = {
        "First": "–ü–µ—Ä–≤—ã–π",
        "Second": "–í—Ç–æ—Ä–æ–π",
        "Third": "–¢—Ä–µ—Ç–∏–π",
        "Fourth": "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π",
        "Fifth": "–ü—è—Ç—ã–π",
        "Sixth": "–®–µ—Å—Ç–æ–π",
        "Seventh": "–°–µ–¥—å–º–æ–π",
        "Eighth": "–í–æ—Å—å–º–æ–π",
        "Ninth": "–î–µ–≤—è—Ç—ã–π",
        "Tenth": "–î–µ—Å—è—Ç—ã–π",
        "Eleventh": "–û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π",
        "Twelfth": "–î–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π"
        }
        
        POINT_TYPE_TRANSLATION = {
            "Planet": "–ü–ª–∞–Ω–µ—Ç–∞",
            "AxialCusps": "–û—Å–µ–≤–∞—è —Ç–æ—á–∫–∞",
            "House": "–î–æ–º"
        }
        
        PLANET_TRANSLATION = {
            "Sun": "–°–æ–ª–Ω—Ü–µ",
            "Moon": "–õ—É–Ω–∞",
            "Mercury": "–ú–µ—Ä–∫—É—Ä–∏–π",
            "Venus": "–í–µ–Ω–µ—Ä–∞",
            "Mars": "–ú–∞—Ä—Å",
            "Jupiter": "–Æ–ø–∏—Ç–µ—Ä",
            "Saturn": "–°–∞—Ç—É—Ä–Ω",
            "Uranus": "–£—Ä–∞–Ω",
            "Neptune": "–ù–µ–ø—Ç—É–Ω",
            "Pluto": "–ü–ª—É—Ç–æ–Ω",
            "Chiron": "–•–∏—Ä–æ–Ω",
            "Mean_Lilith": "–ß–µ—Ä–Ω–∞—è –õ—É–Ω–∞ (–õ–∏–ª–∏—Ç)",
            "Ascendant": "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç",
            "Descendant": "–î–µ—Å—Ü–µ–Ω–¥–µ–Ω—Ç",
            "Medium_Coeli": "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞",
            "Imum_Coeli": "–ì–ª—É–±–∏–Ω–∞ –Ω–µ–±–∞",
            "Mean_Node": "–í–æ—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–†–∞—Ö—É)",
            "True_Node": "–í–æ—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–∏—Å—Ç–∏–Ω–Ω—ã–π)",
            "Mean_South_Node": "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–ö–µ—Ç—É)",
            "True_South_Node": "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–∏—Å—Ç–∏–Ω–Ω—ã–π)"
        }
        
        MOON_PHASE_TRANSLATION = {
            "Waxing Crescent": "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø",
            "First Quarter": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å",
            "Waxing Gibbous": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞",
            "Full Moon": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ",
            "Waning Gibbous": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞",
            "Last Quarter": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å",
            "Waning Crescent": "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø",
            "New Moon": "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
        }
        
        SYSTEM_TRANSLATION = {
            "Placidus": "–ü–ª–∞—Ü–∏–¥—É—Å",
            "Koch": "–ö–æ—Ö–∞",
            "Regiomontanus": "–†–µ–≥–∏–æ–º–æ–Ω—Ç–∞–Ω—É—Å",
            "Whole": "–¶–µ–ª—ã—Ö –∑–Ω–∞–∫–æ–≤",
            "Equal": "–†–∞–≤–Ω—ã—Ö –¥–æ–º–æ–≤",
            "Tropic": "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π",
            "Apparent Geocentric": "–í–∏–¥–∏–º—ã–π –≥–µ–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–π"
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translated_data = natal_data.copy()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é
        for field in ["zodiac_type", "houses_system_name", "perspective_type"]:
            if field in translated_data and translated_data[field] in SYSTEM_TRANSLATION:
                translated_data[field] = SYSTEM_TRANSLATION[translated_data[field]]
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ª—É–Ω–Ω—É—é —Ñ–∞–∑—É
        if "lunar_phase" in translated_data:
            moon_phase = translated_data["lunar_phase"]
            if "moon_phase_name" in moon_phase and moon_phase["moon_phase_name"] in MOON_PHASE_TRANSLATION:
                moon_phase["moon_phase_name"] = MOON_PHASE_TRANSLATION[moon_phase["moon_phase_name"]]
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç—ã
        def translate_point(point_data):
            translated = {}
            for key, value in point_data.items():
                if isinstance(value, dict):
                    translated[key] = translate_point(value)
                    continue
                # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–ï–í–û–î –ù–û–ú–ï–†–ê –î–û–ú–ê
                if key == "name" and value in HOUSE_TRANSLATION:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞ –Ω–∞ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "First_House")
                    parts = value.split('_')
                    if len(parts) > 0 and parts[0] in HOUSE_NUMBER_TRANSLATION:
                        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–µ—Ä–≤—ã–π –¥–æ–º"
                        translated["name"] = f"{HOUSE_NUMBER_TRANSLATION[parts[0]]} –¥–æ–º"
                    else:
                        translated["name"] = HOUSE_TRANSLATION.get(value, value)
                else:    
                    if key == "quality" and value in QUALITY_TRANSLATION:
                        translated[key] = QUALITY_TRANSLATION[value]
                    elif key == "element" and value in ELEMENT_TRANSLATION:
                        translated[key] = ELEMENT_TRANSLATION[value]
                    elif key == "sign" and value in SIGN_TRANSLATION:
                        translated[key] = SIGN_TRANSLATION[value]
                    elif key == "house" and value in HOUSE_TRANSLATION:
                        translated[key] = HOUSE_TRANSLATION[value]
                    elif key == "point_type" and value in POINT_TYPE_TRANSLATION:
                        translated[key] = POINT_TYPE_TRANSLATION[value]
                    elif key == "name" and value in PLANET_TRANSLATION:
                        translated[key] = PLANET_TRANSLATION[value]
                    else:
                        translated[key] = value
            return translated
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏
        for point_name in ["sun", "moon", "mercury", "venus", "mars", "jupiter", 
                        "saturn", "uranus", "neptune", "pluto", "ascendant", 
                        "descendant", "medium_coeli", "imum_coeli", "chiron", 
                        "mean_lilith", "first_house", "second_house", 
                        "third_house", "fourth_house", "fifth_house", 
                        "sixth_house", "seventh_house", "eighth_house", 
                        "ninth_house", "tenth_house", "eleventh_house", 
                        "twelfth_house", "mean_node", "true_node", 
                        "mean_south_node", "true_south_node"]:
            if point_name in translated_data:
                translated_data[point_name] = translate_point(translated_data[point_name])
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        for list_name in ["planets_names_list", "axial_cusps_names_list", "houses_names_list"]:
            if list_name in translated_data:
                translated_data[list_name] = [
                    PLANET_TRANSLATION.get(name, name) 
                    for name in translated_data[list_name]
                ]
        
        return translated_data

    def format_natal_chart_ai(translated_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ –¥–ª—è –ò–ò
        """
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –ì–ú–° —Ñ–æ—Ä–º–∞—Ç
        def deg_to_dms(decimal_deg):
            degrees = int(decimal_deg)
            fractional = decimal_deg - degrees
            minutes_full = fractional * 60
            minutes = int(minutes_full)
            seconds = round((minutes_full - minutes) * 60)
            return degrees, minutes, seconds

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
        if 'error' in translated_data:
            return f"–û—à–∏–±–∫–∞: {translated_data['error']}"
        
        output = '''–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç.
    –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ –º–æ–º–µ–Ω—Ç –∏—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä, 
    –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. –¢—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—à—å –æ—Å–æ–∑–Ω–∞–Ω–∏—é —Ç–æ–≥–æ, –∫–∞–∫–∏–µ —á–µ—Ä—Ç—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ 
    –æ–Ω–∏ –º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å, –∏ –∫–∞–∫ –∏—Ö –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –¥–∞—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. 
    –°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –∞—Å–ø–µ–∫—Ç–∞–º. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  \n'''
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        output += f"–ò–º—è: {translated_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        output += f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {translated_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, {translated_data.get('nation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        output += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {translated_data.get('iso_formatted_local_datetime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        if 'sun' in translated_data and 'sign' in translated_data['sun']:
            output += f"–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {translated_data['sun']['sign']}\n\n"
        
        # –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç
        if 'ascendant' in translated_data:
            asc = translated_data['ascendant']
            if 'position' in asc:
                deg, min, sec = deg_to_dms(asc['position'])
                output += '–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞: \n'
                output += f"–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç: {asc.get('sign', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({deg}¬∞ {min}' {sec}'')\n\n"
        
        # –°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞ (MC)
        if 'medium_coeli' in translated_data:
            mc = translated_data['medium_coeli']
            if 'position' in mc:
                deg, min, sec = deg_to_dms(mc['position'])
                output += '–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –Ω–µ–±–∞ (MC):\n'
                output += f"–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞ (MC): {mc.get('sign', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({deg}¬∞ {min}' {sec}'')\n\n"
        
        # –ü–ª–∞–Ω–µ—Ç—ã
        output += '–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã, –∞ –∑–∞—Ç–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –≤ –¥–æ–º–µ. '
        output += '–ü—Ä–∏–≤–µ–¥–∏ –º–∏–Ω–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã –∏ –º–∏–Ω–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –¥–æ–º–∞ –ø–ª–∞–Ω–µ—Ç—ã: \n'
        
        # –ü–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ –ø–ª–∞–Ω–µ—Ç
        planet_keys = [
            'sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 
            'saturn', 'uranus', 'neptune', 'pluto', 'chiron', 'mean_lilith',
            'mean_node', 'true_node'
        ]
        
        for key in planet_keys:
            planet = translated_data.get(key)
            if planet and 'position' in planet:
                deg, min, sec = deg_to_dms(planet['position'])
                output += f"{planet.get('name', key)}: {planet.get('sign', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({deg}¬∞ {min}' {sec}'') –≤ {planet.get('house', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        # –î–æ–º–∞
        output += '\n–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–æ–≤. –û–ø–∏—à–∏ –º–∏–Ω–∏–º—É–º –≤ 8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –∫–∞–∂–¥—ã–π –¥–æ–º:\n'
        house_keys = [
            'first_house', 'second_house', 'third_house', 'fourth_house',
            'fifth_house', 'sixth_house', 'seventh_house', 'eighth_house',
            'ninth_house', 'tenth_house', 'eleventh_house', 'twelfth_house'
        ]
        
        for key in house_keys:
            house = translated_data.get(key)
            if house and 'position' in house:
                deg, min, sec = deg_to_dms(house['position'])
                output += f"{house.get('name', key)}: {house.get('sign', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({deg}¬∞ {min}' {sec}'')\n"
        
        # –õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞
        lunar_phase = translated_data.get('lunar_phase', {})
        if lunar_phase:
            output += f"\n–õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞: {lunar_phase.get('moon_phase_name', '')} {lunar_phase.get('moon_emoji', '')}\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        output += '\n–°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. '
        output += '–ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤. –£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n'
        output += '- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'
        output += '- –£—á–∏—Ç—ã–≤–∞–π —Å—Ç–∏—Ö–∏–∏ (–æ–≥–æ–Ω—å, –∑–µ–º–ª—è, –≤–æ–∑–¥—É—Ö, –≤–æ–¥–∞) –∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–π, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –º—É—Ç–∞–±–µ–ª—å–Ω—ã–π)\n'
        output += '- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–º–æ–≤ –∏ –ø–ª–∞–Ω–µ—Ç\n'
        output += '- –£–∫–∞–∂–∏ –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ä—Ç–µ\n'
        output += '- –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤'
        
        return output

    try:
        # –°–ª–æ–≤–∞—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        CITY_COORDINATES = {
            "–ú–æ—Å–∫–≤–∞": {"lat": 55.7558, "lng": 37.6176, "tz": "Europe/Moscow"},
            "Moscow": {"lat": 55.7558, "lng": 37.6176, "tz": "Europe/Moscow"},
            "–ú—ã—Ç–∏—â–∏": {"lat": 55.9116, "lng": 37.7307, "tz": "Europe/Moscow"},
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {"lat": 59.9311, "lng": 30.3609, "tz": "Europe/Moscow"},
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": {"lat": 56.8431, "lng": 60.6454, "tz": "Asia/Yekaterinburg"},
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": {"lat": 55.0084, "lng": 82.9357, "tz": "Asia/Novosibirsk"},
            "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": {"lat": 45.0355, "lng": 38.9753, "tz": "Europe/Moscow"},
        }
        
        city = input_data["birth_city"]
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è kerykeion 2.0.0 - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ä–∞–±–æ—á—É—é –ª–æ–≥–∏–∫—É
        if city in CITY_COORDINATES:
            coords = CITY_COORDINATES[city]
            dark_theme_subject = KrInstance(
                name=input_data["user_name"],
                year=input_data["birth_year"],
                month=input_data["birth_month"],
                day=input_data["birth_day"],
                hours=input_data["birth_hour"],
                minuts=input_data["birth_minute"],
                lat=coords["lat"],
                lon=coords["lng"],  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: lon –≤–º–µ—Å—Ç–æ lng
                tz_str=coords["tz"]
            )
            
        else:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
            try:
                dark_theme_subject = KrInstance(
                    name=input_data["user_name"],
                    year=input_data["birth_year"],
                    month=input_data["birth_month"],
                    day=input_data["birth_day"],
                    hours=input_data["birth_hour"],  # –ò–°–ü–†–ê–í–õ–ï–ù–û: hours
                    minuts=input_data["birth_minute"],  # –ò–°–ü–†–ê–í–õ–ï–ù–û: minuts
                    city=city,
                    nat=input_data["birth_country_code"]  # –ò–°–ü–†–ê–í–õ–ï–ù–û: nat –≤–º–µ—Å—Ç–æ nation
                )
            except:
                # Fallback –Ω–∞ –ú–æ—Å–∫–≤—É –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                coords = CITY_COORDINATES["–ú–æ—Å–∫–≤–∞"]
                dark_theme_subject = KrInstance(
                    name=input_data["user_name"],
                    year=input_data["birth_year"],
                    month=input_data["birth_month"],
                    day=input_data["birth_day"],
                    hours=input_data["birth_hour"],
                    minuts=input_data["birth_minute"],
                    lat=coords["lat"],
                    lon=coords["lng"],  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: lon –≤–º–µ—Å—Ç–æ lng
                    tz_str=coords["tz"]
                )

        print("‚úÖ Natal chart object created", file=sys.stderr)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è kerykeion 2.0.0 - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ä–∞–±–æ—á—É—é –ª–æ–≥–∏–∫—É
        try:
            if hasattr(dark_theme_subject, '__dict__'):
                raw_data = {}
                for key, value in dark_theme_subject.__dict__.items():
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
                        json.dumps(value, default=str)
                        raw_data[key] = value
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                        raw_data[key] = str(value)
            else:
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –ø—Ä–æ–º–ø—Ç–∞
                raw_data = {
                    "name": input_data["user_name"],
                    "city": input_data["birth_city"],
                    "nation": input_data["birth_country_code"],
                    "year": input_data["birth_year"],
                    "month": input_data["birth_month"],
                    "day": input_data["birth_day"]
                }
        except Exception as json_error:
            print(f"‚ö†Ô∏è JSON extraction error: {json_error}", file=sys.stderr)
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –ø—Ä–æ–º–ø—Ç–∞
            raw_data = {
                "name": input_data["user_name"],
                "city": input_data["birth_city"],
                "nation": input_data["birth_country_code"],
                "year": input_data["birth_year"],
                "month": input_data["birth_month"],
                "day": input_data["birth_day"]
            }

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
        cleaned_data = clean_unicode_data(raw_data)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º json –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        translated_data = translate_natal_chart(cleaned_data)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ json
        ai_prompt = format_natal_chart_ai(translated_data)
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º—Ç –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        ai_prompt = clean_unicode_data(ai_prompt)

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–ï SVG –î–õ–Ø KERYKEION 2.0.0
        print(f"üìÅ Creating SVG chart in: {svg_path_str}", file=sys.stderr)
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º SVG
            import os
            old_cwd = os.getcwd()
            os.chdir(svg_path_str)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É server/public/natal-charts
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–∞–≤–ª—è–µ–º stdout –æ—Ç kerykeion
            from contextlib import redirect_stdout
            import io
            
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout —á—Ç–æ–±—ã kerykeion –Ω–µ –º–µ—à–∞–ª JSON –≤—ã–≤–æ–¥—É
            captured_output = io.StringIO()
            
            with redirect_stdout(captured_output):
                svg_maker = MakeSvgInstance(dark_theme_subject)
                svg_maker.makeSVG()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(old_cwd)
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–º–µ—â–∞–µ–º SVG —Ñ–∞–π–ª—ã –∏–∑ /root –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º —Å–æ–∑–¥–∞–ª–∏—Å—å
            import glob
            import shutil
            root_svg_files = glob.glob("/root/*.svg")
            for svg_file in root_svg_files:
                try:
                    filename = os.path.basename(svg_file)
                    target_path = os.path.join(svg_path_str, filename)
                    shutil.move(svg_file, target_path)
                    print(f"‚úÖ Moved {filename} to target directory", file=sys.stderr)
                except Exception as e:
                    print(f"‚ö†Ô∏è Failed to move {svg_file}: {e}", file=sys.stderr)
            
            print("‚úÖ SVG generated with MakeSvgInstance", file=sys.stderr)
        except Exception as svg_error:
            print(f"‚ö†Ô∏è SVG generation error: {svg_error}", file=sys.stderr)
            return {
                "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG: {str(svg_error)}",
                "svgFileName": None,
                "ai_prompt": ai_prompt,
                "success": False
            }

        # ‚úÖ –ò–©–ï–ú –°–û–ó–î–ê–ù–ù–´–ô SVG –§–ê–ô–õ
        expected_svg_path = svg_path / expected_svg_name
        
        print(f"üîç Looking for: {expected_svg_path}", file=sys.stderr)
        
        if expected_svg_path.exists():
            print(f"‚úÖ Found expected SVG: {expected_svg_name}", file=sys.stderr)
            final_svg_name = expected_svg_name
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ SVG —Ç–∞–º
            svg_files_in_target = list(svg_path.glob("*.svg"))
            all_svg_files = svg_files_in_target
            
            print(f"üîç Found SVG files in target dir: {[f.name for f in svg_files_in_target]}", file=sys.stderr)
            
            if all_svg_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                newest_svg = max(all_svg_files, key=lambda x: x.stat().st_mtime)
                print(f"‚úÖ Using newest SVG: {newest_svg.name}", file=sys.stderr)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∞–π–ª —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                try:
                    newest_svg.rename(svg_path / expected_svg_name)
                    final_svg_name = expected_svg_name
                    print(f"‚úÖ Renamed to: {expected_svg_name}", file=sys.stderr)
                except Exception as rename_error:
                    print(f"‚ö†Ô∏è Rename failed: {rename_error}", file=sys.stderr)
                    final_svg_name = newest_svg.name
            else:
                print("‚ùå No SVG files found!", file=sys.stderr)
                return {
                    "error": "SVG —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                    "svg_name": None,
                    "ai_prompt": ai_prompt,
                    "success": False
                }

        # ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê
        final_svg_path = svg_path / final_svg_name
        if final_svg_path.exists():
            print(f"‚úÖ Final SVG file exists: {final_svg_name}", file=sys.stderr)
            print(f"üìÅ SVG file size: {final_svg_path.stat().st_size} bytes", file=sys.stderr)
        else:
            print(f"‚ùå Final SVG file missing: {final_svg_name}", file=sys.stderr)

        # ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ò–ú–ï–ù–ï–ú –§–ê–ô–õ–ê
        return {
            "svg_name": final_svg_name,
            "ai_prompt": ai_prompt,
            "success": True
        }

    except Exception as e:
        print(f"‚ùå Error in calculate_natal_chart: {str(e)}", file=sys.stderr)
        return {
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {str(e)}",
            "svg_name": None,
            "ai_prompt": None,
            "success": False
        }


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    –ß–∏—Ç–∞–µ—Ç JSON –∏–∑ stdin, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ stdout
    """
    try:
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ stdin —Å —É–¥–∞–ª–µ–Ω–∏–µ–º BOM
        if len(sys.argv) > 1:
            input_text = sys.argv[1]
        else:
            input_text = sys.stdin.read().strip()
        
        # –£–¥–∞–ª—è–µ–º BOM –µ—Å–ª–∏ –µ—Å—Ç—å
        if input_text.startswith('\ufeff'):
            input_text = input_text[1:]
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        input_text = input_text.lstrip('\x00\ufeff\ufffe')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
        print(f"üì• Raw input received: {repr(input_text[:100])}", file=sys.stderr)
        print(f"üì• Input length: {len(input_text)}", file=sys.stderr)
        
        if not input_text.strip():
            raise ValueError("No input data received")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä JSON
        input_data = safe_json_parse(input_text)
        
        print(f"‚úÖ JSON parsed successfully: {input_data.get('user_name')}", file=sys.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['user_name', 'birth_year', 'birth_month', 'birth_day', 
                          'birth_hour', 'birth_minute', 'birth_city', 'birth_country_code']
        
        missing_fields = [field for field in required_fields if field not in input_data]
        if missing_fields:
            raise ValueError(f"Missing required fields: {missing_fields}")
            
        print("‚úÖ All required fields present", file=sys.stderr)
        print("üêç FIXED VERSION FOR KERYKEION 2.0.0!", file=sys.stderr)
        print(f"üêç Input name: {input_data['user_name']}", file=sys.stderr)
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
        result = calculate_natal_chart(input_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        print(f"‚ùå Error in main(): {e}", file=sys.stderr)
        error_result = {
            "success": False,
            "error": str(e),
            "svg_name": None,
            "ai_prompt": None
        }
        print(json.dumps(error_result, ensure_ascii=False))
        sys.exit(1)


if __name__ == "__main__":
    main()