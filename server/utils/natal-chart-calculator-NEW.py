#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è Lunaria AI
–í–µ—Ä—Å–∏—è –¥–ª—è kerykeion 4.23.0 (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –Ω–∞ stdin, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –Ω–∞ stdout
"""

import json
import sys
import os
import io
import re
from pathlib import Path

def clean_unicode_data(data):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    if data is None:
        return None
    elif isinstance(data, str):
        # –£–¥–∞–ª—è–µ–º —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = re.sub(r'[\udc00-\udfff]', '', data)
        cleaned = re.sub(r'[\ud800-\udbff]', '', cleaned) 
        return cleaned
    elif isinstance(data, (Path, os.PathLike)):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Path –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        return str(data)
    elif isinstance(data, dict):
        try:
            return {str(key): clean_unicode_data(value) for key, value in data.items()}
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning dict: {e}", file=sys.stderr)
            return str(data)
    elif isinstance(data, (list, tuple)):
        try:
            return [clean_unicode_data(item) for item in data]
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning list/tuple: {e}", file=sys.stderr)
            return str(data)
    elif isinstance(data, (int, float, bool)):
        return data
    elif hasattr(data, '__dict__'):
        # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        try:
            obj_dict = {}
            for attr_name in dir(data):
                if not attr_name.startswith('_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    try:
                        attr_value = getattr(data, attr_name)
                        if not callable(attr_value):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
                            obj_dict[attr_name] = clean_unicode_data(attr_value)
                    except Exception:
                        continue
            return obj_dict
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning object: {e}", file=sys.stderr)
            return str(data)
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        try:
            return str(data)
        except Exception:
            return "non-serializable-object"

def safe_json_parse(input_text):
    """–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä JSON"""
    if not input_text or not input_text.strip():
        raise ValueError("Empty input")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = input_text.strip()
    cleaned = cleaned.lstrip('\ufeff\ufffe\x00')
    cleaned = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', cleaned)
    
    print(f"üîç Trying to parse: {repr(cleaned[:150])}", file=sys.stderr)
    
    try:
        result = json.loads(cleaned)
        print("‚úÖ Standard JSON parsing successful", file=sys.stderr)
        return result
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è Standard JSON failed: {e}", file=sys.stderr)
        raise ValueError(f"Could not parse JSON: {cleaned[:100]}")

def calculate_natal_chart(input_data):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è kerykeion 4.23.0
    """
    print("üêç USING KERYKEION 4.23.0 - CUSTOMER VERSION!", file=sys.stderr)
    print(f"üêç Input name: {input_data.get('user_name')}", file=sys.stderr)

    try:
        # –ò–º–ø–æ—Ä—Ç –¥–ª—è kerykeion 4.23.0 (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
        from kerykeion import AstrologicalSubject, KerykeionChartSVG
        print("‚úÖ Using kerykeion 4.23.0 - AstrologicalSubject & KerykeionChartSVG", file=sys.stderr)
    except ImportError as e:
        print(f"‚ùå Kerykeion library not found: {e}", file=sys.stderr)
        return {
            "error": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ kerykeion –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install kerykeion",
            "svg_name": None,
            "ai_prompt": None,
            "success": False
        }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ SVG (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞)
    current_file = Path(__file__)
    server_dir = current_file.parent.parent
    svg_path = server_dir / 'public' / 'natal-charts'
    svg_path.mkdir(parents=True, exist_ok=True)
    svg_path_str = str(svg_path)
    
    print(f"üîß SVG path: {svg_path_str}", file=sys.stderr)
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    safe_name = re.sub(r'[^\w\-]', '', input_data['user_name'])
    if not safe_name:
        safe_name = "User"
    svg_name = f"{safe_name}- Natal Chart.svg"

    def translate_natal_chart(natal_data):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É JSON –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
        SIGN_TRANSLATION = {
            "Ari": "–û–≤–µ–Ω", "Tau": "–¢–µ–ª–µ—Ü", "Gem": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "Can": "–†–∞–∫",
            "Leo": "–õ–µ–≤", "Vir": "–î–µ–≤–∞", "Lib": "–í–µ—Å—ã", "Sco": "–°–∫–æ—Ä–ø–∏–æ–Ω",
            "Sag": "–°—Ç—Ä–µ–ª–µ—Ü", "Cap": "–ö–æ–∑–µ—Ä–æ–≥", "Aqu": "–í–æ–¥–æ–ª–µ–π", "Pis": "–†—ã–±—ã"
        }
        
        QUALITY_TRANSLATION = {
            "Cardinal": "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–π",
            "Fixed": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "Mutable": "–ú—É—Ç–∞–±–µ–ª—å–Ω—ã–π"
        }
        
        ELEMENT_TRANSLATION = {
            "Fire": "–û–≥–æ–Ω—å", "Earth": "–ó–µ–º–ª—è", 
            "Air": "–í–æ–∑–¥—É—Ö", "Water": "–í–æ–¥–∞"
        }
        
        HOUSE_TRANSLATION = {
            "First_House": "–ü–µ—Ä–≤—ã–π –¥–æ–º",
            "Second_House": "–í—Ç–æ—Ä–æ–π –¥–æ–º",
            "Third_House": "–¢—Ä–µ—Ç–∏–π –¥–æ–º",
            "Fourth_House": "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –¥–æ–º",
            "Fifth_House": "–ü—è—Ç—ã–π –¥–æ–º",
            "Sixth_House": "–®–µ—Å—Ç–æ–π –¥–æ–º",
            "Seventh_House": "–°–µ–¥—å–º–æ–π –¥–æ–º",
            "Eighth_House": "–í–æ—Å—å–º–æ–π –¥–æ–º",
            "Ninth_House": "–î–µ–≤—è—Ç—ã–π –¥–æ–º",
            "Tenth_House": "–î–µ—Å—è—Ç—ã–π –¥–æ–º",
            "Eleventh_House": "–û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π –¥–æ–º",
            "Twelfth_House": "–î–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π –¥–æ–º"
        }

        HOUSE_NUMBER_TRANSLATION = {
            "First": "–ü–µ—Ä–≤—ã–π", "Second": "–í—Ç–æ—Ä–æ–π", "Third": "–¢—Ä–µ—Ç–∏–π",
            "Fourth": "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π", "Fifth": "–ü—è—Ç—ã–π", "Sixth": "–®–µ—Å—Ç–æ–π",
            "Seventh": "–°–µ–¥—å–º–æ–π", "Eighth": "–í–æ—Å—å–º–æ–π", "Ninth": "–î–µ–≤—è—Ç—ã–π",
            "Tenth": "–î–µ—Å—è—Ç—ã–π", "Eleventh": "–û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π", "Twelfth": "–î–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π"
        }
        
        POINT_TYPE_TRANSLATION = {
            "Planet": "–ü–ª–∞–Ω–µ—Ç–∞",
            "AxialCusps": "–û—Å–µ–≤–∞—è —Ç–æ—á–∫–∞",
            "House": "–î–æ–º"
        }
        
        PLANET_TRANSLATION = {
            "Sun": "–°–æ–ª–Ω—Ü–µ", "Moon": "–õ—É–Ω–∞", "Mercury": "–ú–µ—Ä–∫—É—Ä–∏–π",
            "Venus": "–í–µ–Ω–µ—Ä–∞", "Mars": "–ú–∞—Ä—Å", "Jupiter": "–Æ–ø–∏—Ç–µ—Ä",
            "Saturn": "–°–∞—Ç—É—Ä–Ω", "Uranus": "–£—Ä–∞–Ω", "Neptune": "–ù–µ–ø—Ç—É–Ω",
            "Pluto": "–ü–ª—É—Ç–æ–Ω", "Chiron": "–•–∏—Ä–æ–Ω", "Mean_Lilith": "–ß–µ—Ä–Ω–∞—è –õ—É–Ω–∞ (–õ–∏–ª–∏—Ç)",
            "Ascendant": "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", "Descendant": "–î–µ—Å—Ü–µ–Ω–¥–µ–Ω—Ç",
            "Medium_Coeli": "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞", "Imum_Coeli": "–ì–ª—É–±–∏–Ω–∞ –Ω–µ–±–∞",
            "Mean_Node": "–í–æ—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–†–∞—Ö—É)", "True_Node": "–í–æ—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–∏—Å—Ç–∏–Ω–Ω—ã–π)",
            "Mean_South_Node": "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–ö–µ—Ç—É)", "True_South_Node": "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª (–∏—Å—Ç–∏–Ω–Ω—ã–π)"
        }
        
        MOON_PHASE_TRANSLATION = {
            "Waxing Crescent": "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø", "First Quarter": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å",
            "Waxing Gibbous": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "Full Moon": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ",
            "Waning Gibbous": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "Last Quarter": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å",
            "Waning Crescent": "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø", "New Moon": "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
        }
        
        SYSTEM_TRANSLATION = {
            "Placidus": "–ü–ª–∞—Ü–∏–¥—É—Å", "Koch": "–ö–æ—Ö–∞", "Regiomontanus": "–†–µ–≥–∏–æ–º–æ–Ω—Ç–∞–Ω—É—Å",
            "Whole": "–¶–µ–ª—ã—Ö –∑–Ω–∞–∫–æ–≤", "Equal": "–†–∞–≤–Ω—ã—Ö –¥–æ–º–æ–≤", "Tropic": "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π",
            "Apparent Geocentric": "–í–∏–¥–∏–º—ã–π –≥–µ–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–π"
        }
        
        translated_data = natal_data.copy()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
        for field in ["zodiac_type", "houses_system_name", "perspective_type"]:
            if field in translated_data and translated_data[field] in SYSTEM_TRANSLATION:
                translated_data[field] = SYSTEM_TRANSLATION[translated_data[field]]
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ª—É–Ω–Ω—É—é —Ñ–∞–∑—É
        if "lunar_phase" in translated_data:
            moon_phase = translated_data["lunar_phase"]
            if "moon_phase_name" in moon_phase and moon_phase["moon_phase_name"] in MOON_PHASE_TRANSLATION:
                moon_phase["moon_phase_name"] = MOON_PHASE_TRANSLATION[moon_phase["moon_phase_name"]]
        
        def translate_point(point_data):
            translated = {}
            for key, value in point_data.items():
                if isinstance(value, dict):
                    translated[key] = translate_point(value)
                    continue
                    
                if key == "name" and value in HOUSE_TRANSLATION:
                    parts = value.split('_')
                    if len(parts) > 0 and parts[0] in HOUSE_NUMBER_TRANSLATION:
                        translated["name"] = f"{HOUSE_NUMBER_TRANSLATION[parts[0]]} –¥–æ–º"
                    else:
                        translated["name"] = HOUSE_TRANSLATION.get(value, value)
                else:    
                    if key == "quality" and value in QUALITY_TRANSLATION:
                        translated[key] = QUALITY_TRANSLATION[value]
                    elif key == "element" and value in ELEMENT_TRANSLATION:
                        translated[key] = ELEMENT_TRANSLATION[value]
                    elif key == "sign" and value in SIGN_TRANSLATION:
                        translated[key] = SIGN_TRANSLATION[value]
                    elif key == "house" and value in HOUSE_TRANSLATION:
                        translated[key] = HOUSE_TRANSLATION[value]
                    elif key == "point_type" and value in POINT_TYPE_TRANSLATION:
                        translated[key] = POINT_TYPE_TRANSLATION[value]
                    elif key == "name" and value in PLANET_TRANSLATION:
                        translated[key] = PLANET_TRANSLATION[value]
                    else:
                        translated[key] = value
            return translated
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏
        for point_name in ["sun", "moon", "mercury", "venus", "mars", "jupiter", 
                          "saturn", "uranus", "neptune", "pluto", "ascendant", 
                          "descendant", "medium_coeli", "imum_coeli", "chiron", 
                          "mean_lilith", "first_house", "second_house", 
                          "third_house", "fourth_house", "fifth_house", 
                          "sixth_house", "seventh_house", "eighth_house", 
                          "ninth_house", "tenth_house", "eleventh_house", 
                          "twelfth_house", "mean_node", "true_node", 
                          "mean_south_node", "true_south_node"]:
            if point_name in translated_data:
                translated_data[point_name] = translate_point(translated_data[point_name])
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        for list_name in ["planets_names_list", "axial_cusps_names_list", "houses_names_list"]:
            if list_name in translated_data:
                translated_data[list_name] = [
                    PLANET_TRANSLATION.get(name, name) 
                    for name in translated_data[list_name]
                ]
        
        return translated_data

    def format_natal_chart_ai(translated_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ –¥–ª—è –ò–ò"""
        
        def deg_to_dms(decimal_deg):
            degrees = int(decimal_deg)
            fractional = decimal_deg - degrees
            minutes_full = fractional * 60
            minutes = int(minutes_full)
            seconds = round((minutes_full - minutes) * 60)
            return degrees, minutes, seconds

        if 'error' in translated_data:
            return f"–û—à–∏–±–∫–∞: {translated_data['error']}"
        
        output = '''–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç.
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ –º–æ–º–µ–Ω—Ç –∏—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä, 
–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. –¢—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—à—å –æ—Å–æ–∑–Ω–∞–Ω–∏—é —Ç–æ–≥–æ, –∫–∞–∫–∏–µ —á–µ—Ä—Ç—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ 
–æ–Ω–∏ –º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å, –∏ –∫–∞–∫ –∏—Ö –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –¥–∞—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. 
–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –∞—Å–ø–µ–∫—Ç–∞–º. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  \n'''
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        output += f"–ò–º—è: {translated_data['name']}\n"
        output += f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {translated_data['city']}, {translated_data['nation']}\n"
        output += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {translated_data['iso_formatted_local_datetime']}\n\n"
        output += f"–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {translated_data['sun']['sign']}\n\n"
        
        # –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç
        asc = translated_data['ascendant']
        deg, min, sec = deg_to_dms(asc['position'])
        output += '–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞: \n'
        output += f"–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç: {asc['sign']} ({deg}¬∞ {min}' {sec}'')\n\n"
        
        # –°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞ (MC)
        mc = translated_data['medium_coeli']
        deg, min, sec = deg_to_dms(mc['position'])
        output += '–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –Ω–µ–±–∞ (MC):\n'
        output += f"–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞ (MC): {mc['sign']} ({deg}¬∞ {min}' {sec}'')\n\n"        
        
        # –ü–ª–∞–Ω–µ—Ç—ã
        output += '–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã, –∞ –∑–∞—Ç–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –≤ –¥–æ–º–µ. '
        output += '–ü—Ä–∏–≤–µ–¥–∏ –º–∏–Ω–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã –∏ –º–∏–Ω–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –¥–æ–º–∞ –ø–ª–∞–Ω–µ—Ç—ã: \n'
        
        planet_keys = [
            'sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 
            'saturn', 'uranus', 'neptune', 'pluto', 'chiron', 'mean_lilith',
            'mean_node', 'true_node'
        ]
        
        for key in planet_keys:
            planet = translated_data.get(key)
            if planet:
                deg, min, sec = deg_to_dms(planet['position'])
                output += f"{planet['name']}: {planet['sign']} ({deg}¬∞ {min}' {sec}'') –≤ {planet['house']}\n"
        
        # –î–æ–º–∞
        output += '\n–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–æ–≤. –û–ø–∏—à–∏ –º–∏–Ω–∏–º—É–º –≤ 8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –∫–∞–∂–¥—ã–π –¥–æ–º:\n'
        house_keys = [
            'first_house', 'second_house', 'third_house', 'fourth_house',
            'fifth_house', 'sixth_house', 'seventh_house', 'eighth_house',
            'ninth_house', 'tenth_house', 'eleventh_house', 'twelfth_house'
        ]
        
        for key in house_keys:
            house = translated_data.get(key)
            if house:
                deg, min, sec = deg_to_dms(house['position'])
                output += f"{house['name']}: {house['sign']} ({deg}¬∞ {min}' {sec}'')\n"
        
        # –õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞
        lunar_phase = translated_data.get('lunar_phase', {})
        if lunar_phase:
            output += f"\n–õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞: {lunar_phase.get('moon_phase_name', '')} {lunar_phase.get('moon_emoji', '')}\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        output += '\n–°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. '
        output += '–ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤. –£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n'
        output += '- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'
        output += '- –£—á–∏—Ç—ã–≤–∞–π —Å—Ç–∏—Ö–∏–∏ (–æ–≥–æ–Ω—å, –∑–µ–º–ª—è, –≤–æ–∑–¥—É—Ö, –≤–æ–¥–∞) –∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–π, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –º—É—Ç–∞–±–µ–ª—å–Ω—ã–π)\n'
        output += '- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–º–æ–≤ –∏ –ø–ª–∞–Ω–µ—Ç\n'
        output += '- –£–∫–∞–∂–∏ –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ä—Ç–µ\n'
        output += '- –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤'
        
        return output

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if "birth_lat" in input_data and "birth_lng" in input_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            dark_theme_subject = AstrologicalSubject(
                input_data["user_name"], 
                input_data["birth_year"], 
                input_data["birth_month"], 
                input_data["birth_day"], 
                input_data["birth_hour"], 
                input_data["birth_minute"], 
                input_data["birth_city"],
                input_data["birth_country_code"],
                lat=input_data["birth_lat"],
                lng=input_data["birth_lng"],
                tz_str=input_data.get("birth_tz", "Europe/Moscow")
            )
            print(f"‚úÖ Using provided coordinates: {input_data['birth_lat']}, {input_data['birth_lng']}", file=sys.stderr)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Geonames
            dark_theme_subject = AstrologicalSubject(
                input_data["user_name"], 
                input_data["birth_year"], 
                input_data["birth_month"], 
                input_data["birth_day"], 
                input_data["birth_hour"], 
                input_data["birth_minute"], 
                input_data["birth_city"], 
                input_data["birth_country_code"],
                geonames_username="deathdaycome"
            )
            print("‚úÖ Using Geonames for coordinates", file=sys.stderr)

            print("‚úÖ AstrologicalSubject created successfully", file=sys.stderr)

        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
        json_data = dark_theme_subject.json(dump=False, indent=2)
        print("‚úÖ JSON data extracted", file=sys.stderr)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
        translated_data = translate_natal_chart(json.loads(json_data))
        print("‚úÖ Data translated to Russian", file=sys.stderr)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –ò–ò (–∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
        ai_prompt = format_natal_chart_ai(translated_data)
        ai_prompt = clean_unicode_data(ai_prompt)
        print("‚úÖ AI prompt generated", file=sys.stderr)

        # –°–æ–∑–¥–∞–µ–º SVG –∫–∞—Ä—Ç—É (–∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
        try:
            dark_theme_natal_chart = KerykeionChartSVG(
                dark_theme_subject, 
                theme="dark", 
                chart_language="RU", 
                new_output_directory=svg_path_str
            )
            dark_theme_natal_chart.makeSVG()
            print("‚úÖ SVG chart created", file=sys.stderr)
            
            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π SVG —Ñ–∞–π–ª
            expected_svg_path = svg_path / svg_name
            if expected_svg_path.exists():
                final_svg_name = svg_name
                print(f"‚úÖ SVG file found: {final_svg_name}", file=sys.stderr)
            else:
                # –ò—â–µ–º –ª—é–±–æ–π SVG —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ
                svg_files = list(svg_path.glob("*.svg"))
                if svg_files:
                    newest_svg = max(svg_files, key=lambda x: x.stat().st_mtime)
                    final_svg_name = newest_svg.name
                    print(f"‚úÖ Using newest SVG: {final_svg_name}", file=sys.stderr)
                else:
                    print("‚ùå No SVG files found", file=sys.stderr)
                    final_svg_name = None
                    
        except Exception as svg_error:
            print(f"‚ö†Ô∏è SVG generation error: {svg_error}", file=sys.stderr)
            final_svg_name = None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
        return {
            "svg_name": final_svg_name,
            "ai_prompt": ai_prompt,
            "success": True
        }

    except Exception as e:
        print(f"‚ùå Error in calculate_natal_chart: {str(e)}", file=sys.stderr)
        return {
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {str(e)}",
            "svg_name": None,
            "ai_prompt": None,
            "success": False
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if len(sys.argv) > 1:
            input_text = sys.argv[1]
        else:
            input_text = sys.stdin.read().strip()
        
        # –£–¥–∞–ª—è–µ–º BOM –µ—Å–ª–∏ –µ—Å—Ç—å
        if input_text.startswith('\ufeff'):
            input_text = input_text[1:]
        
        input_text = input_text.lstrip('\x00\ufeff\ufffe')
        
        print(f"üì• Raw input received: {repr(input_text[:100])}", file=sys.stderr)
        
        if not input_text.strip():
            raise ValueError("No input data received")
        
        # –ü–∞—Ä—Å–∏–º JSON
        input_data = safe_json_parse(input_text)
        print(f"‚úÖ JSON parsed successfully: {input_data.get('user_name')}", file=sys.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['user_name', 'birth_year', 'birth_month', 'birth_day', 
                          'birth_hour', 'birth_minute', 'birth_city', 'birth_country_code']
        
        missing_fields = [field for field in required_fields if field not in input_data]
        if missing_fields:
            raise ValueError(f"Missing required fields: {missing_fields}")
            
        print("‚úÖ All required fields present", file=sys.stderr)
        print("üêç USING KERYKEION 4.23.0 - CUSTOMER VERSION!", file=sys.stderr)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        result = calculate_natal_chart(input_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        print(f"‚ùå Error in main(): {e}", file=sys.stderr)
        error_result = {
            "success": False,
            "error": str(e),
            "svg_name": None,
            "ai_prompt": None
        }
        print(json.dumps(error_result, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()