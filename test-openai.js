import OpenAI from 'openai';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è OpenRouter —Å –≤—à–∏—Ç—ã–º API –∫–ª—é—á–æ–º
const openai = new OpenAI({
  apiKey: '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',
  baseURL: 'https://openrouter.ai/api/v1',
  timeout: 30000,
  defaultHeaders: {
    'HTTP-Referer': 'http://89.169.47.164:5000',
    'X-Title': 'Lunaria AI Test'
  }
});

async function testOpenRouter() {
  try {
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter API —Å –≤—à–∏—Ç—ã–º –∫–ª—é—á–æ–º...');
    
    const response = await openai.chat.completions.create({
      model: 'meta-llama/llama-3.2-3b-instruct:free',
      messages: [{ role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' }],
      max_tokens: 50,
    });
    
    console.log('‚úÖ SUCCESS! OpenRouter —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('ü§ñ –û—Ç–≤–µ—Ç:', response.choices[0].message.content);
    console.log('üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:', response.usage);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå Status:', error.status);
    if (error.response) {
      console.error('‚ùå Response:', error.response.data);
    }
  }
}

testOpenRouter();