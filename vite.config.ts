import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

import { fileURLToPath, URL } from 'url';

// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [
    react(),
  ],
  base: '/', // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared"),
      "@assets": path.resolve(__dirname, "attached_assets"),
      // –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
      "@hooks": path.resolve(__dirname, "hooks"),
      "@utils": path.resolve(__dirname, "utils"), 
      "@components": path.resolve(__dirname, "components"),
    },
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist", "public"),
    emptyOutDir: true,
    assetsDir: "assets",
    sourcemap: false,
    rollupOptions: {
      output: {
        manualChunks: {
          'react-vendor': ['react', 'react-dom'],
          'ui-vendor': ['@mui/material', '@mui/icons-material'],
          'radix-vendor': [
            '@radix-ui/react-dialog',
            '@radix-ui/react-select',
            '@radix-ui/react-tabs',
            '@radix-ui/react-popover'
          ]
        }
      }
    }
  },
  server: {
    host: '0.0.0.0',
    port: 3001,
    cors: true,
    hmr: false, // –û—Ç–∫–ª—é—á–∞–µ–º HMR –¥–ª—è —Ç—É–Ω–Ω–µ–ª–µ–π
    fs: {
      strict: false
    },
    middlewareMode: false,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    },
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, options) => {
          proxy.on('error', (err, req, res) => {
            console.log('üî¥ API Proxy error:', err.message);
          });
          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('üîµ API Proxy request:', req.method, req.url, '-> http://localhost:5000' + req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('üü¢ API Proxy response:', proxyRes.statusCode, req.url);
          });
        },
      },
      '/health': {
        target: 'http://localhost:5000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, options) => {
          proxy.on('error', (err, req, res) => {
            console.log('üî¥ Health Proxy error:', err.message);
          });
          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('üîµ Health Proxy request:', req.method, req.url, '-> http://localhost:5000' + req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('üü¢ Health Proxy response:', proxyRes.statusCode, req.url);
          });
        },
      },
      '/test123': {
        target: 'http://localhost:5000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, options) => {
          proxy.on('error', (err, req, res) => {
            console.log('üî¥ Test Proxy error:', err.message);
          });
          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('üîµ Test Proxy request:', req.method, req.url, '-> http://localhost:5000' + req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('üü¢ Test Proxy response:', proxyRes.statusCode, req.url);
          });
        },
      }
    },
    // –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
    allowedHosts: [
      '.trycloudflare.com',
      '.loca.lt',
      '.ngrok.io',
      '.serveo.net',
      'localhost',
      '127.0.0.1',
      '0.0.0.0'
    ],
  },
  preview: {
    port: 3000,
    host: true,
  },
});