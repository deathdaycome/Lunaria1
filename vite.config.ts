import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath, URL } from 'url';

// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [
    react(),
    //runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared"),
      "@assets": path.resolve(__dirname, "attached_assets"),
    },
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist", "public"),
    emptyOutDir: true,
    assetsDir: "assets",
    sourcemap: false, // –û—Ç–∫–ª—é—á–∞–µ–º sourcemap –¥–ª—è production
    rollupOptions: {
      output: {
        manualChunks: {
          'react-vendor': ['react', 'react-dom'],
          'ui-vendor': ['@mui/material', '@mui/icons-material'],
          'radix-vendor': [
            '@radix-ui/react-dialog',
            '@radix-ui/react-select',
            '@radix-ui/react-tabs',
            '@radix-ui/react-popover'
          ]
        }
      }
    }
  },
  server: {
    host: '0.0.0.0', // –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    port: 3000,
    hmr: { overlay: false },
    proxy: {
      // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å—ã –∫ Express —Å–µ—Ä–≤–µ—Ä—É
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, options) => {
          proxy.on('error', (err, req, res) => {
            console.log('üî¥ API Proxy error:', err.message);
          });
          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('üîµ API Proxy request:', req.method, req.url, '-> http://localhost:8000' + req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('üü¢ API Proxy response:', proxyRes.statusCode, req.url);
          });
        },
      },
      // –î–æ–±–∞–≤–ª—è–µ–º health check
      '/health': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, options) => {
          proxy.on('error', (err, req, res) => {
            console.log('üî¥ Health Proxy error:', err.message);
          });
          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('üîµ Health Proxy request:', req.method, req.url, '-> http://localhost:8000' + req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('üü¢ Health Proxy response:', proxyRes.statusCode, req.url);
          });
        },
      },
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
      '/test123': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, options) => {
          proxy.on('error', (err, req, res) => {
            console.log('üî¥ Test Proxy error:', err.message);
          });
          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('üîµ Test Proxy request:', req.method, req.url, '-> http://localhost:8000' + req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('üü¢ Test Proxy response:', proxyRes.statusCode, req.url);
          });
        },
      }
    },
    allowedHosts: [
      '.trycloudflare.com', // –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã trycloudflare.com
      'planners-several-marilyn-developmental.trycloudflare.com', // –ù–æ–≤—ã–π —Ç—É–Ω–Ω–µ–ª—å–Ω—ã–π —Ö–æ—Å—Ç
      'statistical-flag-here-poor.trycloudflare.com' // –°—Ç–∞—Ä—ã–π —Ç—É–Ω–Ω–µ–ª—å–Ω—ã–π —Ö–æ—Å—Ç
    ],
  },
  preview: {
    port: 3000,
    host: true,
  },
});